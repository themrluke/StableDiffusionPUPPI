// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _clone_stream_array_ap_fixed_4u_array_ap_fixed_8_2_0_0_0_4u_16384_s_HH_
#define _clone_stream_array_ap_fixed_4u_array_ap_fixed_8_2_0_0_0_4u_16384_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct clone_stream_array_ap_fixed_4u_array_ap_fixed_8_2_0_0_0_4u_16384_s : public sc_module {
    // Port declarations 46
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > data_V_data_0_V_TDATA;
    sc_in< sc_logic > data_V_data_0_V_TVALID;
    sc_out< sc_logic > data_V_data_0_V_TREADY;
    sc_in< sc_lv<8> > data_V_data_1_V_TDATA;
    sc_in< sc_logic > data_V_data_1_V_TVALID;
    sc_out< sc_logic > data_V_data_1_V_TREADY;
    sc_in< sc_lv<8> > data_V_data_2_V_TDATA;
    sc_in< sc_logic > data_V_data_2_V_TVALID;
    sc_out< sc_logic > data_V_data_2_V_TREADY;
    sc_in< sc_lv<8> > data_V_data_3_V_TDATA;
    sc_in< sc_logic > data_V_data_3_V_TVALID;
    sc_out< sc_logic > data_V_data_3_V_TREADY;
    sc_out< sc_lv<8> > res1_V_data_0_V_din;
    sc_in< sc_logic > res1_V_data_0_V_full_n;
    sc_out< sc_logic > res1_V_data_0_V_write;
    sc_out< sc_lv<8> > res1_V_data_1_V_din;
    sc_in< sc_logic > res1_V_data_1_V_full_n;
    sc_out< sc_logic > res1_V_data_1_V_write;
    sc_out< sc_lv<8> > res1_V_data_2_V_din;
    sc_in< sc_logic > res1_V_data_2_V_full_n;
    sc_out< sc_logic > res1_V_data_2_V_write;
    sc_out< sc_lv<8> > res1_V_data_3_V_din;
    sc_in< sc_logic > res1_V_data_3_V_full_n;
    sc_out< sc_logic > res1_V_data_3_V_write;
    sc_out< sc_lv<8> > res2_V_data_0_V_din;
    sc_in< sc_logic > res2_V_data_0_V_full_n;
    sc_out< sc_logic > res2_V_data_0_V_write;
    sc_out< sc_lv<8> > res2_V_data_1_V_din;
    sc_in< sc_logic > res2_V_data_1_V_full_n;
    sc_out< sc_logic > res2_V_data_1_V_write;
    sc_out< sc_lv<8> > res2_V_data_2_V_din;
    sc_in< sc_logic > res2_V_data_2_V_full_n;
    sc_out< sc_logic > res2_V_data_2_V_write;
    sc_out< sc_lv<8> > res2_V_data_3_V_din;
    sc_in< sc_logic > res2_V_data_3_V_full_n;
    sc_out< sc_logic > res2_V_data_3_V_write;


    // Module declarations
    clone_stream_array_ap_fixed_4u_array_ap_fixed_8_2_0_0_0_4u_16384_s(sc_module_name name);
    SC_HAS_PROCESS(clone_stream_array_ap_fixed_4u_array_ap_fixed_8_2_0_0_0_4u_16384_s);

    ~clone_stream_array_ap_fixed_4u_array_ap_fixed_8_2_0_0_0_4u_16384_s();

    sc_trace_file* mVcdFile;

    regslice_both<8>* regslice_both_data_V_data_0_V_U;
    regslice_both<8>* regslice_both_data_V_data_1_V_U;
    regslice_both<8>* regslice_both_data_V_data_2_V_U;
    regslice_both<8>* regslice_both_data_V_data_3_V_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > data_V_data_0_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln22_fu_219_p2;
    sc_signal< sc_logic > data_V_data_1_V_TDATA_blk_n;
    sc_signal< sc_logic > data_V_data_2_V_TDATA_blk_n;
    sc_signal< sc_logic > data_V_data_3_V_TDATA_blk_n;
    sc_signal< sc_logic > res1_V_data_0_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > icmp_ln22_reg_247;
    sc_signal< sc_logic > res1_V_data_1_V_blk_n;
    sc_signal< sc_logic > res1_V_data_2_V_blk_n;
    sc_signal< sc_logic > res1_V_data_3_V_blk_n;
    sc_signal< sc_logic > res2_V_data_0_V_blk_n;
    sc_signal< sc_logic > res2_V_data_1_V_blk_n;
    sc_signal< sc_logic > res2_V_data_2_V_blk_n;
    sc_signal< sc_logic > res2_V_data_3_V_blk_n;
    sc_signal< sc_lv<13> > i_0_reg_208;
    sc_signal< sc_logic > io_acc_block_signal_op23;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< sc_logic > io_acc_block_signal_op31;
    sc_signal< sc_logic > io_acc_block_signal_op32;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<13> > i_fu_225_p2;
    sc_signal< sc_lv<8> > tmp_data_0_V_reg_256;
    sc_signal< sc_lv<8> > tmp_data_1_V_reg_262;
    sc_signal< sc_lv<8> > tmp_data_2_V_reg_268;
    sc_signal< sc_lv<8> > tmp_data_3_V_reg_274;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > regslice_both_data_V_data_0_V_U_apdone_blk;
    sc_signal< sc_lv<8> > data_V_data_0_V_TDATA_int;
    sc_signal< sc_logic > data_V_data_0_V_TVALID_int;
    sc_signal< sc_logic > data_V_data_0_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_data_V_data_0_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_data_V_data_1_V_U_apdone_blk;
    sc_signal< sc_lv<8> > data_V_data_1_V_TDATA_int;
    sc_signal< sc_logic > data_V_data_1_V_TVALID_int;
    sc_signal< sc_logic > data_V_data_1_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_data_V_data_1_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_data_V_data_2_V_U_apdone_blk;
    sc_signal< sc_lv<8> > data_V_data_2_V_TDATA_int;
    sc_signal< sc_logic > data_V_data_2_V_TVALID_int;
    sc_signal< sc_logic > data_V_data_2_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_data_V_data_2_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_data_V_data_3_V_U_apdone_blk;
    sc_signal< sc_lv<8> > data_V_data_3_V_TDATA_int;
    sc_signal< sc_logic > data_V_data_3_V_TVALID_int;
    sc_signal< sc_logic > data_V_data_3_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_data_V_data_3_V_U_ack_in;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<13> ap_const_lv13_1000;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_data_V_data_0_V_TDATA_blk_n();
    void thread_data_V_data_0_V_TREADY();
    void thread_data_V_data_0_V_TREADY_int();
    void thread_data_V_data_1_V_TDATA_blk_n();
    void thread_data_V_data_1_V_TREADY();
    void thread_data_V_data_1_V_TREADY_int();
    void thread_data_V_data_2_V_TDATA_blk_n();
    void thread_data_V_data_2_V_TREADY();
    void thread_data_V_data_2_V_TREADY_int();
    void thread_data_V_data_3_V_TDATA_blk_n();
    void thread_data_V_data_3_V_TREADY();
    void thread_data_V_data_3_V_TREADY_int();
    void thread_i_fu_225_p2();
    void thread_icmp_ln22_fu_219_p2();
    void thread_internal_ap_ready();
    void thread_io_acc_block_signal_op23();
    void thread_io_acc_block_signal_op31();
    void thread_io_acc_block_signal_op32();
    void thread_real_start();
    void thread_res1_V_data_0_V_blk_n();
    void thread_res1_V_data_0_V_din();
    void thread_res1_V_data_0_V_write();
    void thread_res1_V_data_1_V_blk_n();
    void thread_res1_V_data_1_V_din();
    void thread_res1_V_data_1_V_write();
    void thread_res1_V_data_2_V_blk_n();
    void thread_res1_V_data_2_V_din();
    void thread_res1_V_data_2_V_write();
    void thread_res1_V_data_3_V_blk_n();
    void thread_res1_V_data_3_V_din();
    void thread_res1_V_data_3_V_write();
    void thread_res2_V_data_0_V_blk_n();
    void thread_res2_V_data_0_V_din();
    void thread_res2_V_data_0_V_write();
    void thread_res2_V_data_1_V_blk_n();
    void thread_res2_V_data_1_V_din();
    void thread_res2_V_data_1_V_write();
    void thread_res2_V_data_2_V_blk_n();
    void thread_res2_V_data_2_V_din();
    void thread_res2_V_data_2_V_write();
    void thread_res2_V_data_3_V_blk_n();
    void thread_res2_V_data_3_V_din();
    void thread_res2_V_data_3_V_write();
    void thread_start_out();
    void thread_start_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
