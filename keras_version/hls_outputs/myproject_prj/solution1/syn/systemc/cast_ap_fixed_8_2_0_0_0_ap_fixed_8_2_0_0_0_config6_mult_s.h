// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _cast_ap_fixed_8_2_0_0_0_ap_fixed_8_2_0_0_0_config6_mult_s_HH_
#define _cast_ap_fixed_8_2_0_0_0_ap_fixed_8_2_0_0_0_config6_mult_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct cast_ap_fixed_8_2_0_0_0_ap_fixed_8_2_0_0_0_config6_mult_s : public sc_module {
    // Port declarations 3
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > x_V;
    sc_out< sc_lv<8> > ap_return;


    // Module declarations
    cast_ap_fixed_8_2_0_0_0_ap_fixed_8_2_0_0_0_config6_mult_s(sc_module_name name);
    SC_HAS_PROCESS(cast_ap_fixed_8_2_0_0_0_ap_fixed_8_2_0_0_0_config6_mult_s);

    ~cast_ap_fixed_8_2_0_0_0_ap_fixed_8_2_0_0_0_config6_mult_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > tmp_fu_72_p3;
    sc_signal< sc_lv<8> > zext_ln415_fu_80_p1;
    sc_signal< sc_lv<8> > p_Val2_s_fu_54_p4;
    sc_signal< sc_lv<8> > p_Val2_3_fu_84_p2;
    sc_signal< sc_lv<1> > tmp_4511_fu_90_p3;
    sc_signal< sc_lv<1> > p_Result_5_fu_64_p3;
    sc_signal< sc_lv<1> > xor_ln416_fu_98_p2;
    sc_signal< sc_lv<3> > p_Result_s_369_fu_118_p4;
    sc_signal< sc_lv<4> > p_Result_3_fu_134_p4;
    sc_signal< sc_lv<1> > carry_3_fu_104_p2;
    sc_signal< sc_lv<1> > Range1_all_ones_fu_144_p2;
    sc_signal< sc_lv<1> > Range1_all_zeros_fu_150_p2;
    sc_signal< sc_lv<1> > tmp_4513_fu_164_p3;
    sc_signal< sc_lv<1> > Range2_all_ones_fu_128_p2;
    sc_signal< sc_lv<1> > xor_ln779_fu_172_p2;
    sc_signal< sc_lv<1> > and_ln779_fu_178_p2;
    sc_signal< sc_lv<1> > deleted_zeros_fu_156_p3;
    sc_signal< sc_lv<1> > p_Result_6_fu_110_p3;
    sc_signal< sc_lv<1> > xor_ln785_fu_198_p2;
    sc_signal< sc_lv<1> > p_Result_s_fu_46_p3;
    sc_signal< sc_lv<1> > or_ln785_fu_204_p2;
    sc_signal< sc_lv<1> > xor_ln785_9_fu_210_p2;
    sc_signal< sc_lv<1> > deleted_ones_fu_184_p3;
    sc_signal< sc_lv<1> > and_ln781_fu_192_p2;
    sc_signal< sc_lv<1> > and_ln786_fu_222_p2;
    sc_signal< sc_lv<1> > or_ln786_fu_228_p2;
    sc_signal< sc_lv<1> > xor_ln786_fu_234_p2;
    sc_signal< sc_lv<1> > underflow_fu_240_p2;
    sc_signal< sc_lv<1> > overflow_fu_216_p2;
    sc_signal< sc_lv<1> > or_ln340_1325_fu_252_p2;
    sc_signal< sc_lv<1> > or_ln340_fu_246_p2;
    sc_signal< sc_lv<1> > or_ln340_1326_fu_258_p2;
    sc_signal< sc_lv<8> > select_ln340_fu_264_p3;
    sc_signal< sc_lv<8> > select_ln388_fu_272_p3;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_Range1_all_ones_fu_144_p2();
    void thread_Range1_all_zeros_fu_150_p2();
    void thread_Range2_all_ones_fu_128_p2();
    void thread_and_ln779_fu_178_p2();
    void thread_and_ln781_fu_192_p2();
    void thread_and_ln786_fu_222_p2();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_carry_3_fu_104_p2();
    void thread_deleted_ones_fu_184_p3();
    void thread_deleted_zeros_fu_156_p3();
    void thread_or_ln340_1325_fu_252_p2();
    void thread_or_ln340_1326_fu_258_p2();
    void thread_or_ln340_fu_246_p2();
    void thread_or_ln785_fu_204_p2();
    void thread_or_ln786_fu_228_p2();
    void thread_overflow_fu_216_p2();
    void thread_p_Result_3_fu_134_p4();
    void thread_p_Result_5_fu_64_p3();
    void thread_p_Result_6_fu_110_p3();
    void thread_p_Result_s_369_fu_118_p4();
    void thread_p_Result_s_fu_46_p3();
    void thread_p_Val2_3_fu_84_p2();
    void thread_p_Val2_s_fu_54_p4();
    void thread_select_ln340_fu_264_p3();
    void thread_select_ln388_fu_272_p3();
    void thread_tmp_4511_fu_90_p3();
    void thread_tmp_4513_fu_164_p3();
    void thread_tmp_fu_72_p3();
    void thread_underflow_fu_240_p2();
    void thread_xor_ln416_fu_98_p2();
    void thread_xor_ln779_fu_172_p2();
    void thread_xor_ln785_9_fu_210_p2();
    void thread_xor_ln785_fu_198_p2();
    void thread_xor_ln786_fu_234_p2();
    void thread_zext_ln415_fu_80_p1();
};

}

using namespace ap_rtl;

#endif
