// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _add_array_array_ap_fixed_1u_array_ap_fixed_8_2_0_0_0_1u_config5_s_HH_
#define _add_array_array_ap_fixed_1u_array_ap_fixed_8_2_0_0_0_1u_config5_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct add_array_array_ap_fixed_1u_array_ap_fixed_8_2_0_0_0_1u_config5_s : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > data1_V_data_V_TDATA;
    sc_in< sc_logic > data1_V_data_V_TVALID;
    sc_out< sc_logic > data1_V_data_V_TREADY;
    sc_in< sc_lv<8> > data2_V_data_V_dout;
    sc_in< sc_logic > data2_V_data_V_empty_n;
    sc_out< sc_logic > data2_V_data_V_read;
    sc_out< sc_lv<8> > res_V_data_V_din;
    sc_in< sc_logic > res_V_data_V_full_n;
    sc_out< sc_logic > res_V_data_V_write;


    // Module declarations
    add_array_array_ap_fixed_1u_array_ap_fixed_8_2_0_0_0_1u_config5_s(sc_module_name name);
    SC_HAS_PROCESS(add_array_array_ap_fixed_1u_array_ap_fixed_8_2_0_0_0_1u_config5_s);

    ~add_array_array_ap_fixed_1u_array_ap_fixed_8_2_0_0_0_1u_config5_s();

    sc_trace_file* mVcdFile;

    regslice_both<8>* regslice_both_data1_V_data_V_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > data1_V_data_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln15_fu_120_p2;
    sc_signal< sc_logic > data2_V_data_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > icmp_ln15_reg_200;
    sc_signal< sc_logic > res_V_data_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln15_reg_200_pp0_iter1_reg;
    sc_signal< sc_lv<10> > i_0_reg_109;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > i_fu_126_p2;
    sc_signal< sc_lv<8> > tmp_data_0_V_reg_209;
    sc_signal< sc_lv<8> > out_data_data_V_fu_192_p3;
    sc_signal< sc_lv<8> > out_data_data_V_reg_215;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<8> > sext_ln703_1_fu_135_p0;
    sc_signal< sc_lv<9> > sext_ln703_fu_132_p1;
    sc_signal< sc_lv<9> > sext_ln703_1_fu_135_p1;
    sc_signal< sc_lv<9> > add_ln1192_fu_139_p2;
    sc_signal< sc_lv<8> > add_ln703_fu_153_p0;
    sc_signal< sc_lv<8> > add_ln703_fu_153_p2;
    sc_signal< sc_lv<1> > tmp_4551_fu_145_p3;
    sc_signal< sc_lv<1> > tmp_4552_fu_158_p3;
    sc_signal< sc_lv<1> > xor_ln785_fu_166_p2;
    sc_signal< sc_lv<1> > and_ln785_fu_172_p2;
    sc_signal< sc_lv<1> > xor_ln384_fu_186_p2;
    sc_signal< sc_lv<8> > select_ln384_fu_178_p3;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > regslice_both_data1_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<8> > data1_V_data_V_TDATA_int;
    sc_signal< sc_logic > data1_V_data_V_TVALID_int;
    sc_signal< sc_logic > data1_V_data_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_data1_V_data_V_U_ack_in;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_300;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1192_fu_139_p2();
    void thread_add_ln703_fu_153_p0();
    void thread_add_ln703_fu_153_p2();
    void thread_and_ln785_fu_172_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_data1_V_data_V_TDATA_blk_n();
    void thread_data1_V_data_V_TREADY();
    void thread_data1_V_data_V_TREADY_int();
    void thread_data2_V_data_V_blk_n();
    void thread_data2_V_data_V_read();
    void thread_i_fu_126_p2();
    void thread_icmp_ln15_fu_120_p2();
    void thread_internal_ap_ready();
    void thread_out_data_data_V_fu_192_p3();
    void thread_real_start();
    void thread_res_V_data_V_blk_n();
    void thread_res_V_data_V_din();
    void thread_res_V_data_V_write();
    void thread_select_ln384_fu_178_p3();
    void thread_sext_ln703_1_fu_135_p0();
    void thread_sext_ln703_1_fu_135_p1();
    void thread_sext_ln703_fu_132_p1();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_4551_fu_145_p3();
    void thread_tmp_4552_fu_158_p3();
    void thread_xor_ln384_fu_186_p2();
    void thread_xor_ln785_fu_166_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
