-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_array_array_ap_fixed_4u_array_ap_fixed_8_2_0_0_0_4u_config21_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data1_V_data_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data1_V_data_0_V_empty_n : IN STD_LOGIC;
    data1_V_data_0_V_read : OUT STD_LOGIC;
    data1_V_data_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data1_V_data_1_V_empty_n : IN STD_LOGIC;
    data1_V_data_1_V_read : OUT STD_LOGIC;
    data1_V_data_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data1_V_data_2_V_empty_n : IN STD_LOGIC;
    data1_V_data_2_V_read : OUT STD_LOGIC;
    data1_V_data_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data1_V_data_3_V_empty_n : IN STD_LOGIC;
    data1_V_data_3_V_read : OUT STD_LOGIC;
    data2_V_data_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data2_V_data_0_V_empty_n : IN STD_LOGIC;
    data2_V_data_0_V_read : OUT STD_LOGIC;
    data2_V_data_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data2_V_data_1_V_empty_n : IN STD_LOGIC;
    data2_V_data_1_V_read : OUT STD_LOGIC;
    data2_V_data_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data2_V_data_2_V_empty_n : IN STD_LOGIC;
    data2_V_data_2_V_read : OUT STD_LOGIC;
    data2_V_data_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data2_V_data_3_V_empty_n : IN STD_LOGIC;
    data2_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of add_array_array_ap_fixed_4u_array_ap_fixed_8_2_0_0_0_4u_config21_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data1_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln15_reg_677 : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_V_data_1_V_blk_n : STD_LOGIC;
    signal data1_V_data_2_V_blk_n : STD_LOGIC;
    signal data1_V_data_3_V_blk_n : STD_LOGIC;
    signal data2_V_data_0_V_blk_n : STD_LOGIC;
    signal data2_V_data_1_V_blk_n : STD_LOGIC;
    signal data2_V_data_2_V_blk_n : STD_LOGIC;
    signal data2_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln15_reg_677_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal i_0_reg_262 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln15_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op24 : STD_LOGIC;
    signal io_acc_block_signal_op29 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op93 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_data_0_V_47_fu_399_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_0_V_47_reg_686 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_1_V_43_fu_489_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_1_V_43_reg_691 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_2_V_43_fu_579_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_2_V_43_reg_696 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_3_V_43_fu_669_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_3_V_43_reg_701 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sext_ln703_fu_317_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_2498_fu_321_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_2498_fu_321_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln703_fu_317_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1192_fu_325_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln703_fu_339_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_fu_339_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_fu_339_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4544_fu_345_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4543_fu_331_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1848_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_383_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_fu_391_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_2499_fu_407_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_2500_fu_411_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_2500_fu_411_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln703_2499_fu_407_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1192_1397_fu_415_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln703_1303_fu_429_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_1303_fu_429_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_1303_fu_429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4546_fu_435_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4545_fu_421_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1849_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1325_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1344_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_473_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_1_fu_481_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_2501_fu_497_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_2502_fu_501_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_2501_fu_497_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln703_2502_fu_501_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1192_1398_fu_505_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln703_1304_fu_519_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_1304_fu_519_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_1304_fu_519_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4548_fu_525_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4547_fu_511_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1850_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1326_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1345_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_563_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_2_fu_571_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_2503_fu_587_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_2504_fu_591_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_2503_fu_587_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln703_2504_fu_591_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1192_1399_fu_595_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln703_1305_fu_609_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_1305_fu_609_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_1305_fu_609_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4550_fu_615_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4549_fu_601_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1851_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1327_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1346_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_653_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_3_fu_661_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_fu_273_p2 = ap_const_lv1_0))) then 
                i_0_reg_262 <= i_fu_279_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_262 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln15_reg_677 <= icmp_ln15_fu_273_p2;
                icmp_ln15_reg_677_pp0_iter1_reg <= icmp_ln15_reg_677;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then
                tmp_data_0_V_47_reg_686 <= tmp_data_0_V_47_fu_399_p3;
                tmp_data_1_V_43_reg_691 <= tmp_data_1_V_43_fu_489_p3;
                tmp_data_2_V_43_reg_696 <= tmp_data_2_V_43_fu_579_p3;
                tmp_data_3_V_43_reg_701 <= tmp_data_3_V_43_fu_669_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln15_fu_273_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln15_fu_273_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln15_fu_273_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln1192_1397_fu_415_p2 <= std_logic_vector(signed(sext_ln703_2500_fu_411_p1) + signed(sext_ln703_2499_fu_407_p1));
    add_ln1192_1398_fu_505_p2 <= std_logic_vector(signed(sext_ln703_2501_fu_497_p1) + signed(sext_ln703_2502_fu_501_p1));
    add_ln1192_1399_fu_595_p2 <= std_logic_vector(signed(sext_ln703_2503_fu_587_p1) + signed(sext_ln703_2504_fu_591_p1));
    add_ln1192_fu_325_p2 <= std_logic_vector(signed(sext_ln703_2498_fu_321_p1) + signed(sext_ln703_fu_317_p1));
    add_ln703_1303_fu_429_p0 <= data1_V_data_1_V_dout;
    add_ln703_1303_fu_429_p1 <= data2_V_data_1_V_dout;
    add_ln703_1303_fu_429_p2 <= std_logic_vector(signed(add_ln703_1303_fu_429_p0) + signed(add_ln703_1303_fu_429_p1));
    add_ln703_1304_fu_519_p0 <= data2_V_data_2_V_dout;
    add_ln703_1304_fu_519_p1 <= data1_V_data_2_V_dout;
    add_ln703_1304_fu_519_p2 <= std_logic_vector(signed(add_ln703_1304_fu_519_p0) + signed(add_ln703_1304_fu_519_p1));
    add_ln703_1305_fu_609_p0 <= data2_V_data_3_V_dout;
    add_ln703_1305_fu_609_p1 <= data1_V_data_3_V_dout;
    add_ln703_1305_fu_609_p2 <= std_logic_vector(signed(add_ln703_1305_fu_609_p0) + signed(add_ln703_1305_fu_609_p1));
    add_ln703_fu_339_p0 <= data1_V_data_0_V_dout;
    add_ln703_fu_339_p1 <= data2_V_data_0_V_dout;
    add_ln703_fu_339_p2 <= std_logic_vector(signed(add_ln703_fu_339_p0) + signed(add_ln703_fu_339_p1));
    and_ln786_1325_fu_449_p2 <= (xor_ln786_1_fu_443_p2 and tmp_4545_fu_421_p3);
    and_ln786_1326_fu_539_p2 <= (xor_ln786_2_fu_533_p2 and tmp_4547_fu_511_p3);
    and_ln786_1327_fu_629_p2 <= (xor_ln786_3_fu_623_p2 and tmp_4549_fu_601_p3);
    and_ln786_fu_359_p2 <= (xor_ln786_fu_353_p2 and tmp_4543_fu_331_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln15_reg_677, ap_enable_reg_pp0_iter2, icmp_ln15_reg_677_pp0_iter1_reg, io_acc_block_signal_op24, io_acc_block_signal_op29, io_acc_block_signal_op93)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op29 = ap_const_logic_0) and (icmp_ln15_reg_677 = ap_const_lv1_0)) or ((io_acc_block_signal_op24 = ap_const_logic_0) and (icmp_ln15_reg_677 = ap_const_lv1_0)))) or ((io_acc_block_signal_op93 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln15_reg_677_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln15_reg_677, ap_enable_reg_pp0_iter2, icmp_ln15_reg_677_pp0_iter1_reg, io_acc_block_signal_op24, io_acc_block_signal_op29, io_acc_block_signal_op93)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op29 = ap_const_logic_0) and (icmp_ln15_reg_677 = ap_const_lv1_0)) or ((io_acc_block_signal_op24 = ap_const_logic_0) and (icmp_ln15_reg_677 = ap_const_lv1_0)))) or ((io_acc_block_signal_op93 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln15_reg_677_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln15_reg_677, ap_enable_reg_pp0_iter2, icmp_ln15_reg_677_pp0_iter1_reg, io_acc_block_signal_op24, io_acc_block_signal_op29, io_acc_block_signal_op93)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op29 = ap_const_logic_0) and (icmp_ln15_reg_677 = ap_const_lv1_0)) or ((io_acc_block_signal_op24 = ap_const_logic_0) and (icmp_ln15_reg_677 = ap_const_lv1_0)))) or ((io_acc_block_signal_op93 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln15_reg_677_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln15_reg_677, io_acc_block_signal_op24, io_acc_block_signal_op29)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((io_acc_block_signal_op29 = ap_const_logic_0) and (icmp_ln15_reg_677 = ap_const_lv1_0)) or ((io_acc_block_signal_op24 = ap_const_logic_0) and (icmp_ln15_reg_677 = ap_const_lv1_0)));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(icmp_ln15_reg_677_pp0_iter1_reg, io_acc_block_signal_op93)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((io_acc_block_signal_op93 = ap_const_logic_0) and (icmp_ln15_reg_677_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln15_fu_273_p2)
    begin
        if ((icmp_ln15_fu_273_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data1_V_data_0_V_blk_n_assign_proc : process(data1_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln15_reg_677)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data1_V_data_0_V_blk_n <= data1_V_data_0_V_empty_n;
        else 
            data1_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data1_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_reg_677, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data1_V_data_0_V_read <= ap_const_logic_1;
        else 
            data1_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data1_V_data_1_V_blk_n_assign_proc : process(data1_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln15_reg_677)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data1_V_data_1_V_blk_n <= data1_V_data_1_V_empty_n;
        else 
            data1_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data1_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_reg_677, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data1_V_data_1_V_read <= ap_const_logic_1;
        else 
            data1_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data1_V_data_2_V_blk_n_assign_proc : process(data1_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln15_reg_677)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data1_V_data_2_V_blk_n <= data1_V_data_2_V_empty_n;
        else 
            data1_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data1_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_reg_677, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data1_V_data_2_V_read <= ap_const_logic_1;
        else 
            data1_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data1_V_data_3_V_blk_n_assign_proc : process(data1_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln15_reg_677)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data1_V_data_3_V_blk_n <= data1_V_data_3_V_empty_n;
        else 
            data1_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data1_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_reg_677, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data1_V_data_3_V_read <= ap_const_logic_1;
        else 
            data1_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data2_V_data_0_V_blk_n_assign_proc : process(data2_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln15_reg_677)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data2_V_data_0_V_blk_n <= data2_V_data_0_V_empty_n;
        else 
            data2_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data2_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_reg_677, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data2_V_data_0_V_read <= ap_const_logic_1;
        else 
            data2_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data2_V_data_1_V_blk_n_assign_proc : process(data2_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln15_reg_677)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data2_V_data_1_V_blk_n <= data2_V_data_1_V_empty_n;
        else 
            data2_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data2_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_reg_677, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data2_V_data_1_V_read <= ap_const_logic_1;
        else 
            data2_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data2_V_data_2_V_blk_n_assign_proc : process(data2_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln15_reg_677)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data2_V_data_2_V_blk_n <= data2_V_data_2_V_empty_n;
        else 
            data2_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data2_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_reg_677, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data2_V_data_2_V_read <= ap_const_logic_1;
        else 
            data2_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data2_V_data_3_V_blk_n_assign_proc : process(data2_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln15_reg_677)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data2_V_data_3_V_blk_n <= data2_V_data_3_V_empty_n;
        else 
            data2_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data2_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_reg_677, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677 = ap_const_lv1_0))) then 
            data2_V_data_3_V_read <= ap_const_logic_1;
        else 
            data2_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_279_p2 <= std_logic_vector(unsigned(i_0_reg_262) + unsigned(ap_const_lv8_1));
    icmp_ln15_fu_273_p2 <= "1" when (i_0_reg_262 = ap_const_lv8_C0) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op24 <= (data1_V_data_3_V_empty_n and data1_V_data_2_V_empty_n and data1_V_data_1_V_empty_n and data1_V_data_0_V_empty_n);
    io_acc_block_signal_op29 <= (data2_V_data_3_V_empty_n and data2_V_data_2_V_empty_n and data2_V_data_1_V_empty_n and data2_V_data_0_V_empty_n);
    io_acc_block_signal_op93 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    or_ln340_1344_fu_467_p2 <= (xor_ln340_1_fu_461_p2 or tmp_4546_fu_435_p3);
    or_ln340_1345_fu_557_p2 <= (xor_ln340_2_fu_551_p2 or tmp_4548_fu_525_p3);
    or_ln340_1346_fu_647_p2 <= (xor_ln340_3_fu_641_p2 or tmp_4550_fu_615_p3);
    or_ln340_fu_377_p2 <= (xor_ln340_fu_371_p2 or tmp_4544_fu_345_p3);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln15_reg_677_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln15_reg_677_pp0_iter1_reg = ap_const_lv1_0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_47_reg_686;

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_677_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677_pp0_iter1_reg = ap_const_lv1_0))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln15_reg_677_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln15_reg_677_pp0_iter1_reg = ap_const_lv1_0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_43_reg_691;

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_677_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677_pp0_iter1_reg = ap_const_lv1_0))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln15_reg_677_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln15_reg_677_pp0_iter1_reg = ap_const_lv1_0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_43_reg_696;

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_677_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677_pp0_iter1_reg = ap_const_lv1_0))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln15_reg_677_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln15_reg_677_pp0_iter1_reg = ap_const_lv1_0))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_43_reg_701;

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_677_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_677_pp0_iter1_reg = ap_const_lv1_0))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln340_1_fu_473_p3 <= 
        ap_const_lv8_7F when (xor_ln340_1849_fu_455_p2(0) = '1') else 
        add_ln703_1303_fu_429_p2;
    select_ln340_2_fu_563_p3 <= 
        ap_const_lv8_7F when (xor_ln340_1850_fu_545_p2(0) = '1') else 
        add_ln703_1304_fu_519_p2;
    select_ln340_3_fu_653_p3 <= 
        ap_const_lv8_7F when (xor_ln340_1851_fu_635_p2(0) = '1') else 
        add_ln703_1305_fu_609_p2;
    select_ln340_fu_383_p3 <= 
        ap_const_lv8_7F when (xor_ln340_1848_fu_365_p2(0) = '1') else 
        add_ln703_fu_339_p2;
    select_ln388_1_fu_481_p3 <= 
        ap_const_lv8_80 when (and_ln786_1325_fu_449_p2(0) = '1') else 
        add_ln703_1303_fu_429_p2;
    select_ln388_2_fu_571_p3 <= 
        ap_const_lv8_80 when (and_ln786_1326_fu_539_p2(0) = '1') else 
        add_ln703_1304_fu_519_p2;
    select_ln388_3_fu_661_p3 <= 
        ap_const_lv8_80 when (and_ln786_1327_fu_629_p2(0) = '1') else 
        add_ln703_1305_fu_609_p2;
    select_ln388_fu_391_p3 <= 
        ap_const_lv8_80 when (and_ln786_fu_359_p2(0) = '1') else 
        add_ln703_fu_339_p2;
    sext_ln703_2498_fu_321_p0 <= data2_V_data_0_V_dout;
        sext_ln703_2498_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2498_fu_321_p0),9));

    sext_ln703_2499_fu_407_p0 <= data1_V_data_1_V_dout;
        sext_ln703_2499_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2499_fu_407_p0),9));

    sext_ln703_2500_fu_411_p0 <= data2_V_data_1_V_dout;
        sext_ln703_2500_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2500_fu_411_p0),9));

    sext_ln703_2501_fu_497_p0 <= data1_V_data_2_V_dout;
        sext_ln703_2501_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2501_fu_497_p0),9));

    sext_ln703_2502_fu_501_p0 <= data2_V_data_2_V_dout;
        sext_ln703_2502_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2502_fu_501_p0),9));

    sext_ln703_2503_fu_587_p0 <= data1_V_data_3_V_dout;
        sext_ln703_2503_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2503_fu_587_p0),9));

    sext_ln703_2504_fu_591_p0 <= data2_V_data_3_V_dout;
        sext_ln703_2504_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2504_fu_591_p0),9));

    sext_ln703_fu_317_p0 <= data1_V_data_0_V_dout;
        sext_ln703_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_317_p0),9));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4543_fu_331_p3 <= add_ln1192_fu_325_p2(8 downto 8);
    tmp_4544_fu_345_p3 <= add_ln703_fu_339_p2(7 downto 7);
    tmp_4545_fu_421_p3 <= add_ln1192_1397_fu_415_p2(8 downto 8);
    tmp_4546_fu_435_p3 <= add_ln703_1303_fu_429_p2(7 downto 7);
    tmp_4547_fu_511_p3 <= add_ln1192_1398_fu_505_p2(8 downto 8);
    tmp_4548_fu_525_p3 <= add_ln703_1304_fu_519_p2(7 downto 7);
    tmp_4549_fu_601_p3 <= add_ln1192_1399_fu_595_p2(8 downto 8);
    tmp_4550_fu_615_p3 <= add_ln703_1305_fu_609_p2(7 downto 7);
    tmp_data_0_V_47_fu_399_p3 <= 
        select_ln340_fu_383_p3 when (or_ln340_fu_377_p2(0) = '1') else 
        select_ln388_fu_391_p3;
    tmp_data_1_V_43_fu_489_p3 <= 
        select_ln340_1_fu_473_p3 when (or_ln340_1344_fu_467_p2(0) = '1') else 
        select_ln388_1_fu_481_p3;
    tmp_data_2_V_43_fu_579_p3 <= 
        select_ln340_2_fu_563_p3 when (or_ln340_1345_fu_557_p2(0) = '1') else 
        select_ln388_2_fu_571_p3;
    tmp_data_3_V_43_fu_669_p3 <= 
        select_ln340_3_fu_653_p3 when (or_ln340_1346_fu_647_p2(0) = '1') else 
        select_ln388_3_fu_661_p3;
    xor_ln340_1848_fu_365_p2 <= (tmp_4544_fu_345_p3 xor tmp_4543_fu_331_p3);
    xor_ln340_1849_fu_455_p2 <= (tmp_4546_fu_435_p3 xor tmp_4545_fu_421_p3);
    xor_ln340_1850_fu_545_p2 <= (tmp_4548_fu_525_p3 xor tmp_4547_fu_511_p3);
    xor_ln340_1851_fu_635_p2 <= (tmp_4550_fu_615_p3 xor tmp_4549_fu_601_p3);
    xor_ln340_1_fu_461_p2 <= (tmp_4545_fu_421_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_551_p2 <= (tmp_4547_fu_511_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_641_p2 <= (tmp_4549_fu_601_p3 xor ap_const_lv1_1);
    xor_ln340_fu_371_p2 <= (tmp_4543_fu_331_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_443_p2 <= (tmp_4546_fu_435_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_533_p2 <= (tmp_4548_fu_525_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_623_p2 <= (tmp_4550_fu_615_p3 xor ap_const_lv1_1);
    xor_ln786_fu_353_p2 <= (tmp_4544_fu_345_p3 xor ap_const_lv1_1);
end behav;
