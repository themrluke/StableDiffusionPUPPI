// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv_2d_cl_array_array_ap_fixed_8_2_0_0_0_4u_config50_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_TDATA,
        data_V_data_0_V_TVALID,
        data_V_data_0_V_TREADY,
        data_V_data_1_V_TDATA,
        data_V_data_1_V_TVALID,
        data_V_data_1_V_TREADY,
        data_V_data_2_V_TDATA,
        data_V_data_2_V_TVALID,
        data_V_data_2_V_TREADY,
        data_V_data_3_V_TDATA,
        data_V_data_3_V_TVALID,
        data_V_data_3_V_TREADY,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] data_V_data_0_V_TDATA;
input   data_V_data_0_V_TVALID;
output   data_V_data_0_V_TREADY;
input  [7:0] data_V_data_1_V_TDATA;
input   data_V_data_1_V_TVALID;
output   data_V_data_1_V_TREADY;
input  [7:0] data_V_data_2_V_TDATA;
input   data_V_data_2_V_TVALID;
output   data_V_data_2_V_TREADY;
input  [7:0] data_V_data_3_V_TDATA;
input   data_V_data_3_V_TVALID;
output   data_V_data_3_V_TREADY;
output  [7:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [7:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [7:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [7:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_TREADY;
reg data_V_data_1_V_TREADY;
reg data_V_data_2_V_TREADY;
reg data_V_data_3_V_TREADY;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln106_fu_834_p2;
reg    data_V_data_1_V_TDATA_blk_n;
reg    data_V_data_2_V_TDATA_blk_n;
reg    data_V_data_3_V_TDATA_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln106_reg_2495;
reg   [0:0] icmp_ln106_reg_2495_pp0_iter1_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [10:0] indvar_flatten_reg_238;
wire    io_acc_block_signal_op19;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op303;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] add_ln106_fu_840_p2;
reg  signed [7:0] tmp_data_3_V_reg_2504;
wire  signed [12:0] acc_0_V_4_fu_894_p2;
reg  signed [12:0] acc_0_V_4_reg_2510;
reg   [12:0] trunc_ln708_18_reg_2516;
reg   [0:0] tmp_48_reg_2521;
reg   [12:0] trunc_ln708_19_reg_2526;
reg   [11:0] trunc_ln708_22_reg_2531;
reg   [0:0] tmp_52_reg_2536;
wire   [10:0] add_ln415_10_fu_1201_p2;
reg   [10:0] add_ln415_10_reg_2541;
reg   [11:0] trunc_ln708_24_reg_2546;
reg   [11:0] trunc_ln708_25_reg_2551;
reg   [12:0] tmp_57_reg_2556;
reg   [11:0] trunc_ln708_26_reg_2561;
reg   [0:0] tmp_58_reg_2566;
reg   [11:0] trunc_ln708_27_reg_2571;
reg   [0:0] tmp_59_reg_2576;
wire   [12:0] add_ln1192_22_fu_1332_p2;
reg   [12:0] add_ln1192_22_reg_2581;
wire   [9:0] add_ln1192_26_fu_1348_p2;
reg   [9:0] add_ln1192_26_reg_2586;
wire   [12:0] add_ln1192_28_fu_1354_p2;
reg   [12:0] add_ln1192_28_reg_2591;
wire   [1:0] add_ln1192_31_fu_1366_p2;
reg   [1:0] add_ln1192_31_reg_2596;
reg   [0:0] tmp_60_reg_2601;
wire   [7:0] add_ln415_fu_1625_p2;
reg   [7:0] add_ln415_reg_2607;
wire   [0:0] and_ln416_fu_1645_p2;
reg   [0:0] and_ln416_reg_2613;
wire   [0:0] tmp_64_fu_1651_p3;
reg   [0:0] tmp_64_reg_2619;
wire   [0:0] icmp_ln879_5_fu_1685_p2;
reg   [0:0] icmp_ln879_5_reg_2624;
wire   [0:0] icmp_ln768_fu_1691_p2;
reg   [0:0] icmp_ln768_reg_2630;
wire   [0:0] and_ln786_fu_1725_p2;
reg   [0:0] and_ln786_reg_2635;
reg   [0:0] tmp_68_reg_2641;
wire   [7:0] add_ln415_13_fu_1769_p2;
reg   [7:0] add_ln415_13_reg_2647;
wire   [0:0] and_ln416_4_fu_1789_p2;
reg   [0:0] and_ln416_4_reg_2653;
wire   [0:0] tmp_72_fu_1795_p3;
reg   [0:0] tmp_72_reg_2659;
wire   [0:0] icmp_ln879_7_fu_1829_p2;
reg   [0:0] icmp_ln879_7_reg_2664;
wire   [0:0] icmp_ln768_4_fu_1835_p2;
reg   [0:0] icmp_ln768_4_reg_2670;
wire   [0:0] and_ln786_1_fu_1869_p2;
reg   [0:0] and_ln786_1_reg_2675;
reg   [0:0] tmp_76_reg_2681;
wire   [7:0] add_ln415_14_fu_1913_p2;
reg   [7:0] add_ln415_14_reg_2687;
wire   [0:0] and_ln416_5_fu_1933_p2;
reg   [0:0] and_ln416_5_reg_2693;
wire   [0:0] tmp_80_fu_1939_p3;
reg   [0:0] tmp_80_reg_2699;
wire   [0:0] icmp_ln879_8_fu_1965_p2;
reg   [0:0] icmp_ln879_8_reg_2704;
wire   [0:0] icmp_ln768_5_fu_1971_p2;
reg   [0:0] icmp_ln768_5_reg_2710;
wire   [0:0] and_ln786_2_fu_2005_p2;
reg   [0:0] and_ln786_2_reg_2715;
reg   [0:0] tmp_83_reg_2721;
wire   [7:0] add_ln415_15_fu_2049_p2;
reg   [7:0] add_ln415_15_reg_2727;
wire   [0:0] and_ln416_6_fu_2069_p2;
reg   [0:0] and_ln416_6_reg_2733;
wire   [0:0] tmp_87_fu_2075_p3;
reg   [0:0] tmp_87_reg_2739;
wire   [0:0] icmp_ln879_9_fu_2101_p2;
reg   [0:0] icmp_ln879_9_reg_2744;
wire   [0:0] icmp_ln768_6_fu_2107_p2;
reg   [0:0] icmp_ln768_6_reg_2750;
wire   [0:0] and_ln786_3_fu_2141_p2;
reg   [0:0] and_ln786_3_reg_2755;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_01001;
wire  signed [7:0] mul_ln1118_8_fu_252_p1;
wire  signed [14:0] sext_ln1118_25_fu_980_p1;
wire  signed [7:0] mul_ln1118_7_fu_255_p1;
wire  signed [13:0] sext_ln1118_fu_862_p1;
wire  signed [7:0] mul_ln1118_fu_256_p1;
wire  signed [7:0] mul_ln1118_11_fu_258_p1;
wire  signed [7:0] mul_ln1118_12_fu_261_p1;
wire  signed [13:0] sext_ln1118_34_fu_1280_p1;
wire  signed [7:0] mul_ln1118_10_fu_262_p1;
wire  signed [7:0] mul_ln1118_13_fu_263_p1;
wire  signed [7:0] mul_ln1118_9_fu_264_p1;
wire  signed [7:0] sext_ln1118_fu_862_p0;
wire   [13:0] mul_ln1118_fu_256_p2;
wire   [11:0] trunc_ln_fu_868_p4;
wire   [0:0] tmp_46_fu_882_p3;
wire  signed [12:0] sext_ln415_fu_878_p1;
wire   [12:0] zext_ln415_fu_890_p1;
wire  signed [7:0] shl_ln_fu_900_p1;
wire   [12:0] shl_ln_fu_900_p3;
wire  signed [13:0] sext_ln1118_21_fu_908_p1;
wire  signed [7:0] shl_ln1118_9_fu_918_p1;
wire   [10:0] shl_ln1118_9_fu_918_p3;
wire   [13:0] sub_ln1118_fu_912_p2;
wire  signed [13:0] sext_ln1118_22_fu_926_p1;
wire   [13:0] sub_ln1118_8_fu_930_p2;
wire   [11:0] trunc_ln708_s_fu_936_p4;
wire   [13:0] mul_ln1118_7_fu_255_p2;
wire   [11:0] trunc_ln708_17_fu_950_p4;
wire   [0:0] tmp_47_fu_964_p3;
wire  signed [7:0] sext_ln1118_24_fu_976_p0;
wire  signed [7:0] sext_ln1118_25_fu_980_p0;
wire  signed [7:0] sext_ln1118_26_fu_986_p0;
wire   [14:0] mul_ln1118_8_fu_252_p2;
wire   [14:0] mul_ln1118_9_fu_264_p2;
wire   [0:0] tmp_49_fu_1018_p3;
wire  signed [7:0] tmp_fu_1030_p1;
wire   [9:0] tmp_fu_1030_p3;
wire  signed [10:0] sext_ln1118_24_fu_976_p1;
wire  signed [10:0] sext_ln1118_38_fu_1038_p1;
wire   [10:0] sub_ln1118_13_fu_1042_p2;
wire   [8:0] trunc_ln708_20_fu_1048_p4;
wire   [0:0] tmp_50_fu_1062_p3;
wire  signed [7:0] shl_ln1118_s_fu_1074_p1;
wire   [11:0] shl_ln1118_s_fu_1074_p3;
wire  signed [12:0] sext_ln1118_27_fu_1082_p1;
wire  signed [12:0] sext_ln1118_26_fu_986_p1;
wire   [12:0] sub_ln1118_9_fu_1086_p2;
wire   [10:0] trunc_ln708_21_fu_1092_p4;
wire   [0:0] tmp_51_fu_1106_p3;
wire  signed [7:0] sext_ln1118_28_fu_1118_p0;
wire   [13:0] mul_ln1118_10_fu_262_p2;
wire  signed [7:0] shl_ln1118_1_fu_1141_p1;
wire   [10:0] shl_ln1118_1_fu_1141_p3;
wire  signed [7:0] shl_ln1118_2_fu_1153_p1;
wire  signed [8:0] shl_ln1118_2_fu_1153_p3;
wire  signed [11:0] sext_ln1118_29_fu_1149_p1;
wire  signed [11:0] sext_ln1118_31_fu_1165_p1;
wire   [11:0] sub_ln1118_10_fu_1169_p2;
wire   [9:0] trunc_ln708_23_fu_1175_p4;
wire   [0:0] tmp_53_fu_1189_p3;
wire  signed [10:0] sext_ln415_21_fu_1185_p1;
wire   [10:0] zext_ln415_9_fu_1197_p1;
wire  signed [7:0] shl_ln1118_3_fu_1207_p1;
wire   [12:0] shl_ln1118_3_fu_1207_p3;
wire  signed [13:0] sext_ln1118_32_fu_1215_p1;
wire  signed [13:0] sext_ln1118_30_fu_1161_p1;
wire   [13:0] add_ln1118_fu_1219_p2;
wire   [0:0] tmp_54_fu_1235_p3;
wire   [13:0] sub_ln1118_11_fu_1247_p2;
wire   [0:0] tmp_55_fu_1263_p3;
wire  signed [7:0] sext_ln1118_33_fu_1275_p0;
wire  signed [7:0] sext_ln1118_34_fu_1280_p0;
wire   [14:0] mul_ln1118_11_fu_258_p2;
wire   [13:0] mul_ln1118_12_fu_261_p2;
wire   [13:0] mul_ln1118_13_fu_263_p2;
wire  signed [12:0] sext_ln1118_23_fu_946_p1;
wire   [12:0] zext_ln1118_8_fu_1026_p1;
wire   [1:0] zext_ln1118_11_fu_1243_p1;
wire   [1:0] zext_ln1118_9_fu_1070_p1;
wire   [1:0] add_ln1192_25_fu_1338_p2;
wire   [9:0] zext_ln1192_fu_1344_p1;
wire  signed [9:0] sext_ln415_17_fu_1058_p1;
wire  signed [12:0] sext_ln415_14_fu_960_p1;
wire  signed [12:0] sext_ln415_18_fu_1102_p1;
wire   [1:0] zext_ln1118_fu_972_p1;
wire   [1:0] zext_ln1118_10_fu_1114_p1;
wire   [1:0] add_ln1192_30_fu_1360_p2;
wire   [1:0] zext_ln1118_12_fu_1271_p1;
wire  signed [12:0] sext_ln415_19_fu_1384_p1;
wire   [12:0] zext_ln415_8_fu_1387_p1;
wire   [12:0] add_ln415_9_fu_1390_p2;
wire   [13:0] shl_ln1118_4_fu_1409_p3;
wire   [10:0] shl_ln1118_5_fu_1420_p3;
wire  signed [14:0] sext_ln1118_35_fu_1416_p1;
wire  signed [14:0] sext_ln1118_36_fu_1427_p1;
wire   [14:0] sub_ln1118_12_fu_1431_p2;
wire   [12:0] tmp_56_fu_1437_p4;
wire  signed [12:0] sext_ln415_25_fu_1454_p1;
wire   [12:0] zext_ln415_10_fu_1457_p1;
wire   [12:0] add_ln415_11_fu_1460_p2;
wire  signed [12:0] sext_ln415_26_fu_1470_p1;
wire   [12:0] zext_ln415_11_fu_1473_p1;
wire   [12:0] add_ln415_12_fu_1476_p2;
wire  signed [13:0] sext_ln415_15_fu_1375_p1;
wire   [13:0] zext_ln1118_7_fu_1378_p1;
wire   [13:0] add_ln1192_20_fu_1486_p2;
wire  signed [13:0] sext_ln415_13_fu_1372_p1;
wire   [13:0] add_ln1192_21_fu_1492_p2;
wire  signed [13:0] sext_ln1192_5_fu_1502_p1;
wire  signed [13:0] sext_ln415_16_fu_1381_p1;
wire  signed [14:0] sext_ln415_20_fu_1396_p1;
wire  signed [14:0] sext_ln1192_fu_1498_p1;
wire  signed [13:0] sext_ln415_22_fu_1400_p1;
wire   [13:0] acc_1_V_fu_1505_p2;
wire   [13:0] add_ln1192_fu_1517_p2;
wire  signed [12:0] sext_ln415_23_fu_1403_p1;
wire   [12:0] add_ln1192_24_fu_1527_p2;
wire  signed [13:0] sext_ln1192_7_fu_1536_p1;
wire  signed [13:0] sext_ln1192_6_fu_1532_p1;
wire  signed [13:0] sext_ln1192_8_fu_1545_p1;
wire  signed [13:0] sext_ln415_24_fu_1406_p1;
wire   [13:0] zext_ln1192_3_fu_1554_p1;
wire   [13:0] add_ln1192_29_fu_1548_p2;
wire   [14:0] acc_0_V_fu_1511_p2;
wire  signed [14:0] sext_ln1118_39_fu_1447_p1;
wire  signed [14:0] sext_ln703_1_fu_1523_p1;
wire  signed [14:0] sext_ln1118_40_fu_1451_p1;
wire  signed [13:0] sext_ln1118_37_fu_1466_p1;
wire   [13:0] add_ln1192_27_fu_1539_p2;
wire  signed [13:0] sext_ln703_fu_1482_p1;
wire   [13:0] add_ln1192_32_fu_1557_p2;
wire   [14:0] acc_0_V_3_fu_1563_p2;
wire   [0:0] tmp_62_fu_1613_p3;
wire   [7:0] trunc_ln708_28_fu_1595_p4;
wire   [7:0] zext_ln415_12_fu_1621_p1;
wire   [0:0] tmp_63_fu_1631_p3;
wire   [0:0] tmp_61_fu_1605_p3;
wire   [0:0] xor_ln416_fu_1639_p2;
wire   [1:0] tmp_65_fu_1659_p4;
wire   [2:0] tmp_66_fu_1675_p4;
wire   [0:0] tmp_67_fu_1697_p3;
wire   [0:0] icmp_ln879_fu_1669_p2;
wire   [0:0] xor_ln779_fu_1705_p2;
wire   [0:0] and_ln779_fu_1711_p2;
wire   [0:0] select_ln416_fu_1717_p3;
wire   [14:0] acc_1_V_1_fu_1569_p2;
wire   [0:0] tmp_70_fu_1757_p3;
wire   [7:0] trunc_ln708_29_fu_1739_p4;
wire   [7:0] zext_ln415_13_fu_1765_p1;
wire   [0:0] tmp_71_fu_1775_p3;
wire   [0:0] tmp_69_fu_1749_p3;
wire   [0:0] xor_ln416_4_fu_1783_p2;
wire   [1:0] tmp_73_fu_1803_p4;
wire   [2:0] tmp_74_fu_1819_p4;
wire   [0:0] tmp_75_fu_1841_p3;
wire   [0:0] icmp_ln879_6_fu_1813_p2;
wire   [0:0] xor_ln779_4_fu_1849_p2;
wire   [0:0] and_ln779_1_fu_1855_p2;
wire   [0:0] select_ln416_4_fu_1861_p3;
wire   [13:0] acc_2_V_1_fu_1575_p2;
wire   [0:0] tmp_78_fu_1901_p3;
wire   [7:0] trunc_ln708_30_fu_1883_p4;
wire   [7:0] zext_ln415_14_fu_1909_p1;
wire   [0:0] tmp_79_fu_1919_p3;
wire   [0:0] tmp_77_fu_1893_p3;
wire   [0:0] xor_ln416_5_fu_1927_p2;
wire   [1:0] tmp_8_fu_1955_p4;
wire   [0:0] tmp_82_fu_1977_p3;
wire   [0:0] tmp_81_fu_1947_p3;
wire   [0:0] xor_ln779_5_fu_1985_p2;
wire   [0:0] and_ln779_2_fu_1991_p2;
wire   [0:0] select_ln416_5_fu_1997_p3;
wire   [13:0] acc_3_V_fu_1581_p2;
wire   [0:0] tmp_85_fu_2037_p3;
wire   [7:0] trunc_ln708_31_fu_2019_p4;
wire   [7:0] zext_ln415_15_fu_2045_p1;
wire   [0:0] tmp_86_fu_2055_p3;
wire   [0:0] tmp_84_fu_2029_p3;
wire   [0:0] xor_ln416_6_fu_2063_p2;
wire   [1:0] tmp_1_fu_2091_p4;
wire   [0:0] tmp_89_fu_2113_p3;
wire   [0:0] tmp_88_fu_2083_p3;
wire   [0:0] xor_ln779_6_fu_2121_p2;
wire   [0:0] and_ln779_3_fu_2127_p2;
wire   [0:0] select_ln416_6_fu_2133_p3;
wire   [0:0] select_ln777_fu_2147_p3;
wire   [0:0] xor_ln785_fu_2156_p2;
wire   [0:0] or_ln785_fu_2162_p2;
wire   [0:0] xor_ln785_8_fu_2167_p2;
wire   [0:0] and_ln781_fu_2152_p2;
wire   [0:0] or_ln786_fu_2178_p2;
wire   [0:0] xor_ln786_fu_2183_p2;
wire   [0:0] and_ln786_8_fu_2189_p2;
wire   [0:0] and_ln785_fu_2172_p2;
wire   [0:0] or_ln340_12_fu_2200_p2;
wire   [0:0] or_ln340_fu_2194_p2;
wire   [0:0] or_ln340_13_fu_2205_p2;
wire   [7:0] select_ln340_fu_2211_p3;
wire   [7:0] select_ln388_fu_2218_p3;
wire   [0:0] select_ln777_4_fu_2234_p3;
wire   [0:0] xor_ln785_9_fu_2243_p2;
wire   [0:0] or_ln785_4_fu_2249_p2;
wire   [0:0] xor_ln785_10_fu_2254_p2;
wire   [0:0] and_ln781_1_fu_2239_p2;
wire   [0:0] or_ln786_4_fu_2265_p2;
wire   [0:0] xor_ln786_4_fu_2270_p2;
wire   [0:0] and_ln786_9_fu_2276_p2;
wire   [0:0] and_ln785_4_fu_2259_p2;
wire   [0:0] or_ln340_15_fu_2287_p2;
wire   [0:0] or_ln340_14_fu_2281_p2;
wire   [0:0] or_ln340_16_fu_2292_p2;
wire   [7:0] select_ln340_9_fu_2298_p3;
wire   [7:0] select_ln388_4_fu_2305_p3;
wire   [0:0] select_ln777_5_fu_2321_p3;
wire   [0:0] xor_ln785_11_fu_2330_p2;
wire   [0:0] or_ln785_5_fu_2336_p2;
wire   [0:0] xor_ln785_12_fu_2341_p2;
wire   [0:0] and_ln781_2_fu_2326_p2;
wire   [0:0] or_ln786_5_fu_2352_p2;
wire   [0:0] xor_ln786_5_fu_2357_p2;
wire   [0:0] and_ln786_10_fu_2363_p2;
wire   [0:0] and_ln785_5_fu_2346_p2;
wire   [0:0] or_ln340_18_fu_2374_p2;
wire   [0:0] or_ln340_17_fu_2368_p2;
wire   [0:0] or_ln340_19_fu_2379_p2;
wire   [7:0] select_ln340_11_fu_2385_p3;
wire   [7:0] select_ln388_5_fu_2392_p3;
wire   [0:0] select_ln777_6_fu_2408_p3;
wire   [0:0] xor_ln785_13_fu_2417_p2;
wire   [0:0] or_ln785_6_fu_2423_p2;
wire   [0:0] xor_ln785_14_fu_2428_p2;
wire   [0:0] and_ln781_3_fu_2413_p2;
wire   [0:0] or_ln786_6_fu_2439_p2;
wire   [0:0] xor_ln786_6_fu_2444_p2;
wire   [0:0] and_ln786_11_fu_2450_p2;
wire   [0:0] and_ln785_6_fu_2433_p2;
wire   [0:0] or_ln340_21_fu_2461_p2;
wire   [0:0] or_ln340_20_fu_2455_p2;
wire   [0:0] or_ln340_22_fu_2466_p2;
wire   [7:0] select_ln340_13_fu_2472_p3;
wire   [7:0] select_ln388_6_fu_2479_p3;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_data_V_data_0_V_U_apdone_blk;
wire   [7:0] data_V_data_0_V_TDATA_int;
wire    data_V_data_0_V_TVALID_int;
reg    data_V_data_0_V_TREADY_int;
wire    regslice_both_data_V_data_0_V_U_ack_in;
wire    regslice_both_data_V_data_1_V_U_apdone_blk;
wire   [7:0] data_V_data_1_V_TDATA_int;
wire    data_V_data_1_V_TVALID_int;
reg    data_V_data_1_V_TREADY_int;
wire    regslice_both_data_V_data_1_V_U_ack_in;
wire    regslice_both_data_V_data_2_V_U_apdone_blk;
wire   [7:0] data_V_data_2_V_TDATA_int;
wire    data_V_data_2_V_TVALID_int;
reg    data_V_data_2_V_TREADY_int;
wire    regslice_both_data_V_data_2_V_U_ack_in;
wire    regslice_both_data_V_data_3_V_U_apdone_blk;
wire   [7:0] data_V_data_3_V_TDATA_int;
wire    data_V_data_3_V_TVALID_int;
reg    data_V_data_3_V_TREADY_int;
wire    regslice_both_data_V_data_3_V_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 8 ))
regslice_both_data_V_data_0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data_V_data_0_V_TDATA),
    .vld_in(data_V_data_0_V_TVALID),
    .ack_in(regslice_both_data_V_data_0_V_U_ack_in),
    .data_out(data_V_data_0_V_TDATA_int),
    .vld_out(data_V_data_0_V_TVALID_int),
    .ack_out(data_V_data_0_V_TREADY_int),
    .apdone_blk(regslice_both_data_V_data_0_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_data_V_data_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data_V_data_1_V_TDATA),
    .vld_in(data_V_data_1_V_TVALID),
    .ack_in(regslice_both_data_V_data_1_V_U_ack_in),
    .data_out(data_V_data_1_V_TDATA_int),
    .vld_out(data_V_data_1_V_TVALID_int),
    .ack_out(data_V_data_1_V_TREADY_int),
    .apdone_blk(regslice_both_data_V_data_1_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_data_V_data_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data_V_data_2_V_TDATA),
    .vld_in(data_V_data_2_V_TVALID),
    .ack_in(regslice_both_data_V_data_2_V_U_ack_in),
    .data_out(data_V_data_2_V_TDATA_int),
    .vld_out(data_V_data_2_V_TVALID_int),
    .ack_out(data_V_data_2_V_TREADY_int),
    .apdone_blk(regslice_both_data_V_data_2_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_data_V_data_3_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data_V_data_3_V_TDATA),
    .vld_in(data_V_data_3_V_TVALID),
    .ack_in(regslice_both_data_V_data_3_V_U_ack_in),
    .data_out(data_V_data_3_V_TDATA_int),
    .vld_out(data_V_data_3_V_TVALID_int),
    .ack_out(data_V_data_3_V_TREADY_int),
    .apdone_blk(regslice_both_data_V_data_3_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_834_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_238 <= add_ln106_fu_840_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_238 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_834_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        acc_0_V_4_reg_2510 <= acc_0_V_4_fu_894_p2;
        add_ln1192_22_reg_2581 <= add_ln1192_22_fu_1332_p2;
        add_ln1192_26_reg_2586 <= add_ln1192_26_fu_1348_p2;
        add_ln1192_28_reg_2591 <= add_ln1192_28_fu_1354_p2;
        add_ln1192_31_reg_2596 <= add_ln1192_31_fu_1366_p2;
        add_ln415_10_reg_2541 <= add_ln415_10_fu_1201_p2;
        tmp_48_reg_2521 <= mul_ln1118_8_fu_252_p2[32'd1];
        tmp_52_reg_2536 <= mul_ln1118_10_fu_262_p2[32'd1];
        tmp_57_reg_2556 <= {{mul_ln1118_11_fu_258_p2[14:2]}};
        tmp_58_reg_2566 <= mul_ln1118_12_fu_261_p2[32'd1];
        tmp_59_reg_2576 <= mul_ln1118_13_fu_263_p2[32'd1];
        tmp_data_3_V_reg_2504 <= data_V_data_3_V_TDATA_int;
        trunc_ln708_18_reg_2516 <= {{mul_ln1118_8_fu_252_p2[14:2]}};
        trunc_ln708_19_reg_2526 <= {{mul_ln1118_9_fu_264_p2[14:2]}};
        trunc_ln708_22_reg_2531 <= {{mul_ln1118_10_fu_262_p2[13:2]}};
        trunc_ln708_24_reg_2546 <= {{add_ln1118_fu_1219_p2[13:2]}};
        trunc_ln708_25_reg_2551 <= {{sub_ln1118_11_fu_1247_p2[13:2]}};
        trunc_ln708_26_reg_2561 <= {{mul_ln1118_12_fu_261_p2[13:2]}};
        trunc_ln708_27_reg_2571 <= {{mul_ln1118_13_fu_263_p2[13:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_reg_2495 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln415_13_reg_2647 <= add_ln415_13_fu_1769_p2;
        add_ln415_14_reg_2687 <= add_ln415_14_fu_1913_p2;
        add_ln415_15_reg_2727 <= add_ln415_15_fu_2049_p2;
        add_ln415_reg_2607 <= add_ln415_fu_1625_p2;
        and_ln416_4_reg_2653 <= and_ln416_4_fu_1789_p2;
        and_ln416_5_reg_2693 <= and_ln416_5_fu_1933_p2;
        and_ln416_6_reg_2733 <= and_ln416_6_fu_2069_p2;
        and_ln416_reg_2613 <= and_ln416_fu_1645_p2;
        and_ln786_1_reg_2675 <= and_ln786_1_fu_1869_p2;
        and_ln786_2_reg_2715 <= and_ln786_2_fu_2005_p2;
        and_ln786_3_reg_2755 <= and_ln786_3_fu_2141_p2;
        and_ln786_reg_2635 <= and_ln786_fu_1725_p2;
        icmp_ln768_4_reg_2670 <= icmp_ln768_4_fu_1835_p2;
        icmp_ln768_5_reg_2710 <= icmp_ln768_5_fu_1971_p2;
        icmp_ln768_6_reg_2750 <= icmp_ln768_6_fu_2107_p2;
        icmp_ln768_reg_2630 <= icmp_ln768_fu_1691_p2;
        icmp_ln879_5_reg_2624 <= icmp_ln879_5_fu_1685_p2;
        icmp_ln879_7_reg_2664 <= icmp_ln879_7_fu_1829_p2;
        icmp_ln879_8_reg_2704 <= icmp_ln879_8_fu_1965_p2;
        icmp_ln879_9_reg_2744 <= icmp_ln879_9_fu_2101_p2;
        tmp_60_reg_2601 <= acc_0_V_3_fu_1563_p2[32'd14];
        tmp_64_reg_2619 <= add_ln415_fu_1625_p2[32'd7];
        tmp_68_reg_2641 <= acc_1_V_1_fu_1569_p2[32'd14];
        tmp_72_reg_2659 <= add_ln415_13_fu_1769_p2[32'd7];
        tmp_76_reg_2681 <= acc_2_V_1_fu_1575_p2[32'd13];
        tmp_80_reg_2699 <= add_ln415_14_fu_1913_p2[32'd7];
        tmp_83_reg_2721 <= acc_3_V_fu_1581_p2[32'd13];
        tmp_87_reg_2739 <= add_ln415_15_fu_2049_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln106_reg_2495 <= icmp_ln106_fu_834_p2;
        icmp_ln106_reg_2495_pp0_iter1_reg <= icmp_ln106_reg_2495;
    end
end

always @ (*) begin
    if ((icmp_ln106_fu_834_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_fu_834_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_TDATA_blk_n = data_V_data_0_V_TVALID_int;
    end else begin
        data_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data_V_data_0_V_TVALID == 1'b1) & (regslice_both_data_V_data_0_V_U_ack_in == 1'b1))) begin
        data_V_data_0_V_TREADY = 1'b1;
    end else begin
        data_V_data_0_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_fu_834_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_TREADY_int = 1'b1;
    end else begin
        data_V_data_0_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_fu_834_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_TDATA_blk_n = data_V_data_1_V_TVALID_int;
    end else begin
        data_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data_V_data_1_V_TVALID == 1'b1) & (regslice_both_data_V_data_1_V_U_ack_in == 1'b1))) begin
        data_V_data_1_V_TREADY = 1'b1;
    end else begin
        data_V_data_1_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_fu_834_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_TREADY_int = 1'b1;
    end else begin
        data_V_data_1_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_fu_834_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_TDATA_blk_n = data_V_data_2_V_TVALID_int;
    end else begin
        data_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data_V_data_2_V_TVALID == 1'b1) & (regslice_both_data_V_data_2_V_U_ack_in == 1'b1))) begin
        data_V_data_2_V_TREADY = 1'b1;
    end else begin
        data_V_data_2_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_fu_834_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_TREADY_int = 1'b1;
    end else begin
        data_V_data_2_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_fu_834_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_TDATA_blk_n = data_V_data_3_V_TVALID_int;
    end else begin
        data_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data_V_data_3_V_TVALID == 1'b1) & (regslice_both_data_V_data_3_V_U_ack_in == 1'b1))) begin
        data_V_data_3_V_TREADY = 1'b1;
    end else begin
        data_V_data_3_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_fu_834_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_TREADY_int = 1'b1;
    end else begin
        data_V_data_3_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2495_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2495_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2495_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2495_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2495_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2495_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2495_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2495_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln106_fu_834_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln106_fu_834_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_V_3_fu_1563_p2 = ($signed(acc_0_V_fu_1511_p2) + $signed(sext_ln1118_39_fu_1447_p1));

assign acc_0_V_4_fu_894_p2 = ($signed(sext_ln415_fu_878_p1) + $signed(zext_ln415_fu_890_p1));

assign acc_0_V_fu_1511_p2 = ($signed(sext_ln415_20_fu_1396_p1) + $signed(sext_ln1192_fu_1498_p1));

assign acc_1_V_1_fu_1569_p2 = ($signed(sext_ln703_1_fu_1523_p1) + $signed(sext_ln1118_40_fu_1451_p1));

assign acc_1_V_fu_1505_p2 = ($signed(sext_ln1192_5_fu_1502_p1) + $signed(sext_ln415_16_fu_1381_p1));

assign acc_2_V_1_fu_1575_p2 = ($signed(sext_ln1118_37_fu_1466_p1) + $signed(add_ln1192_27_fu_1539_p2));

assign acc_3_V_fu_1581_p2 = ($signed(sext_ln703_fu_1482_p1) + $signed(add_ln1192_32_fu_1557_p2));

assign add_ln106_fu_840_p2 = (indvar_flatten_reg_238 + 11'd1);

assign add_ln1118_fu_1219_p2 = ($signed(sext_ln1118_32_fu_1215_p1) + $signed(sext_ln1118_30_fu_1161_p1));

assign add_ln1192_20_fu_1486_p2 = ($signed(sext_ln415_15_fu_1375_p1) + $signed(zext_ln1118_7_fu_1378_p1));

assign add_ln1192_21_fu_1492_p2 = ($signed(add_ln1192_20_fu_1486_p2) + $signed(sext_ln415_13_fu_1372_p1));

assign add_ln1192_22_fu_1332_p2 = ($signed(sext_ln1118_23_fu_946_p1) + $signed(zext_ln1118_8_fu_1026_p1));

assign add_ln1192_24_fu_1527_p2 = ($signed(acc_0_V_4_reg_2510) + $signed(sext_ln415_23_fu_1403_p1));

assign add_ln1192_25_fu_1338_p2 = (zext_ln1118_11_fu_1243_p1 + zext_ln1118_9_fu_1070_p1);

assign add_ln1192_26_fu_1348_p2 = ($signed(zext_ln1192_fu_1344_p1) + $signed(sext_ln415_17_fu_1058_p1));

assign add_ln1192_27_fu_1539_p2 = ($signed(sext_ln1192_7_fu_1536_p1) + $signed(sext_ln1192_6_fu_1532_p1));

assign add_ln1192_28_fu_1354_p2 = ($signed(sext_ln415_14_fu_960_p1) + $signed(sext_ln415_18_fu_1102_p1));

assign add_ln1192_29_fu_1548_p2 = ($signed(sext_ln1192_8_fu_1545_p1) + $signed(sext_ln415_24_fu_1406_p1));

assign add_ln1192_30_fu_1360_p2 = (zext_ln1118_fu_972_p1 + zext_ln1118_10_fu_1114_p1);

assign add_ln1192_31_fu_1366_p2 = (add_ln1192_30_fu_1360_p2 + zext_ln1118_12_fu_1271_p1);

assign add_ln1192_32_fu_1557_p2 = (zext_ln1192_3_fu_1554_p1 + add_ln1192_29_fu_1548_p2);

assign add_ln1192_fu_1517_p2 = ($signed(sext_ln415_22_fu_1400_p1) + $signed(acc_1_V_fu_1505_p2));

assign add_ln415_10_fu_1201_p2 = ($signed(sext_ln415_21_fu_1185_p1) + $signed(zext_ln415_9_fu_1197_p1));

assign add_ln415_11_fu_1460_p2 = ($signed(sext_ln415_25_fu_1454_p1) + $signed(zext_ln415_10_fu_1457_p1));

assign add_ln415_12_fu_1476_p2 = ($signed(sext_ln415_26_fu_1470_p1) + $signed(zext_ln415_11_fu_1473_p1));

assign add_ln415_13_fu_1769_p2 = (trunc_ln708_29_fu_1739_p4 + zext_ln415_13_fu_1765_p1);

assign add_ln415_14_fu_1913_p2 = (trunc_ln708_30_fu_1883_p4 + zext_ln415_14_fu_1909_p1);

assign add_ln415_15_fu_2049_p2 = (trunc_ln708_31_fu_2019_p4 + zext_ln415_15_fu_2045_p1);

assign add_ln415_9_fu_1390_p2 = ($signed(sext_ln415_19_fu_1384_p1) + $signed(zext_ln415_8_fu_1387_p1));

assign add_ln415_fu_1625_p2 = (trunc_ln708_28_fu_1595_p4 + zext_ln415_12_fu_1621_p1);

assign and_ln416_4_fu_1789_p2 = (xor_ln416_4_fu_1783_p2 & tmp_69_fu_1749_p3);

assign and_ln416_5_fu_1933_p2 = (xor_ln416_5_fu_1927_p2 & tmp_77_fu_1893_p3);

assign and_ln416_6_fu_2069_p2 = (xor_ln416_6_fu_2063_p2 & tmp_84_fu_2029_p3);

assign and_ln416_fu_1645_p2 = (xor_ln416_fu_1639_p2 & tmp_61_fu_1605_p3);

assign and_ln779_1_fu_1855_p2 = (xor_ln779_4_fu_1849_p2 & icmp_ln879_6_fu_1813_p2);

assign and_ln779_2_fu_1991_p2 = (xor_ln779_5_fu_1985_p2 & tmp_81_fu_1947_p3);

assign and_ln779_3_fu_2127_p2 = (xor_ln779_6_fu_2121_p2 & tmp_88_fu_2083_p3);

assign and_ln779_fu_1711_p2 = (xor_ln779_fu_1705_p2 & icmp_ln879_fu_1669_p2);

assign and_ln781_1_fu_2239_p2 = (icmp_ln879_7_reg_2664 & and_ln416_4_reg_2653);

assign and_ln781_2_fu_2326_p2 = (icmp_ln879_8_reg_2704 & and_ln416_5_reg_2693);

assign and_ln781_3_fu_2413_p2 = (icmp_ln879_9_reg_2744 & and_ln416_6_reg_2733);

assign and_ln781_fu_2152_p2 = (icmp_ln879_5_reg_2624 & and_ln416_reg_2613);

assign and_ln785_4_fu_2259_p2 = (xor_ln785_10_fu_2254_p2 & or_ln785_4_fu_2249_p2);

assign and_ln785_5_fu_2346_p2 = (xor_ln785_12_fu_2341_p2 & or_ln785_5_fu_2336_p2);

assign and_ln785_6_fu_2433_p2 = (xor_ln785_14_fu_2428_p2 & or_ln785_6_fu_2423_p2);

assign and_ln785_fu_2172_p2 = (xor_ln785_8_fu_2167_p2 & or_ln785_fu_2162_p2);

assign and_ln786_10_fu_2363_p2 = (xor_ln786_5_fu_2357_p2 & tmp_76_reg_2681);

assign and_ln786_11_fu_2450_p2 = (xor_ln786_6_fu_2444_p2 & tmp_83_reg_2721);

assign and_ln786_1_fu_1869_p2 = (tmp_72_fu_1795_p3 & select_ln416_4_fu_1861_p3);

assign and_ln786_2_fu_2005_p2 = (tmp_80_fu_1939_p3 & select_ln416_5_fu_1997_p3);

assign and_ln786_3_fu_2141_p2 = (tmp_87_fu_2075_p3 & select_ln416_6_fu_2133_p3);

assign and_ln786_8_fu_2189_p2 = (xor_ln786_fu_2183_p2 & tmp_60_reg_2601);

assign and_ln786_9_fu_2276_p2 = (xor_ln786_4_fu_2270_p2 & tmp_68_reg_2641);

assign and_ln786_fu_1725_p2 = (tmp_64_fu_1651_p3 & select_ln416_fu_1717_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln106_reg_2495_pp0_iter1_reg == 1'd0) & (io_acc_block_signal_op303 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln106_fu_834_p2 == 1'd0) & (io_acc_block_signal_op19 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln106_reg_2495_pp0_iter1_reg == 1'd0) & (io_acc_block_signal_op303 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln106_fu_834_p2 == 1'd0) & (io_acc_block_signal_op19 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln106_reg_2495_pp0_iter1_reg == 1'd0) & (io_acc_block_signal_op303 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln106_fu_834_p2 == 1'd0) & (io_acc_block_signal_op19 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln106_fu_834_p2 == 1'd0) & (io_acc_block_signal_op19 == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln106_reg_2495_pp0_iter1_reg == 1'd0) & (io_acc_block_signal_op303 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln106_fu_834_p2 = ((indvar_flatten_reg_238 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln768_4_fu_1835_p2 = ((tmp_74_fu_1819_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_5_fu_1971_p2 = ((tmp_8_fu_1955_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_6_fu_2107_p2 = ((tmp_1_fu_2091_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_1691_p2 = ((tmp_66_fu_1675_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_1685_p2 = ((tmp_66_fu_1675_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_1813_p2 = ((tmp_73_fu_1803_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_7_fu_1829_p2 = ((tmp_74_fu_1819_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_8_fu_1965_p2 = ((tmp_8_fu_1955_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_9_fu_2101_p2 = ((tmp_1_fu_2091_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1669_p2 = ((tmp_65_fu_1659_p4 == 2'd3) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op19 = (data_V_data_3_V_TVALID_int & data_V_data_2_V_TVALID_int & data_V_data_1_V_TVALID_int & data_V_data_0_V_TVALID_int);

assign io_acc_block_signal_op303 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign mul_ln1118_10_fu_262_p1 = sext_ln1118_28_fu_1118_p0;

assign mul_ln1118_10_fu_262_p2 = ($signed({{1'b0}, {14'd25}}) * $signed(mul_ln1118_10_fu_262_p1));

assign mul_ln1118_11_fu_258_p1 = sext_ln1118_33_fu_1275_p0;

assign mul_ln1118_11_fu_258_p2 = ($signed(15'd32716) * $signed(mul_ln1118_11_fu_258_p1));

assign mul_ln1118_12_fu_261_p1 = sext_ln1118_34_fu_1280_p1;

assign mul_ln1118_12_fu_261_p2 = ($signed({{1'b0}, {14'd23}}) * $signed(mul_ln1118_12_fu_261_p1));

assign mul_ln1118_13_fu_263_p1 = sext_ln1118_34_fu_1280_p1;

assign mul_ln1118_13_fu_263_p2 = ($signed({{1'b0}, {14'd29}}) * $signed(mul_ln1118_13_fu_263_p1));

assign mul_ln1118_7_fu_255_p1 = sext_ln1118_fu_862_p1;

assign mul_ln1118_7_fu_255_p2 = ($signed({{1'b0}, {14'd25}}) * $signed(mul_ln1118_7_fu_255_p1));

assign mul_ln1118_8_fu_252_p1 = sext_ln1118_25_fu_980_p1;

assign mul_ln1118_8_fu_252_p2 = ($signed(15'd32713) * $signed(mul_ln1118_8_fu_252_p1));

assign mul_ln1118_9_fu_264_p1 = sext_ln1118_25_fu_980_p1;

assign mul_ln1118_9_fu_264_p2 = ($signed(15'd32733) * $signed(mul_ln1118_9_fu_264_p1));

assign mul_ln1118_fu_256_p1 = sext_ln1118_fu_862_p1;

assign mul_ln1118_fu_256_p2 = ($signed({{1'b0}, {14'd29}}) * $signed(mul_ln1118_fu_256_p1));

assign or_ln340_12_fu_2200_p2 = (xor_ln785_8_fu_2167_p2 | and_ln786_reg_2635);

assign or_ln340_13_fu_2205_p2 = (or_ln340_12_fu_2200_p2 | and_ln781_fu_2152_p2);

assign or_ln340_14_fu_2281_p2 = (and_ln786_9_fu_2276_p2 | and_ln785_4_fu_2259_p2);

assign or_ln340_15_fu_2287_p2 = (xor_ln785_10_fu_2254_p2 | and_ln786_1_reg_2675);

assign or_ln340_16_fu_2292_p2 = (or_ln340_15_fu_2287_p2 | and_ln781_1_fu_2239_p2);

assign or_ln340_17_fu_2368_p2 = (and_ln786_10_fu_2363_p2 | and_ln785_5_fu_2346_p2);

assign or_ln340_18_fu_2374_p2 = (xor_ln785_12_fu_2341_p2 | and_ln786_2_reg_2715);

assign or_ln340_19_fu_2379_p2 = (or_ln340_18_fu_2374_p2 | and_ln781_2_fu_2326_p2);

assign or_ln340_20_fu_2455_p2 = (and_ln786_11_fu_2450_p2 | and_ln785_6_fu_2433_p2);

assign or_ln340_21_fu_2461_p2 = (xor_ln785_14_fu_2428_p2 | and_ln786_3_reg_2755);

assign or_ln340_22_fu_2466_p2 = (or_ln340_21_fu_2461_p2 | and_ln781_3_fu_2413_p2);

assign or_ln340_fu_2194_p2 = (and_ln786_8_fu_2189_p2 | and_ln785_fu_2172_p2);

assign or_ln785_4_fu_2249_p2 = (xor_ln785_9_fu_2243_p2 | tmp_72_reg_2659);

assign or_ln785_5_fu_2336_p2 = (xor_ln785_11_fu_2330_p2 | tmp_80_reg_2699);

assign or_ln785_6_fu_2423_p2 = (xor_ln785_13_fu_2417_p2 | tmp_87_reg_2739);

assign or_ln785_fu_2162_p2 = (xor_ln785_fu_2156_p2 | tmp_64_reg_2619);

assign or_ln786_4_fu_2265_p2 = (and_ln786_1_reg_2675 | and_ln781_1_fu_2239_p2);

assign or_ln786_5_fu_2352_p2 = (and_ln786_2_reg_2715 | and_ln781_2_fu_2326_p2);

assign or_ln786_6_fu_2439_p2 = (and_ln786_3_reg_2755 | and_ln781_3_fu_2413_p2);

assign or_ln786_fu_2178_p2 = (and_ln786_reg_2635 | and_ln781_fu_2152_p2);

assign res_V_data_0_V_din = ((or_ln340_13_fu_2205_p2[0:0] === 1'b1) ? select_ln340_fu_2211_p3 : select_ln388_fu_2218_p3);

assign res_V_data_1_V_din = ((or_ln340_16_fu_2292_p2[0:0] === 1'b1) ? select_ln340_9_fu_2298_p3 : select_ln388_4_fu_2305_p3);

assign res_V_data_2_V_din = ((or_ln340_19_fu_2379_p2[0:0] === 1'b1) ? select_ln340_11_fu_2385_p3 : select_ln388_5_fu_2392_p3);

assign res_V_data_3_V_din = ((or_ln340_22_fu_2466_p2[0:0] === 1'b1) ? select_ln340_13_fu_2472_p3 : select_ln388_6_fu_2479_p3);

assign select_ln340_11_fu_2385_p3 = ((or_ln340_17_fu_2368_p2[0:0] === 1'b1) ? 8'd127 : add_ln415_14_reg_2687);

assign select_ln340_13_fu_2472_p3 = ((or_ln340_20_fu_2455_p2[0:0] === 1'b1) ? 8'd127 : add_ln415_15_reg_2727);

assign select_ln340_9_fu_2298_p3 = ((or_ln340_14_fu_2281_p2[0:0] === 1'b1) ? 8'd127 : add_ln415_13_reg_2647);

assign select_ln340_fu_2211_p3 = ((or_ln340_fu_2194_p2[0:0] === 1'b1) ? 8'd127 : add_ln415_reg_2607);

assign select_ln388_4_fu_2305_p3 = ((and_ln786_9_fu_2276_p2[0:0] === 1'b1) ? 8'd128 : add_ln415_13_reg_2647);

assign select_ln388_5_fu_2392_p3 = ((and_ln786_10_fu_2363_p2[0:0] === 1'b1) ? 8'd128 : add_ln415_14_reg_2687);

assign select_ln388_6_fu_2479_p3 = ((and_ln786_11_fu_2450_p2[0:0] === 1'b1) ? 8'd128 : add_ln415_15_reg_2727);

assign select_ln388_fu_2218_p3 = ((and_ln786_8_fu_2189_p2[0:0] === 1'b1) ? 8'd128 : add_ln415_reg_2607);

assign select_ln416_4_fu_1861_p3 = ((and_ln416_4_fu_1789_p2[0:0] === 1'b1) ? and_ln779_1_fu_1855_p2 : icmp_ln879_7_fu_1829_p2);

assign select_ln416_5_fu_1997_p3 = ((and_ln416_5_fu_1933_p2[0:0] === 1'b1) ? and_ln779_2_fu_1991_p2 : icmp_ln879_8_fu_1965_p2);

assign select_ln416_6_fu_2133_p3 = ((and_ln416_6_fu_2069_p2[0:0] === 1'b1) ? and_ln779_3_fu_2127_p2 : icmp_ln879_9_fu_2101_p2);

assign select_ln416_fu_1717_p3 = ((and_ln416_fu_1645_p2[0:0] === 1'b1) ? and_ln779_fu_1711_p2 : icmp_ln879_5_fu_1685_p2);

assign select_ln777_4_fu_2234_p3 = ((and_ln416_4_reg_2653[0:0] === 1'b1) ? icmp_ln879_7_reg_2664 : icmp_ln768_4_reg_2670);

assign select_ln777_5_fu_2321_p3 = ((and_ln416_5_reg_2693[0:0] === 1'b1) ? icmp_ln879_8_reg_2704 : icmp_ln768_5_reg_2710);

assign select_ln777_6_fu_2408_p3 = ((and_ln416_6_reg_2733[0:0] === 1'b1) ? icmp_ln879_9_reg_2744 : icmp_ln768_6_reg_2750);

assign select_ln777_fu_2147_p3 = ((and_ln416_reg_2613[0:0] === 1'b1) ? icmp_ln879_5_reg_2624 : icmp_ln768_reg_2630);

assign sext_ln1118_21_fu_908_p1 = $signed(shl_ln_fu_900_p3);

assign sext_ln1118_22_fu_926_p1 = $signed(shl_ln1118_9_fu_918_p3);

assign sext_ln1118_23_fu_946_p1 = $signed(trunc_ln708_s_fu_936_p4);

assign sext_ln1118_24_fu_976_p0 = data_V_data_1_V_TDATA_int;

assign sext_ln1118_24_fu_976_p1 = sext_ln1118_24_fu_976_p0;

assign sext_ln1118_25_fu_980_p0 = data_V_data_1_V_TDATA_int;

assign sext_ln1118_25_fu_980_p1 = sext_ln1118_25_fu_980_p0;

assign sext_ln1118_26_fu_986_p0 = data_V_data_1_V_TDATA_int;

assign sext_ln1118_26_fu_986_p1 = sext_ln1118_26_fu_986_p0;

assign sext_ln1118_27_fu_1082_p1 = $signed(shl_ln1118_s_fu_1074_p3);

assign sext_ln1118_28_fu_1118_p0 = data_V_data_2_V_TDATA_int;

assign sext_ln1118_29_fu_1149_p1 = $signed(shl_ln1118_1_fu_1141_p3);

assign sext_ln1118_30_fu_1161_p1 = shl_ln1118_2_fu_1153_p3;

assign sext_ln1118_31_fu_1165_p1 = shl_ln1118_2_fu_1153_p3;

assign sext_ln1118_32_fu_1215_p1 = $signed(shl_ln1118_3_fu_1207_p3);

assign sext_ln1118_33_fu_1275_p0 = data_V_data_3_V_TDATA_int;

assign sext_ln1118_34_fu_1280_p0 = data_V_data_3_V_TDATA_int;

assign sext_ln1118_34_fu_1280_p1 = sext_ln1118_34_fu_1280_p0;

assign sext_ln1118_35_fu_1416_p1 = $signed(shl_ln1118_4_fu_1409_p3);

assign sext_ln1118_36_fu_1427_p1 = $signed(shl_ln1118_5_fu_1420_p3);

assign sext_ln1118_37_fu_1466_p1 = $signed(add_ln415_11_fu_1460_p2);

assign sext_ln1118_38_fu_1038_p1 = $signed(tmp_fu_1030_p3);

assign sext_ln1118_39_fu_1447_p1 = $signed(tmp_56_fu_1437_p4);

assign sext_ln1118_40_fu_1451_p1 = $signed(tmp_57_reg_2556);

assign sext_ln1118_fu_862_p0 = data_V_data_0_V_TDATA_int;

assign sext_ln1118_fu_862_p1 = sext_ln1118_fu_862_p0;

assign sext_ln1192_5_fu_1502_p1 = $signed(add_ln1192_22_reg_2581);

assign sext_ln1192_6_fu_1532_p1 = $signed(add_ln1192_24_fu_1527_p2);

assign sext_ln1192_7_fu_1536_p1 = $signed(add_ln1192_26_reg_2586);

assign sext_ln1192_8_fu_1545_p1 = $signed(add_ln1192_28_reg_2591);

assign sext_ln1192_fu_1498_p1 = $signed(add_ln1192_21_fu_1492_p2);

assign sext_ln415_13_fu_1372_p1 = acc_0_V_4_reg_2510;

assign sext_ln415_14_fu_960_p1 = $signed(trunc_ln708_17_fu_950_p4);

assign sext_ln415_15_fu_1375_p1 = $signed(trunc_ln708_18_reg_2516);

assign sext_ln415_16_fu_1381_p1 = $signed(trunc_ln708_19_reg_2526);

assign sext_ln415_17_fu_1058_p1 = $signed(trunc_ln708_20_fu_1048_p4);

assign sext_ln415_18_fu_1102_p1 = $signed(trunc_ln708_21_fu_1092_p4);

assign sext_ln415_19_fu_1384_p1 = $signed(trunc_ln708_22_reg_2531);

assign sext_ln415_20_fu_1396_p1 = $signed(add_ln415_9_fu_1390_p2);

assign sext_ln415_21_fu_1185_p1 = $signed(trunc_ln708_23_fu_1175_p4);

assign sext_ln415_22_fu_1400_p1 = $signed(add_ln415_10_reg_2541);

assign sext_ln415_23_fu_1403_p1 = $signed(trunc_ln708_24_reg_2546);

assign sext_ln415_24_fu_1406_p1 = $signed(trunc_ln708_25_reg_2551);

assign sext_ln415_25_fu_1454_p1 = $signed(trunc_ln708_26_reg_2561);

assign sext_ln415_26_fu_1470_p1 = $signed(trunc_ln708_27_reg_2571);

assign sext_ln415_fu_878_p1 = $signed(trunc_ln_fu_868_p4);

assign sext_ln703_1_fu_1523_p1 = $signed(add_ln1192_fu_1517_p2);

assign sext_ln703_fu_1482_p1 = $signed(add_ln415_12_fu_1476_p2);

assign shl_ln1118_1_fu_1141_p1 = data_V_data_2_V_TDATA_int;

assign shl_ln1118_1_fu_1141_p3 = {{shl_ln1118_1_fu_1141_p1}, {3'd0}};

assign shl_ln1118_2_fu_1153_p1 = data_V_data_2_V_TDATA_int;

assign shl_ln1118_2_fu_1153_p3 = {{shl_ln1118_2_fu_1153_p1}, {1'd0}};

assign shl_ln1118_3_fu_1207_p1 = data_V_data_2_V_TDATA_int;

assign shl_ln1118_3_fu_1207_p3 = {{shl_ln1118_3_fu_1207_p1}, {5'd0}};

assign shl_ln1118_4_fu_1409_p3 = {{tmp_data_3_V_reg_2504}, {6'd0}};

assign shl_ln1118_5_fu_1420_p3 = {{tmp_data_3_V_reg_2504}, {3'd0}};

assign shl_ln1118_9_fu_918_p1 = data_V_data_0_V_TDATA_int;

assign shl_ln1118_9_fu_918_p3 = {{shl_ln1118_9_fu_918_p1}, {3'd0}};

assign shl_ln1118_s_fu_1074_p1 = data_V_data_1_V_TDATA_int;

assign shl_ln1118_s_fu_1074_p3 = {{shl_ln1118_s_fu_1074_p1}, {4'd0}};

assign shl_ln_fu_900_p1 = data_V_data_0_V_TDATA_int;

assign shl_ln_fu_900_p3 = {{shl_ln_fu_900_p1}, {5'd0}};

assign start_out = real_start;

assign sub_ln1118_10_fu_1169_p2 = ($signed(sext_ln1118_29_fu_1149_p1) - $signed(sext_ln1118_31_fu_1165_p1));

assign sub_ln1118_11_fu_1247_p2 = ($signed(sext_ln1118_32_fu_1215_p1) - $signed(sext_ln1118_30_fu_1161_p1));

assign sub_ln1118_12_fu_1431_p2 = ($signed(sext_ln1118_35_fu_1416_p1) - $signed(sext_ln1118_36_fu_1427_p1));

assign sub_ln1118_13_fu_1042_p2 = ($signed(sext_ln1118_24_fu_976_p1) - $signed(sext_ln1118_38_fu_1038_p1));

assign sub_ln1118_8_fu_930_p2 = ($signed(sub_ln1118_fu_912_p2) - $signed(sext_ln1118_22_fu_926_p1));

assign sub_ln1118_9_fu_1086_p2 = ($signed(sext_ln1118_27_fu_1082_p1) - $signed(sext_ln1118_26_fu_986_p1));

assign sub_ln1118_fu_912_p2 = ($signed(14'd0) - $signed(sext_ln1118_21_fu_908_p1));

assign tmp_1_fu_2091_p4 = {{acc_3_V_fu_1581_p2[13:12]}};

assign tmp_46_fu_882_p3 = mul_ln1118_fu_256_p2[32'd1];

assign tmp_47_fu_964_p3 = mul_ln1118_7_fu_255_p2[32'd1];

assign tmp_49_fu_1018_p3 = mul_ln1118_9_fu_264_p2[32'd1];

assign tmp_50_fu_1062_p3 = sub_ln1118_13_fu_1042_p2[32'd1];

assign tmp_51_fu_1106_p3 = sub_ln1118_9_fu_1086_p2[32'd1];

assign tmp_53_fu_1189_p3 = sub_ln1118_10_fu_1169_p2[32'd1];

assign tmp_54_fu_1235_p3 = add_ln1118_fu_1219_p2[32'd1];

assign tmp_55_fu_1263_p3 = sub_ln1118_11_fu_1247_p2[32'd1];

assign tmp_56_fu_1437_p4 = {{sub_ln1118_12_fu_1431_p2[14:2]}};

assign tmp_61_fu_1605_p3 = acc_0_V_3_fu_1563_p2[32'd11];

assign tmp_62_fu_1613_p3 = acc_0_V_3_fu_1563_p2[32'd3];

assign tmp_63_fu_1631_p3 = add_ln415_fu_1625_p2[32'd7];

assign tmp_64_fu_1651_p3 = add_ln415_fu_1625_p2[32'd7];

assign tmp_65_fu_1659_p4 = {{acc_0_V_3_fu_1563_p2[14:13]}};

assign tmp_66_fu_1675_p4 = {{acc_0_V_3_fu_1563_p2[14:12]}};

assign tmp_67_fu_1697_p3 = acc_0_V_3_fu_1563_p2[32'd12];

assign tmp_69_fu_1749_p3 = acc_1_V_1_fu_1569_p2[32'd11];

assign tmp_70_fu_1757_p3 = acc_1_V_1_fu_1569_p2[32'd3];

assign tmp_71_fu_1775_p3 = add_ln415_13_fu_1769_p2[32'd7];

assign tmp_72_fu_1795_p3 = add_ln415_13_fu_1769_p2[32'd7];

assign tmp_73_fu_1803_p4 = {{acc_1_V_1_fu_1569_p2[14:13]}};

assign tmp_74_fu_1819_p4 = {{acc_1_V_1_fu_1569_p2[14:12]}};

assign tmp_75_fu_1841_p3 = acc_1_V_1_fu_1569_p2[32'd12];

assign tmp_77_fu_1893_p3 = acc_2_V_1_fu_1575_p2[32'd11];

assign tmp_78_fu_1901_p3 = acc_2_V_1_fu_1575_p2[32'd3];

assign tmp_79_fu_1919_p3 = add_ln415_14_fu_1913_p2[32'd7];

assign tmp_80_fu_1939_p3 = add_ln415_14_fu_1913_p2[32'd7];

assign tmp_81_fu_1947_p3 = acc_2_V_1_fu_1575_p2[32'd13];

assign tmp_82_fu_1977_p3 = acc_2_V_1_fu_1575_p2[32'd12];

assign tmp_84_fu_2029_p3 = acc_3_V_fu_1581_p2[32'd11];

assign tmp_85_fu_2037_p3 = acc_3_V_fu_1581_p2[32'd3];

assign tmp_86_fu_2055_p3 = add_ln415_15_fu_2049_p2[32'd7];

assign tmp_87_fu_2075_p3 = add_ln415_15_fu_2049_p2[32'd7];

assign tmp_88_fu_2083_p3 = acc_3_V_fu_1581_p2[32'd13];

assign tmp_89_fu_2113_p3 = acc_3_V_fu_1581_p2[32'd12];

assign tmp_8_fu_1955_p4 = {{acc_2_V_1_fu_1575_p2[13:12]}};

assign tmp_fu_1030_p1 = data_V_data_1_V_TDATA_int;

assign tmp_fu_1030_p3 = {{tmp_fu_1030_p1}, {2'd0}};

assign trunc_ln708_17_fu_950_p4 = {{mul_ln1118_7_fu_255_p2[13:2]}};

assign trunc_ln708_20_fu_1048_p4 = {{sub_ln1118_13_fu_1042_p2[10:2]}};

assign trunc_ln708_21_fu_1092_p4 = {{sub_ln1118_9_fu_1086_p2[12:2]}};

assign trunc_ln708_23_fu_1175_p4 = {{sub_ln1118_10_fu_1169_p2[11:2]}};

assign trunc_ln708_28_fu_1595_p4 = {{acc_0_V_3_fu_1563_p2[11:4]}};

assign trunc_ln708_29_fu_1739_p4 = {{acc_1_V_1_fu_1569_p2[11:4]}};

assign trunc_ln708_30_fu_1883_p4 = {{acc_2_V_1_fu_1575_p2[11:4]}};

assign trunc_ln708_31_fu_2019_p4 = {{acc_3_V_fu_1581_p2[11:4]}};

assign trunc_ln708_s_fu_936_p4 = {{sub_ln1118_8_fu_930_p2[13:2]}};

assign trunc_ln_fu_868_p4 = {{mul_ln1118_fu_256_p2[13:2]}};

assign xor_ln416_4_fu_1783_p2 = (tmp_71_fu_1775_p3 ^ 1'd1);

assign xor_ln416_5_fu_1927_p2 = (tmp_79_fu_1919_p3 ^ 1'd1);

assign xor_ln416_6_fu_2063_p2 = (tmp_86_fu_2055_p3 ^ 1'd1);

assign xor_ln416_fu_1639_p2 = (tmp_63_fu_1631_p3 ^ 1'd1);

assign xor_ln779_4_fu_1849_p2 = (tmp_75_fu_1841_p3 ^ 1'd1);

assign xor_ln779_5_fu_1985_p2 = (tmp_82_fu_1977_p3 ^ 1'd1);

assign xor_ln779_6_fu_2121_p2 = (tmp_89_fu_2113_p3 ^ 1'd1);

assign xor_ln779_fu_1705_p2 = (tmp_67_fu_1697_p3 ^ 1'd1);

assign xor_ln785_10_fu_2254_p2 = (tmp_68_reg_2641 ^ 1'd1);

assign xor_ln785_11_fu_2330_p2 = (select_ln777_5_fu_2321_p3 ^ 1'd1);

assign xor_ln785_12_fu_2341_p2 = (tmp_76_reg_2681 ^ 1'd1);

assign xor_ln785_13_fu_2417_p2 = (select_ln777_6_fu_2408_p3 ^ 1'd1);

assign xor_ln785_14_fu_2428_p2 = (tmp_83_reg_2721 ^ 1'd1);

assign xor_ln785_8_fu_2167_p2 = (tmp_60_reg_2601 ^ 1'd1);

assign xor_ln785_9_fu_2243_p2 = (select_ln777_4_fu_2234_p3 ^ 1'd1);

assign xor_ln785_fu_2156_p2 = (select_ln777_fu_2147_p3 ^ 1'd1);

assign xor_ln786_4_fu_2270_p2 = (or_ln786_4_fu_2265_p2 ^ 1'd1);

assign xor_ln786_5_fu_2357_p2 = (or_ln786_5_fu_2352_p2 ^ 1'd1);

assign xor_ln786_6_fu_2444_p2 = (or_ln786_6_fu_2439_p2 ^ 1'd1);

assign xor_ln786_fu_2183_p2 = (or_ln786_fu_2178_p2 ^ 1'd1);

assign zext_ln1118_10_fu_1114_p1 = tmp_51_fu_1106_p3;

assign zext_ln1118_11_fu_1243_p1 = tmp_54_fu_1235_p3;

assign zext_ln1118_12_fu_1271_p1 = tmp_55_fu_1263_p3;

assign zext_ln1118_7_fu_1378_p1 = tmp_48_reg_2521;

assign zext_ln1118_8_fu_1026_p1 = tmp_49_fu_1018_p3;

assign zext_ln1118_9_fu_1070_p1 = tmp_50_fu_1062_p3;

assign zext_ln1118_fu_972_p1 = tmp_47_fu_964_p3;

assign zext_ln1192_3_fu_1554_p1 = add_ln1192_31_reg_2596;

assign zext_ln1192_fu_1344_p1 = add_ln1192_25_fu_1338_p2;

assign zext_ln415_10_fu_1457_p1 = tmp_58_reg_2566;

assign zext_ln415_11_fu_1473_p1 = tmp_59_reg_2576;

assign zext_ln415_12_fu_1621_p1 = tmp_62_fu_1613_p3;

assign zext_ln415_13_fu_1765_p1 = tmp_70_fu_1757_p3;

assign zext_ln415_14_fu_1909_p1 = tmp_78_fu_1901_p3;

assign zext_ln415_15_fu_2045_p1 = tmp_85_fu_2037_p3;

assign zext_ln415_8_fu_1387_p1 = tmp_52_reg_2536;

assign zext_ln415_9_fu_1197_p1 = tmp_53_fu_1189_p3;

assign zext_ln415_fu_890_p1 = tmp_46_fu_882_p3;

endmodule //pointwise_conv_2d_cl_array_array_ap_fixed_8_2_0_0_0_4u_config50_s
