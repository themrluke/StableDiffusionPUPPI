-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv_2d_cl_array_array_ap_fixed_8_2_0_0_0_1u_config49_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_V_data_V_full_n : IN STD_LOGIC;
    res_V_data_V_write : OUT STD_LOGIC );
end;


architecture behav of pointwise_conv_2d_cl_array_array_ap_fixed_8_2_0_0_0_1u_config49_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv15_23 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100011";
    constant ap_const_lv14_16 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010110";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv11_100 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln106_reg_746 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln106_reg_746_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_203 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln106_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op18 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln106_reg_746_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_746_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln106_fu_271_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_data_0_V_reg_755 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_1_V_reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_2_V_reg_767 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_3_V_reg_772 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln415_fu_457_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln415_reg_777 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1192_37_fu_473_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1192_37_reg_782 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1192_40_fu_495_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1192_40_reg_787 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_2_fu_556_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_reg_792 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln781_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_reg_798 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_8_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_8_reg_803 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln1118_fu_214_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_17_fu_217_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_296_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_36_fu_303_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1118_fu_307_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_fu_293_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1118_10_fu_313_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln_fu_319_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_99_fu_333_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln1118_s_fu_348_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_38_fu_355_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1118_11_fu_359_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_37_fu_345_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1118_12_fu_365_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln708_s_fu_371_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_100_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_fu_214_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln708_37_fu_401_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_101_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_17_fu_217_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln708_38_fu_431_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_102_fu_445_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_453_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln415_37_fu_441_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln415_fu_329_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1192_fu_463_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln415_36_fu_411_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1192_fu_469_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1118_9_fu_423_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln415_35_fu_381_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1118_8_fu_393_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1118_fu_341_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1192_39_fu_485_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1192_38_fu_479_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1192_fu_491_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1192_11_fu_504_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1192_41_fu_507_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln48_fu_501_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_0_V_fu_512_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_105_fu_544_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_23_fu_552_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_526_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_106_fu_562_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_536_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_598_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal carry_2_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_fu_628_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_590_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_620_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_582_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_7_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_518_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_4_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_648_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_25_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_725_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln388_fu_731_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_fu_265_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_203 <= add_ln106_fu_271_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_203 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_reg_746_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln1192_37_reg_782 <= add_ln1192_37_fu_473_p2;
                add_ln1192_40_reg_787 <= add_ln1192_40_fu_495_p2;
                add_ln415_reg_777 <= add_ln415_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_reg_746_pp0_iter2_reg = ap_const_lv1_0))) then
                and_ln781_reg_798 <= and_ln781_fu_656_p2;
                and_ln786_reg_808 <= and_ln786_fu_686_p2;
                or_ln340_4_reg_818 <= or_ln340_4_fu_710_p2;
                p_Val2_2_reg_792 <= p_Val2_2_fu_556_p2;
                underflow_reg_813 <= underflow_fu_704_p2;
                xor_ln785_8_reg_803 <= xor_ln785_8_fu_674_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln106_reg_746 <= icmp_ln106_fu_265_p2;
                icmp_ln106_reg_746_pp0_iter1_reg <= icmp_ln106_reg_746;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln106_reg_746_pp0_iter2_reg <= icmp_ln106_reg_746_pp0_iter1_reg;
                icmp_ln106_reg_746_pp0_iter3_reg <= icmp_ln106_reg_746_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_reg_746 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_data_0_V_reg_755 <= data_V_data_0_V_dout;
                tmp_data_1_V_reg_761 <= data_V_data_1_V_dout;
                tmp_data_2_V_reg_767 <= data_V_data_2_V_dout;
                tmp_data_3_V_reg_772 <= data_V_data_3_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, icmp_ln106_fu_265_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln106_fu_265_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln106_fu_265_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Range1_all_ones_fu_608_p2 <= "1" when (tmp_fu_598_p4 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_614_p2 <= "1" when (tmp_fu_598_p4 = ap_const_lv2_0) else "0";
    Range2_all_ones_fu_590_p3 <= acc_0_V_fu_512_p2(13 downto 13);
    acc_0_V_fu_512_p2 <= std_logic_vector(unsigned(add_ln1192_41_fu_507_p2) + unsigned(sext_ln48_fu_501_p1));
    add_ln106_fu_271_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_203) + unsigned(ap_const_lv10_1));
    add_ln1192_37_fu_473_p2 <= std_logic_vector(signed(sext_ln415_36_fu_411_p1) + signed(sext_ln1192_fu_469_p1));
    add_ln1192_38_fu_479_p2 <= std_logic_vector(unsigned(zext_ln1118_9_fu_423_p1) + unsigned(sext_ln415_35_fu_381_p1));
    add_ln1192_39_fu_485_p2 <= std_logic_vector(unsigned(zext_ln1118_8_fu_393_p1) + unsigned(zext_ln1118_fu_341_p1));
    add_ln1192_40_fu_495_p2 <= std_logic_vector(unsigned(add_ln1192_38_fu_479_p2) + unsigned(zext_ln1192_fu_491_p1));
    add_ln1192_41_fu_507_p2 <= std_logic_vector(unsigned(add_ln1192_37_reg_782) + unsigned(sext_ln1192_11_fu_504_p1));
    add_ln1192_fu_463_p2 <= std_logic_vector(unsigned(ap_const_lv11_100) + unsigned(sext_ln415_fu_329_p1));
    add_ln415_fu_457_p2 <= std_logic_vector(unsigned(zext_ln415_fu_453_p1) + unsigned(sext_ln415_37_fu_441_p1));
    and_ln779_fu_642_p2 <= (xor_ln779_fu_636_p2 and Range2_all_ones_fu_590_p3);
    and_ln781_fu_656_p2 <= (carry_2_fu_576_p2 and Range1_all_ones_fu_608_p2);
    and_ln786_fu_686_p2 <= (p_Result_4_fu_582_p3 and deleted_ones_fu_648_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(res_V_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln106_reg_746, ap_enable_reg_pp0_iter4, icmp_ln106_reg_746_pp0_iter3_reg, io_acc_block_signal_op18)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln106_reg_746_pp0_iter3_reg = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((icmp_ln106_reg_746 = ap_const_lv1_0) and (io_acc_block_signal_op18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(res_V_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln106_reg_746, ap_enable_reg_pp0_iter4, icmp_ln106_reg_746_pp0_iter3_reg, io_acc_block_signal_op18)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln106_reg_746_pp0_iter3_reg = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((icmp_ln106_reg_746 = ap_const_lv1_0) and (io_acc_block_signal_op18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(res_V_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln106_reg_746, ap_enable_reg_pp0_iter4, icmp_ln106_reg_746_pp0_iter3_reg, io_acc_block_signal_op18)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln106_reg_746_pp0_iter3_reg = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((icmp_ln106_reg_746 = ap_const_lv1_0) and (io_acc_block_signal_op18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln106_reg_746, io_acc_block_signal_op18)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln106_reg_746 = ap_const_lv1_0) and (io_acc_block_signal_op18 = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter4_assign_proc : process(res_V_data_V_full_n, icmp_ln106_reg_746_pp0_iter3_reg)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((icmp_ln106_reg_746_pp0_iter3_reg = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln106_fu_265_p2)
    begin
        if ((icmp_ln106_fu_265_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    carry_2_fu_576_p2 <= (xor_ln416_fu_570_p2 and p_Result_3_fu_536_p3);

    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln106_reg_746)
    begin
        if (((icmp_ln106_reg_746 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln106_reg_746, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_reg_746 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln106_reg_746)
    begin
        if (((icmp_ln106_reg_746 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln106_reg_746, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_reg_746 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln106_reg_746)
    begin
        if (((icmp_ln106_reg_746 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln106_reg_746, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_reg_746 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln106_reg_746)
    begin
        if (((icmp_ln106_reg_746 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln106_reg_746, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_reg_746 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_fu_648_p3 <= 
        and_ln779_fu_642_p2 when (carry_2_fu_576_p2(0) = '1') else 
        Range1_all_ones_fu_608_p2;
    deleted_zeros_fu_620_p3 <= 
        Range1_all_ones_fu_608_p2 when (carry_2_fu_576_p2(0) = '1') else 
        Range1_all_zeros_fu_614_p2;
    icmp_ln106_fu_265_p2 <= "1" when (indvar_flatten_reg_203 = ap_const_lv10_300) else "0";
    io_acc_block_signal_op18 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);
    mul_ln1118_17_fu_217_p1 <= tmp_data_3_V_reg_772;
    mul_ln1118_17_fu_217_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv14_16) * signed(mul_ln1118_17_fu_217_p1))), 14));
    mul_ln1118_fu_214_p1 <= tmp_data_2_V_reg_767;
    mul_ln1118_fu_214_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv15_23) * signed(mul_ln1118_fu_214_p1))), 15));
    or_ln340_25_fu_720_p2 <= (or_ln340_fu_716_p2 or and_ln781_reg_798);
    or_ln340_4_fu_710_p2 <= (underflow_fu_704_p2 or overflow_fu_680_p2);
    or_ln340_fu_716_p2 <= (xor_ln785_8_reg_803 or and_ln786_reg_808);
    or_ln785_4_fu_668_p2 <= (xor_ln785_7_fu_662_p2 or p_Result_4_fu_582_p3);
    or_ln786_fu_692_p2 <= (and_ln786_fu_686_p2 or and_ln781_fu_656_p2);
    overflow_fu_680_p2 <= (xor_ln785_8_fu_674_p2 and or_ln785_4_fu_668_p2);
    p_Result_3_fu_536_p3 <= acc_0_V_fu_512_p2(11 downto 11);
    p_Result_4_fu_582_p3 <= p_Val2_2_fu_556_p2(7 downto 7);
    p_Result_s_fu_518_p3 <= acc_0_V_fu_512_p2(13 downto 13);
    p_Val2_2_fu_556_p2 <= std_logic_vector(unsigned(zext_ln415_23_fu_552_p1) + unsigned(p_Val2_s_fu_526_p4));
    p_Val2_s_fu_526_p4 <= acc_0_V_fu_512_p2(11 downto 4);

    res_V_data_V_blk_n_assign_proc : process(res_V_data_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln106_reg_746_pp0_iter3_reg)
    begin
        if (((icmp_ln106_reg_746_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_V_data_V_blk_n <= res_V_data_V_full_n;
        else 
            res_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_V_din <= 
        select_ln340_fu_725_p3 when (or_ln340_25_fu_720_p2(0) = '1') else 
        select_ln388_fu_731_p3;

    res_V_data_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln106_reg_746_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_reg_746_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_V_data_V_write <= ap_const_logic_1;
        else 
            res_V_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln340_fu_725_p3 <= 
        ap_const_lv8_7F when (or_ln340_4_reg_818(0) = '1') else 
        p_Val2_2_reg_792;
    select_ln388_fu_731_p3 <= 
        ap_const_lv8_80 when (underflow_reg_813(0) = '1') else 
        p_Val2_2_reg_792;
        sext_ln1118_36_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_296_p3),12));

        sext_ln1118_37_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_1_V_reg_761),11));

        sext_ln1118_38_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_s_fu_348_p3),11));

        sext_ln1118_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_0_V_reg_755),12));

        sext_ln1192_11_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1192_40_reg_787),14));

        sext_ln1192_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1192_fu_463_p2),14));

        sext_ln415_35_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_s_fu_371_p4),10));

        sext_ln415_36_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_37_fu_401_p4),14));

        sext_ln415_37_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_38_fu_431_p4),13));

        sext_ln415_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_319_p4),11));

        sext_ln48_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln415_reg_777),14));

    shl_ln1118_s_fu_348_p3 <= (tmp_data_1_V_reg_761 & ap_const_lv2_0);
    shl_ln_fu_296_p3 <= (tmp_data_0_V_reg_755 & ap_const_lv3_0);
    sub_ln1118_10_fu_313_p2 <= std_logic_vector(unsigned(sub_ln1118_fu_307_p2) - unsigned(sext_ln1118_fu_293_p1));
    sub_ln1118_11_fu_359_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(sext_ln1118_38_fu_355_p1));
    sub_ln1118_12_fu_365_p2 <= std_logic_vector(unsigned(sub_ln1118_11_fu_359_p2) - unsigned(sext_ln1118_37_fu_345_p1));
    sub_ln1118_fu_307_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln1118_36_fu_303_p1));
    tmp_100_fu_385_p3 <= sub_ln1118_12_fu_365_p2(1 downto 1);
    tmp_101_fu_415_p3 <= mul_ln1118_fu_214_p2(1 downto 1);
    tmp_102_fu_445_p3 <= mul_ln1118_17_fu_217_p2(1 downto 1);
    tmp_105_fu_544_p3 <= acc_0_V_fu_512_p2(3 downto 3);
    tmp_106_fu_562_p3 <= p_Val2_2_fu_556_p2(7 downto 7);
    tmp_109_fu_628_p3 <= acc_0_V_fu_512_p2(12 downto 12);
    tmp_99_fu_333_p3 <= sub_ln1118_10_fu_313_p2(1 downto 1);
    tmp_fu_598_p4 <= acc_0_V_fu_512_p2(13 downto 12);
    trunc_ln708_37_fu_401_p4 <= mul_ln1118_fu_214_p2(14 downto 2);
    trunc_ln708_38_fu_431_p4 <= mul_ln1118_17_fu_217_p2(13 downto 2);
    trunc_ln708_s_fu_371_p4 <= sub_ln1118_12_fu_365_p2(10 downto 2);
    trunc_ln_fu_319_p4 <= sub_ln1118_10_fu_313_p2(11 downto 2);
    underflow_fu_704_p2 <= (xor_ln786_fu_698_p2 and p_Result_s_fu_518_p3);
    xor_ln416_fu_570_p2 <= (tmp_106_fu_562_p3 xor ap_const_lv1_1);
    xor_ln779_fu_636_p2 <= (tmp_109_fu_628_p3 xor ap_const_lv1_1);
    xor_ln785_7_fu_662_p2 <= (deleted_zeros_fu_620_p3 xor ap_const_lv1_1);
    xor_ln785_8_fu_674_p2 <= (p_Result_s_fu_518_p3 xor ap_const_lv1_1);
    xor_ln786_fu_698_p2 <= (or_ln786_fu_692_p2 xor ap_const_lv1_1);
    zext_ln1118_8_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_385_p3),2));
    zext_ln1118_9_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_415_p3),10));
    zext_ln1118_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_333_p3),2));
    zext_ln1192_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1192_39_fu_485_p2),10));
    zext_ln415_23_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_544_p3),8));
    zext_ln415_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_fu_445_p3),13));
end behav;
