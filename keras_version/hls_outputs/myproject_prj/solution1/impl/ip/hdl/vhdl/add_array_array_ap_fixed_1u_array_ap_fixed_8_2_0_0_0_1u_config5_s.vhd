-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_array_array_ap_fixed_1u_array_ap_fixed_8_2_0_0_0_1u_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data1_V_data_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    data1_V_data_V_TVALID : IN STD_LOGIC;
    data1_V_data_V_TREADY : OUT STD_LOGIC;
    data2_V_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    data2_V_data_V_empty_n : IN STD_LOGIC;
    data2_V_data_V_read : OUT STD_LOGIC;
    res_V_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_V_data_V_full_n : IN STD_LOGIC;
    res_V_data_V_write : OUT STD_LOGIC );
end;


architecture behav of add_array_array_ap_fixed_1u_array_ap_fixed_8_2_0_0_0_1u_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data1_V_data_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln15_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_V_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln15_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln15_reg_200_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_109 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_126_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_data_0_V_reg_209 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_data_data_V_fu_192_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_data_data_V_reg_215 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sext_ln703_1_fu_135_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_fu_132_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln703_1_fu_135_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1192_fu_139_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln703_fu_153_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_fu_153_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4868_fu_145_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4869_fu_158_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln384_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_fu_178_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_data1_V_data_V_U_apdone_blk : STD_LOGIC;
    signal data1_V_data_V_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal data1_V_data_V_TVALID_int : STD_LOGIC;
    signal data1_V_data_V_TREADY_int : STD_LOGIC;
    signal regslice_both_data1_V_data_V_U_ack_in : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_data1_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data1_V_data_V_TDATA,
        vld_in => data1_V_data_V_TVALID,
        ack_in => regslice_both_data1_V_data_V_U_ack_in,
        data_out => data1_V_data_V_TDATA_int,
        vld_out => data1_V_data_V_TVALID_int,
        ack_out => data1_V_data_V_TREADY_int,
        apdone_blk => regslice_both_data1_V_data_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_fu_120_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_109 <= i_fu_126_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_109 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln15_reg_200 <= icmp_ln15_fu_120_p2;
                icmp_ln15_reg_200_pp0_iter1_reg <= icmp_ln15_reg_200;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_200 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                out_data_data_V_reg_215 <= out_data_data_V_fu_192_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_data_0_V_reg_209 <= data1_V_data_V_TDATA_int;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln15_fu_120_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln15_fu_120_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln15_fu_120_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln1192_fu_139_p2 <= std_logic_vector(signed(sext_ln703_fu_132_p1) + signed(sext_ln703_1_fu_135_p1));
    add_ln703_fu_153_p0 <= data2_V_data_V_dout;
    add_ln703_fu_153_p2 <= std_logic_vector(signed(add_ln703_fu_153_p0) + signed(tmp_data_0_V_reg_209));
    and_ln785_fu_172_p2 <= (xor_ln785_fu_166_p2 and tmp_4869_fu_158_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(data2_V_data_V_empty_n, res_V_data_V_full_n, ap_enable_reg_pp0_iter0, icmp_ln15_fu_120_p2, ap_enable_reg_pp0_iter1, icmp_ln15_reg_200, ap_enable_reg_pp0_iter2, icmp_ln15_reg_200_pp0_iter1_reg, data1_V_data_V_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln15_reg_200_pp0_iter1_reg = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln15_reg_200 = ap_const_lv1_0) and (data2_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln15_fu_120_p2 = ap_const_lv1_0) and (data1_V_data_V_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(data2_V_data_V_empty_n, res_V_data_V_full_n, ap_enable_reg_pp0_iter0, icmp_ln15_fu_120_p2, ap_enable_reg_pp0_iter1, icmp_ln15_reg_200, ap_enable_reg_pp0_iter2, icmp_ln15_reg_200_pp0_iter1_reg, data1_V_data_V_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln15_reg_200_pp0_iter1_reg = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln15_reg_200 = ap_const_lv1_0) and (data2_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln15_fu_120_p2 = ap_const_lv1_0) and (data1_V_data_V_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data2_V_data_V_empty_n, res_V_data_V_full_n, ap_enable_reg_pp0_iter0, icmp_ln15_fu_120_p2, ap_enable_reg_pp0_iter1, icmp_ln15_reg_200, ap_enable_reg_pp0_iter2, icmp_ln15_reg_200_pp0_iter1_reg, data1_V_data_V_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln15_reg_200_pp0_iter1_reg = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln15_reg_200 = ap_const_lv1_0) and (data2_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln15_fu_120_p2 = ap_const_lv1_0) and (data1_V_data_V_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln15_fu_120_p2, data1_V_data_V_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln15_fu_120_p2 = ap_const_lv1_0) and (data1_V_data_V_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(data2_V_data_V_empty_n, icmp_ln15_reg_200)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln15_reg_200 = ap_const_lv1_0) and (data2_V_data_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(res_V_data_V_full_n, icmp_ln15_reg_200_pp0_iter1_reg)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((icmp_ln15_reg_200_pp0_iter1_reg = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln15_fu_120_p2)
    begin
        if ((icmp_ln15_fu_120_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data1_V_data_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln15_fu_120_p2, data1_V_data_V_TVALID_int)
    begin
        if (((icmp_ln15_fu_120_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data1_V_data_V_TDATA_blk_n <= data1_V_data_V_TVALID_int;
        else 
            data1_V_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data1_V_data_V_TREADY_assign_proc : process(data1_V_data_V_TVALID, regslice_both_data1_V_data_V_U_ack_in)
    begin
        if (((data1_V_data_V_TVALID = ap_const_logic_1) and (regslice_both_data1_V_data_V_U_ack_in = ap_const_logic_1))) then 
            data1_V_data_V_TREADY <= ap_const_logic_1;
        else 
            data1_V_data_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data1_V_data_V_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln15_fu_120_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_fu_120_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data1_V_data_V_TREADY_int <= ap_const_logic_1;
        else 
            data1_V_data_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    data2_V_data_V_blk_n_assign_proc : process(data2_V_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_reg_200)
    begin
        if (((icmp_ln15_reg_200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data2_V_data_V_blk_n <= data2_V_data_V_empty_n;
        else 
            data2_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data2_V_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln15_reg_200, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_200 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data2_V_data_V_read <= ap_const_logic_1;
        else 
            data2_V_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_126_p2 <= std_logic_vector(unsigned(i_0_reg_109) + unsigned(ap_const_lv13_1));
    icmp_ln15_fu_120_p2 <= "1" when (i_0_reg_109 = ap_const_lv13_1000) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    out_data_data_V_fu_192_p3 <= 
        select_ln384_fu_178_p3 when (xor_ln384_fu_186_p2(0) = '1') else 
        add_ln703_fu_153_p2;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_V_blk_n_assign_proc : process(res_V_data_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln15_reg_200_pp0_iter1_reg)
    begin
        if (((icmp_ln15_reg_200_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_V_blk_n <= res_V_data_V_full_n;
        else 
            res_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_V_din <= out_data_data_V_reg_215;

    res_V_data_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_200_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_200_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_V_write <= ap_const_logic_1;
        else 
            res_V_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln384_fu_178_p3 <= 
        ap_const_lv8_7F when (and_ln785_fu_172_p2(0) = '1') else 
        ap_const_lv8_80;
    sext_ln703_1_fu_135_p0 <= data2_V_data_V_dout;
        sext_ln703_1_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_1_fu_135_p0),9));

        sext_ln703_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_0_V_reg_209),9));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4868_fu_145_p3 <= add_ln1192_fu_139_p2(8 downto 8);
    tmp_4869_fu_158_p3 <= add_ln703_fu_153_p2(7 downto 7);
    xor_ln384_fu_186_p2 <= (tmp_4869_fu_158_p3 xor tmp_4868_fu_145_p3);
    xor_ln785_fu_166_p2 <= (tmp_4868_fu_145_p3 xor ap_const_lv1_1);
end behav;
