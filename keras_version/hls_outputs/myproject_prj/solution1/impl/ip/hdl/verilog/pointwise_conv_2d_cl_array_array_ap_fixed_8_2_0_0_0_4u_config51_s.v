// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv_2d_cl_array_array_ap_fixed_8_2_0_0_0_4u_config51_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [7:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [7:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [7:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [7:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [7:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [7:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [7:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln106_reg_2870;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln106_reg_2870_pp0_iter3_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [9:0] indvar_flatten_reg_322;
wire   [0:0] icmp_ln106_fu_1060_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op21;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    io_acc_block_signal_op331;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln106_reg_2870_pp0_iter1_reg;
reg   [0:0] icmp_ln106_reg_2870_pp0_iter2_reg;
wire   [9:0] add_ln106_fu_1066_p2;
reg    ap_enable_reg_pp0_iter0;
reg  signed [7:0] tmp_data_0_V_reg_2879;
reg  signed [7:0] tmp_data_1_V_reg_2888;
reg   [7:0] tmp_data_2_V_reg_2896;
reg  signed [7:0] tmp_data_3_V_reg_2901;
reg   [5:0] trunc_ln708_6_reg_2909;
reg   [0:0] tmp_6_reg_2914;
reg   [0:0] tmp_3_reg_2919;
reg   [10:0] trunc_ln708_5_reg_2924;
reg   [0:0] tmp_7_reg_2929;
wire   [14:0] add_ln415_1_fu_1417_p2;
reg   [14:0] add_ln415_1_reg_2934;
reg   [13:0] trunc_ln708_9_reg_2939;
reg   [0:0] tmp_9_reg_2944;
reg   [13:0] trunc_ln708_s_reg_2949;
reg   [0:0] tmp_11_reg_2954;
wire   [13:0] add_ln415_4_fu_1511_p2;
reg   [13:0] add_ln415_4_reg_2959;
reg   [12:0] trunc_ln708_11_reg_2964;
reg   [0:0] tmp_13_reg_2969;
wire  signed [12:0] add_ln415_6_fu_1561_p2;
reg  signed [12:0] add_ln415_6_reg_2974;
reg   [8:0] trunc_ln708_13_reg_2980;
reg   [0:0] tmp_15_reg_2985;
wire   [12:0] add_ln1192_2_fu_1638_p2;
reg   [12:0] add_ln1192_2_reg_2990;
wire   [7:0] add_ln1192_6_fu_1654_p2;
reg   [7:0] add_ln1192_6_reg_2995;
wire   [11:0] add_ln1192_14_fu_1670_p2;
reg   [11:0] add_ln1192_14_reg_3000;
wire  signed [14:0] acc_2_V_2_fu_1676_p2;
reg  signed [14:0] acc_2_V_2_reg_3005;
wire   [7:0] add_ln415_8_fu_1974_p2;
reg   [7:0] add_ln415_8_reg_3011;
wire   [0:0] and_ln781_fu_2082_p2;
reg   [0:0] and_ln781_reg_3017;
wire   [0:0] xor_ln785_1_fu_2100_p2;
reg   [0:0] xor_ln785_1_reg_3022;
wire   [0:0] and_ln786_4_fu_2112_p2;
reg   [0:0] and_ln786_4_reg_3027;
wire   [0:0] and_ln786_5_fu_2130_p2;
reg   [0:0] and_ln786_5_reg_3032;
wire   [0:0] or_ln340_1_fu_2136_p2;
reg   [0:0] or_ln340_1_reg_3037;
reg   [0:0] tmp_26_reg_3042;
wire   [7:0] add_ln415_9_fu_2180_p2;
reg   [7:0] add_ln415_9_reg_3048;
wire   [0:0] and_ln416_1_fu_2200_p2;
reg   [0:0] and_ln416_1_reg_3054;
wire   [0:0] tmp_30_fu_2206_p3;
reg   [0:0] tmp_30_reg_3060;
wire   [0:0] icmp_ln879_3_fu_2240_p2;
reg   [0:0] icmp_ln879_3_reg_3065;
wire   [0:0] icmp_ln768_1_fu_2246_p2;
reg   [0:0] icmp_ln768_1_reg_3071;
wire   [0:0] and_ln786_1_fu_2280_p2;
reg   [0:0] and_ln786_1_reg_3076;
wire   [7:0] add_ln415_10_fu_2324_p2;
reg   [7:0] add_ln415_10_reg_3082;
wire   [0:0] and_ln781_2_fu_2432_p2;
reg   [0:0] and_ln781_2_reg_3088;
wire   [0:0] xor_ln785_5_fu_2450_p2;
reg   [0:0] xor_ln785_5_reg_3093;
wire   [0:0] and_ln786_2_fu_2462_p2;
reg   [0:0] and_ln786_2_reg_3098;
wire   [0:0] and_ln786_7_fu_2480_p2;
reg   [0:0] and_ln786_7_reg_3103;
wire   [0:0] or_ln340_7_fu_2486_p2;
reg   [0:0] or_ln340_7_reg_3108;
reg   [0:0] tmp_40_reg_3113;
wire   [7:0] add_ln415_11_fu_2530_p2;
reg   [7:0] add_ln415_11_reg_3119;
wire   [0:0] and_ln416_3_fu_2550_p2;
reg   [0:0] and_ln416_3_reg_3125;
wire   [0:0] tmp_44_fu_2556_p3;
reg   [0:0] tmp_44_reg_3131;
wire   [0:0] icmp_ln879_7_fu_2590_p2;
reg   [0:0] icmp_ln879_7_reg_3136;
wire   [0:0] icmp_ln768_3_fu_2596_p2;
reg   [0:0] icmp_ln768_3_reg_3142;
wire   [0:0] and_ln786_3_fu_2630_p2;
reg   [0:0] and_ln786_3_reg_3147;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_01001;
wire  signed [7:0] mul_ln1118_9_fu_333_p1;
wire  signed [7:0] mul_ln1118_4_fu_335_p1;
wire  signed [15:0] sext_ln1116_fu_1384_p1;
wire  signed [7:0] mul_ln1118_1_fu_336_p1;
wire  signed [7:0] mul_ln1118_3_fu_337_p1;
wire  signed [7:0] mul_ln1118_2_fu_338_p1;
wire  signed [7:0] mul_ln1118_6_fu_341_p1;
wire  signed [7:0] mul_ln1118_fu_342_p1;
wire  signed [7:0] mul_ln1118_5_fu_346_p1;
wire  signed [7:0] mul_ln1118_7_fu_347_p1;
wire  signed [14:0] sext_ln1118_13_fu_1477_p1;
wire  signed [7:0] mul_ln1118_8_fu_348_p1;
wire  signed [7:0] trunc_ln708_6_fu_1088_p1;
wire  signed [7:0] tmp_6_fu_1098_p1;
wire   [13:0] mul_ln1118_fu_342_p2;
wire   [11:0] trunc_ln_fu_1117_p4;
wire   [0:0] tmp_fu_1131_p3;
wire  signed [8:0] sext_ln1118_2_fu_1114_p1;
wire   [8:0] sub_ln1118_fu_1143_p2;
wire   [6:0] trunc_ln708_1_fu_1149_p4;
wire   [0:0] tmp_2_fu_1163_p3;
wire   [11:0] shl_ln_fu_1175_p3;
wire   [9:0] shl_ln1118_1_fu_1186_p3;
wire  signed [12:0] sext_ln1118_4_fu_1193_p1;
wire  signed [12:0] sext_ln1118_3_fu_1182_p1;
wire   [12:0] sub_ln1118_1_fu_1197_p2;
wire   [10:0] trunc_ln708_2_fu_1203_p4;
wire   [12:0] mul_ln1118_1_fu_336_p2;
wire   [10:0] trunc_ln708_3_fu_1217_p4;
wire   [10:0] shl_ln1118_2_fu_1243_p3;
wire  signed [8:0] shl_ln1118_3_fu_1254_p3;
wire  signed [11:0] sext_ln1118_7_fu_1250_p1;
wire  signed [11:0] sext_ln1118_8_fu_1261_p1;
wire   [11:0] add_ln1118_fu_1269_p2;
wire   [9:0] trunc_ln708_4_fu_1275_p4;
wire   [0:0] tmp_4_fu_1289_p3;
wire   [12:0] mul_ln1118_2_fu_338_p2;
wire   [0:0] tmp_5_fu_1311_p3;
wire  signed [6:0] sext_ln415_5_fu_1323_p1;
wire   [6:0] zext_ln415_fu_1326_p1;
wire   [6:0] add_ln415_fu_1329_p2;
wire   [11:0] shl_ln1118_4_fu_1339_p3;
wire  signed [12:0] sext_ln1118_11_fu_1346_p1;
wire   [12:0] sub_ln1118_2_fu_1350_p2;
wire  signed [12:0] sext_ln1118_9_fu_1265_p1;
wire   [12:0] sub_ln1118_3_fu_1356_p2;
wire   [10:0] trunc_ln708_7_fu_1362_p4;
wire   [15:0] mul_ln1118_3_fu_337_p2;
wire   [13:0] trunc_ln708_8_fu_1391_p4;
wire   [0:0] tmp_8_fu_1405_p3;
wire  signed [14:0] sext_ln415_7_fu_1401_p1;
wire   [14:0] zext_ln415_1_fu_1413_p1;
wire   [15:0] mul_ln1118_4_fu_335_p2;
wire   [15:0] mul_ln1118_5_fu_346_p2;
wire   [13:0] tmp_10_fu_1441_p4;
wire   [15:0] mul_ln1118_6_fu_341_p2;
wire   [14:0] mul_ln1118_7_fu_347_p2;
wire   [12:0] trunc_ln708_10_fu_1485_p4;
wire   [0:0] tmp_12_fu_1499_p3;
wire  signed [13:0] sext_ln415_10_fu_1495_p1;
wire   [13:0] zext_ln415_4_fu_1507_p1;
wire   [14:0] mul_ln1118_8_fu_348_p2;
wire   [13:0] mul_ln1118_9_fu_333_p2;
wire   [11:0] trunc_ln708_12_fu_1535_p4;
wire   [0:0] tmp_14_fu_1549_p3;
wire  signed [12:0] sext_ln415_12_fu_1545_p1;
wire   [12:0] zext_ln415_6_fu_1557_p1;
wire   [9:0] shl_ln1118_5_fu_1567_p3;
wire  signed [10:0] sext_ln1118_15_fu_1574_p1;
wire   [10:0] sub_ln1118_4_fu_1578_p2;
wire  signed [10:0] sext_ln1118_14_fu_1482_p1;
wire   [10:0] sub_ln1118_5_fu_1584_p2;
wire  signed [11:0] sext_ln1118_5_fu_1213_p1;
wire  signed [12:0] sext_ln415_fu_1127_p1;
wire  signed [12:0] sext_ln415_3_fu_1285_p1;
wire   [1:0] zext_ln1118_3_fu_1297_p1;
wire   [1:0] zext_ln1118_fu_1139_p1;
wire   [1:0] add_ln1192_1_fu_1620_p2;
wire   [5:0] or_ln_fu_1626_p3;
wire   [12:0] zext_ln1192_fu_1634_p1;
wire   [12:0] add_ln1192_fu_1614_p2;
wire   [1:0] zext_ln708_fu_1319_p1;
wire   [1:0] zext_ln1118_1_fu_1171_p1;
wire   [1:0] add_ln1192_5_fu_1644_p2;
wire   [7:0] zext_ln1192_1_fu_1650_p1;
wire  signed [7:0] sext_ln415_1_fu_1159_p1;
wire   [11:0] acc_2_V_fu_1608_p2;
wire  signed [11:0] sext_ln1118_10_fu_1335_p1;
wire   [11:0] acc_2_V_1_fu_1660_p2;
wire  signed [11:0] sext_ln415_6_fu_1372_p1;
wire  signed [11:0] sext_ln415_2_fu_1227_p1;
wire  signed [14:0] sext_ln703_fu_1666_p1;
wire  signed [14:0] sext_ln1118_16_fu_1451_p1;
wire  signed [14:0] sext_ln415_8_fu_1691_p1;
wire   [14:0] zext_ln415_2_fu_1694_p1;
wire  signed [14:0] sext_ln415_9_fu_1703_p1;
wire   [14:0] zext_ln415_3_fu_1706_p1;
wire  signed [13:0] sext_ln415_11_fu_1718_p1;
wire   [13:0] zext_ln415_5_fu_1721_p1;
wire   [13:0] add_ln415_5_fu_1724_p2;
wire  signed [9:0] sext_ln415_14_fu_1737_p1;
wire   [9:0] zext_ln415_7_fu_1740_p1;
wire   [9:0] add_ln415_7_fu_1743_p2;
wire  signed [11:0] sext_ln415_4_fu_1685_p1;
wire  signed [11:0] sext_ln1192_1_fu_1762_p1;
wire   [11:0] add_ln1192_3_fu_1756_p2;
wire   [11:0] add_ln1192_7_fu_1765_p2;
wire   [1:0] zext_ln1116_fu_1688_p1;
wire   [1:0] zext_ln1118_2_fu_1682_p1;
wire   [1:0] add_ln1192_15_fu_1778_p2;
wire   [4:0] or_ln1192_1_fu_1784_p3;
wire  signed [6:0] sext_ln1192_4_fu_1792_p1;
wire   [12:0] zext_ln1192_2_fu_1796_p1;
wire  signed [12:0] sext_ln1192_3_fu_1775_p1;
wire   [12:0] add_ln1192_16_fu_1800_p2;
wire  signed [14:0] sext_ln1192_fu_1753_p1;
wire   [14:0] add_ln415_2_fu_1697_p2;
wire  signed [14:0] sext_ln1192_2_fu_1771_p1;
wire   [14:0] add_ln415_3_fu_1709_p2;
wire  signed [14:0] sext_ln1192_5_fu_1806_p1;
wire   [14:0] acc_0_V_fu_1810_p2;
wire  signed [14:0] sext_ln1118_17_fu_1715_p1;
wire   [14:0] acc_1_V_fu_1815_p2;
wire  signed [14:0] sext_ln1118_18_fu_1730_p1;
wire  signed [16:0] sext_ln703_2_fu_1842_p1;
wire  signed [16:0] sext_ln703_3_fu_1845_p1;
wire   [16:0] add_ln1192_12_fu_1848_p2;
wire  signed [15:0] acc_2_V_3_fu_1821_p1;
wire  signed [15:0] sext_ln415_13_fu_1734_p1;
wire   [15:0] acc_2_V_4_fu_1862_p2;
wire   [0:0] tmp_17_fu_1868_p3;
wire   [0:0] tmp_16_fu_1854_p3;
wire   [0:0] xor_ln786_fu_1876_p2;
wire   [0:0] xor_ln340_1_fu_1894_p2;
wire   [0:0] xor_ln340_fu_1888_p2;
wire   [0:0] and_ln786_fu_1882_p2;
wire   [0:0] or_ln340_fu_1900_p2;
wire   [15:0] select_ln340_fu_1906_p3;
wire   [15:0] acc_2_V_5_fu_1914_p3;
wire   [14:0] acc_3_V_fu_1824_p2;
wire  signed [14:0] sext_ln1192_6_fu_1749_p1;
wire   [14:0] acc_0_V_1_fu_1830_p2;
wire   [0:0] tmp_20_fu_1962_p3;
wire   [7:0] trunc_ln708_14_fu_1944_p4;
wire   [7:0] zext_ln415_8_fu_1970_p1;
wire   [0:0] tmp_21_fu_1980_p3;
wire   [0:0] tmp_19_fu_1954_p3;
wire   [0:0] xor_ln416_fu_1988_p2;
wire   [1:0] tmp_23_fu_2008_p4;
wire   [2:0] tmp_24_fu_2024_p4;
wire   [0:0] and_ln416_fu_1994_p2;
wire   [0:0] icmp_ln879_1_fu_2034_p2;
wire   [0:0] icmp_ln768_fu_2040_p2;
wire   [0:0] tmp_25_fu_2054_p3;
wire   [0:0] icmp_ln879_fu_2018_p2;
wire   [0:0] xor_ln779_fu_2062_p2;
wire   [0:0] and_ln779_fu_2068_p2;
wire   [0:0] select_ln777_fu_2046_p3;
wire   [0:0] tmp_22_fu_2000_p3;
wire   [0:0] xor_ln785_fu_2088_p2;
wire   [0:0] tmp_18_fu_1936_p3;
wire   [0:0] or_ln785_fu_2094_p2;
wire   [0:0] select_ln416_fu_2074_p3;
wire   [0:0] or_ln786_fu_2118_p2;
wire   [0:0] xor_ln786_1_fu_2124_p2;
wire   [0:0] and_ln785_fu_2106_p2;
wire   [14:0] acc_1_V_1_fu_1836_p2;
wire   [0:0] tmp_28_fu_2168_p3;
wire   [7:0] trunc_ln708_15_fu_2150_p4;
wire   [7:0] zext_ln415_9_fu_2176_p1;
wire   [0:0] tmp_29_fu_2186_p3;
wire   [0:0] tmp_27_fu_2160_p3;
wire   [0:0] xor_ln416_1_fu_2194_p2;
wire   [1:0] tmp_31_fu_2214_p4;
wire   [2:0] tmp_32_fu_2230_p4;
wire   [0:0] tmp_33_fu_2252_p3;
wire   [0:0] icmp_ln879_2_fu_2224_p2;
wire   [0:0] xor_ln779_1_fu_2260_p2;
wire   [0:0] and_ln779_1_fu_2266_p2;
wire   [0:0] select_ln416_1_fu_2272_p3;
wire   [15:0] select_ln340_1_fu_1922_p3;
wire   [0:0] tmp_36_fu_2312_p3;
wire   [7:0] trunc_ln708_16_fu_2294_p4;
wire   [7:0] zext_ln415_10_fu_2320_p1;
wire   [0:0] tmp_37_fu_2330_p3;
wire   [0:0] tmp_35_fu_2304_p3;
wire   [0:0] xor_ln416_2_fu_2338_p2;
wire   [2:0] p_Result_8_2_fu_2358_p4;
wire   [3:0] p_Result_9_2_fu_2374_p4;
wire   [0:0] and_ln416_2_fu_2344_p2;
wire   [0:0] icmp_ln879_5_fu_2384_p2;
wire   [0:0] icmp_ln768_2_fu_2390_p2;
wire   [0:0] tmp_39_fu_2404_p3;
wire   [0:0] icmp_ln879_4_fu_2368_p2;
wire   [0:0] xor_ln779_2_fu_2412_p2;
wire   [0:0] and_ln779_2_fu_2418_p2;
wire   [0:0] select_ln777_2_fu_2396_p3;
wire   [0:0] tmp_38_fu_2350_p3;
wire   [0:0] xor_ln785_4_fu_2438_p2;
wire   [0:0] tmp_34_fu_2286_p3;
wire   [0:0] or_ln785_2_fu_2444_p2;
wire   [0:0] select_ln416_2_fu_2424_p3;
wire   [0:0] or_ln786_2_fu_2468_p2;
wire   [0:0] xor_ln786_3_fu_2474_p2;
wire   [0:0] and_ln785_2_fu_2456_p2;
wire   [14:0] acc_3_V_1_fu_1930_p2;
wire   [0:0] tmp_42_fu_2518_p3;
wire   [7:0] trunc_ln708_17_fu_2500_p4;
wire   [7:0] zext_ln415_11_fu_2526_p1;
wire   [0:0] tmp_43_fu_2536_p3;
wire   [0:0] tmp_41_fu_2510_p3;
wire   [0:0] xor_ln416_3_fu_2544_p2;
wire   [1:0] tmp_45_fu_2564_p4;
wire   [2:0] tmp_46_fu_2580_p4;
wire   [0:0] tmp_47_fu_2602_p3;
wire   [0:0] icmp_ln879_6_fu_2574_p2;
wire   [0:0] xor_ln779_3_fu_2610_p2;
wire   [0:0] and_ln779_3_fu_2616_p2;
wire   [0:0] select_ln416_3_fu_2622_p3;
wire   [0:0] or_ln340_2_fu_2636_p2;
wire   [0:0] or_ln340_3_fu_2640_p2;
wire   [7:0] select_ln340_2_fu_2645_p3;
wire   [7:0] select_ln388_fu_2651_p3;
wire   [0:0] select_ln777_1_fu_2666_p3;
wire   [0:0] xor_ln785_2_fu_2675_p2;
wire   [0:0] or_ln785_1_fu_2681_p2;
wire   [0:0] xor_ln785_3_fu_2686_p2;
wire   [0:0] and_ln781_1_fu_2671_p2;
wire   [0:0] or_ln786_1_fu_2697_p2;
wire   [0:0] xor_ln786_2_fu_2702_p2;
wire   [0:0] and_ln786_6_fu_2708_p2;
wire   [0:0] and_ln785_1_fu_2691_p2;
wire   [0:0] or_ln340_5_fu_2719_p2;
wire   [0:0] or_ln340_4_fu_2713_p2;
wire   [0:0] or_ln340_6_fu_2724_p2;
wire   [7:0] select_ln340_4_fu_2730_p3;
wire   [7:0] select_ln388_1_fu_2737_p3;
wire   [0:0] or_ln340_8_fu_2753_p2;
wire   [0:0] or_ln340_9_fu_2757_p2;
wire   [7:0] select_ln340_6_fu_2762_p3;
wire   [7:0] select_ln388_2_fu_2768_p3;
wire   [0:0] select_ln777_3_fu_2783_p3;
wire   [0:0] xor_ln785_6_fu_2792_p2;
wire   [0:0] or_ln785_3_fu_2798_p2;
wire   [0:0] xor_ln785_7_fu_2803_p2;
wire   [0:0] and_ln781_3_fu_2788_p2;
wire   [0:0] or_ln786_3_fu_2814_p2;
wire   [0:0] xor_ln786_4_fu_2819_p2;
wire   [0:0] and_ln786_8_fu_2825_p2;
wire   [0:0] and_ln785_3_fu_2808_p2;
wire   [0:0] or_ln340_11_fu_2836_p2;
wire   [0:0] or_ln340_10_fu_2830_p2;
wire   [0:0] or_ln340_12_fu_2841_p2;
wire   [7:0] select_ln340_8_fu_2847_p3;
wire   [7:0] select_ln388_3_fu_2854_p3;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_1060_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_322 <= add_ln106_fu_1066_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_322 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_reg_2870_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        acc_2_V_2_reg_3005 <= acc_2_V_2_fu_1676_p2;
        add_ln1192_14_reg_3000 <= add_ln1192_14_fu_1670_p2;
        add_ln1192_2_reg_2990 <= add_ln1192_2_fu_1638_p2;
        add_ln1192_6_reg_2995 <= add_ln1192_6_fu_1654_p2;
        add_ln415_1_reg_2934 <= add_ln415_1_fu_1417_p2;
        add_ln415_4_reg_2959 <= add_ln415_4_fu_1511_p2;
        add_ln415_6_reg_2974 <= add_ln415_6_fu_1561_p2;
        tmp_11_reg_2954 <= mul_ln1118_6_fu_341_p2[32'd1];
        tmp_13_reg_2969 <= mul_ln1118_8_fu_348_p2[32'd1];
        tmp_15_reg_2985 <= sub_ln1118_5_fu_1584_p2[32'd1];
        tmp_3_reg_2919 <= mul_ln1118_1_fu_336_p2[32'd1];
        tmp_7_reg_2929 <= sub_ln1118_3_fu_1356_p2[32'd1];
        tmp_9_reg_2944 <= mul_ln1118_4_fu_335_p2[32'd1];
        trunc_ln708_11_reg_2964 <= {{mul_ln1118_8_fu_348_p2[14:2]}};
        trunc_ln708_13_reg_2980 <= {{sub_ln1118_5_fu_1584_p2[10:2]}};
        trunc_ln708_5_reg_2924 <= {{mul_ln1118_2_fu_338_p2[12:2]}};
        trunc_ln708_9_reg_2939 <= {{mul_ln1118_4_fu_335_p2[15:2]}};
        trunc_ln708_s_reg_2949 <= {{mul_ln1118_6_fu_341_p2[15:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_reg_2870_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln415_10_reg_3082 <= add_ln415_10_fu_2324_p2;
        add_ln415_11_reg_3119 <= add_ln415_11_fu_2530_p2;
        add_ln415_8_reg_3011 <= add_ln415_8_fu_1974_p2;
        add_ln415_9_reg_3048 <= add_ln415_9_fu_2180_p2;
        and_ln416_1_reg_3054 <= and_ln416_1_fu_2200_p2;
        and_ln416_3_reg_3125 <= and_ln416_3_fu_2550_p2;
        and_ln781_2_reg_3088 <= and_ln781_2_fu_2432_p2;
        and_ln781_reg_3017 <= and_ln781_fu_2082_p2;
        and_ln786_1_reg_3076 <= and_ln786_1_fu_2280_p2;
        and_ln786_2_reg_3098 <= and_ln786_2_fu_2462_p2;
        and_ln786_3_reg_3147 <= and_ln786_3_fu_2630_p2;
        and_ln786_4_reg_3027 <= and_ln786_4_fu_2112_p2;
        and_ln786_5_reg_3032 <= and_ln786_5_fu_2130_p2;
        and_ln786_7_reg_3103 <= and_ln786_7_fu_2480_p2;
        icmp_ln768_1_reg_3071 <= icmp_ln768_1_fu_2246_p2;
        icmp_ln768_3_reg_3142 <= icmp_ln768_3_fu_2596_p2;
        icmp_ln879_3_reg_3065 <= icmp_ln879_3_fu_2240_p2;
        icmp_ln879_7_reg_3136 <= icmp_ln879_7_fu_2590_p2;
        or_ln340_1_reg_3037 <= or_ln340_1_fu_2136_p2;
        or_ln340_7_reg_3108 <= or_ln340_7_fu_2486_p2;
        tmp_26_reg_3042 <= acc_1_V_1_fu_1836_p2[32'd14];
        tmp_30_reg_3060 <= add_ln415_9_fu_2180_p2[32'd7];
        tmp_40_reg_3113 <= acc_3_V_1_fu_1930_p2[32'd14];
        tmp_44_reg_3131 <= add_ln415_11_fu_2530_p2[32'd7];
        xor_ln785_1_reg_3022 <= xor_ln785_1_fu_2100_p2;
        xor_ln785_5_reg_3093 <= xor_ln785_5_fu_2450_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln106_reg_2870 <= icmp_ln106_fu_1060_p2;
        icmp_ln106_reg_2870_pp0_iter1_reg <= icmp_ln106_reg_2870;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln106_reg_2870_pp0_iter2_reg <= icmp_ln106_reg_2870_pp0_iter1_reg;
        icmp_ln106_reg_2870_pp0_iter3_reg <= icmp_ln106_reg_2870_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_reg_2870 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_6_reg_2914 <= tmp_6_fu_1098_p1[32'd1];
        tmp_data_0_V_reg_2879 <= data_V_data_0_V_dout;
        tmp_data_1_V_reg_2888 <= data_V_data_1_V_dout;
        tmp_data_2_V_reg_2896 <= data_V_data_2_V_dout;
        tmp_data_3_V_reg_2901 <= data_V_data_3_V_dout;
        trunc_ln708_6_reg_2909 <= {{trunc_ln708_6_fu_1088_p1[7:2]}};
    end
end

always @ (*) begin
    if ((icmp_ln106_fu_1060_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2870_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln106_fu_1060_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln106_fu_1060_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_V_1_fu_1830_p2 = ($signed(acc_0_V_fu_1810_p2) + $signed(sext_ln1118_17_fu_1715_p1));

assign acc_0_V_fu_1810_p2 = ($signed(add_ln415_1_reg_2934) + $signed(sext_ln1192_fu_1753_p1));

assign acc_1_V_1_fu_1836_p2 = ($signed(acc_1_V_fu_1815_p2) + $signed(sext_ln1118_18_fu_1730_p1));

assign acc_1_V_fu_1815_p2 = ($signed(add_ln415_2_fu_1697_p2) + $signed(sext_ln1192_2_fu_1771_p1));

assign acc_2_V_1_fu_1660_p2 = ($signed(acc_2_V_fu_1608_p2) + $signed(sext_ln1118_10_fu_1335_p1));

assign acc_2_V_2_fu_1676_p2 = ($signed(sext_ln703_fu_1666_p1) + $signed(sext_ln1118_16_fu_1451_p1));

assign acc_2_V_3_fu_1821_p1 = acc_2_V_2_reg_3005;

assign acc_2_V_4_fu_1862_p2 = ($signed(acc_2_V_3_fu_1821_p1) + $signed(sext_ln415_13_fu_1734_p1));

assign acc_2_V_5_fu_1914_p3 = ((and_ln786_fu_1882_p2[0:0] === 1'b1) ? 16'd32768 : acc_2_V_4_fu_1862_p2);

assign acc_2_V_fu_1608_p2 = ($signed(12'd4080) + $signed(sext_ln1118_5_fu_1213_p1));

assign acc_3_V_1_fu_1930_p2 = ($signed(acc_3_V_fu_1824_p2) + $signed(sext_ln1192_6_fu_1749_p1));

assign acc_3_V_fu_1824_p2 = ($signed(add_ln415_3_fu_1709_p2) + $signed(sext_ln1192_5_fu_1806_p1));

assign add_ln106_fu_1066_p2 = (indvar_flatten_reg_322 + 10'd1);

assign add_ln1118_fu_1269_p2 = ($signed(sext_ln1118_7_fu_1250_p1) + $signed(sext_ln1118_8_fu_1261_p1));

assign add_ln1192_12_fu_1848_p2 = ($signed(sext_ln703_2_fu_1842_p1) + $signed(sext_ln703_3_fu_1845_p1));

assign add_ln1192_14_fu_1670_p2 = ($signed(sext_ln415_6_fu_1372_p1) + $signed(sext_ln415_2_fu_1227_p1));

assign add_ln1192_15_fu_1778_p2 = (zext_ln1116_fu_1688_p1 + zext_ln1118_2_fu_1682_p1);

assign add_ln1192_16_fu_1800_p2 = ($signed(zext_ln1192_2_fu_1796_p1) + $signed(sext_ln1192_3_fu_1775_p1));

assign add_ln1192_1_fu_1620_p2 = (zext_ln1118_3_fu_1297_p1 + zext_ln1118_fu_1139_p1);

assign add_ln1192_2_fu_1638_p2 = (zext_ln1192_fu_1634_p1 + add_ln1192_fu_1614_p2);

assign add_ln1192_3_fu_1756_p2 = ($signed(12'd3904) + $signed(sext_ln415_4_fu_1685_p1));

assign add_ln1192_5_fu_1644_p2 = (zext_ln708_fu_1319_p1 + zext_ln1118_1_fu_1171_p1);

assign add_ln1192_6_fu_1654_p2 = ($signed(zext_ln1192_1_fu_1650_p1) + $signed(sext_ln415_1_fu_1159_p1));

assign add_ln1192_7_fu_1765_p2 = ($signed(sext_ln1192_1_fu_1762_p1) + $signed(add_ln1192_3_fu_1756_p2));

assign add_ln1192_fu_1614_p2 = ($signed(sext_ln415_fu_1127_p1) + $signed(sext_ln415_3_fu_1285_p1));

assign add_ln415_10_fu_2324_p2 = (trunc_ln708_16_fu_2294_p4 + zext_ln415_10_fu_2320_p1);

assign add_ln415_11_fu_2530_p2 = (trunc_ln708_17_fu_2500_p4 + zext_ln415_11_fu_2526_p1);

assign add_ln415_1_fu_1417_p2 = ($signed(sext_ln415_7_fu_1401_p1) + $signed(zext_ln415_1_fu_1413_p1));

assign add_ln415_2_fu_1697_p2 = ($signed(sext_ln415_8_fu_1691_p1) + $signed(zext_ln415_2_fu_1694_p1));

assign add_ln415_3_fu_1709_p2 = ($signed(sext_ln415_9_fu_1703_p1) + $signed(zext_ln415_3_fu_1706_p1));

assign add_ln415_4_fu_1511_p2 = ($signed(sext_ln415_10_fu_1495_p1) + $signed(zext_ln415_4_fu_1507_p1));

assign add_ln415_5_fu_1724_p2 = ($signed(sext_ln415_11_fu_1718_p1) + $signed(zext_ln415_5_fu_1721_p1));

assign add_ln415_6_fu_1561_p2 = ($signed(sext_ln415_12_fu_1545_p1) + $signed(zext_ln415_6_fu_1557_p1));

assign add_ln415_7_fu_1743_p2 = ($signed(sext_ln415_14_fu_1737_p1) + $signed(zext_ln415_7_fu_1740_p1));

assign add_ln415_8_fu_1974_p2 = (trunc_ln708_14_fu_1944_p4 + zext_ln415_8_fu_1970_p1);

assign add_ln415_9_fu_2180_p2 = (trunc_ln708_15_fu_2150_p4 + zext_ln415_9_fu_2176_p1);

assign add_ln415_fu_1329_p2 = ($signed(sext_ln415_5_fu_1323_p1) + $signed(zext_ln415_fu_1326_p1));

assign and_ln416_1_fu_2200_p2 = (xor_ln416_1_fu_2194_p2 & tmp_27_fu_2160_p3);

assign and_ln416_2_fu_2344_p2 = (xor_ln416_2_fu_2338_p2 & tmp_35_fu_2304_p3);

assign and_ln416_3_fu_2550_p2 = (xor_ln416_3_fu_2544_p2 & tmp_41_fu_2510_p3);

assign and_ln416_fu_1994_p2 = (xor_ln416_fu_1988_p2 & tmp_19_fu_1954_p3);

assign and_ln779_1_fu_2266_p2 = (xor_ln779_1_fu_2260_p2 & icmp_ln879_2_fu_2224_p2);

assign and_ln779_2_fu_2418_p2 = (xor_ln779_2_fu_2412_p2 & icmp_ln879_4_fu_2368_p2);

assign and_ln779_3_fu_2616_p2 = (xor_ln779_3_fu_2610_p2 & icmp_ln879_6_fu_2574_p2);

assign and_ln779_fu_2068_p2 = (xor_ln779_fu_2062_p2 & icmp_ln879_fu_2018_p2);

assign and_ln781_1_fu_2671_p2 = (icmp_ln879_3_reg_3065 & and_ln416_1_reg_3054);

assign and_ln781_2_fu_2432_p2 = (icmp_ln879_5_fu_2384_p2 & and_ln416_2_fu_2344_p2);

assign and_ln781_3_fu_2788_p2 = (icmp_ln879_7_reg_3136 & and_ln416_3_reg_3125);

assign and_ln781_fu_2082_p2 = (icmp_ln879_1_fu_2034_p2 & and_ln416_fu_1994_p2);

assign and_ln785_1_fu_2691_p2 = (xor_ln785_3_fu_2686_p2 & or_ln785_1_fu_2681_p2);

assign and_ln785_2_fu_2456_p2 = (xor_ln785_5_fu_2450_p2 & or_ln785_2_fu_2444_p2);

assign and_ln785_3_fu_2808_p2 = (xor_ln785_7_fu_2803_p2 & or_ln785_3_fu_2798_p2);

assign and_ln785_fu_2106_p2 = (xor_ln785_1_fu_2100_p2 & or_ln785_fu_2094_p2);

assign and_ln786_1_fu_2280_p2 = (tmp_30_fu_2206_p3 & select_ln416_1_fu_2272_p3);

assign and_ln786_2_fu_2462_p2 = (tmp_38_fu_2350_p3 & select_ln416_2_fu_2424_p3);

assign and_ln786_3_fu_2630_p2 = (tmp_44_fu_2556_p3 & select_ln416_3_fu_2622_p3);

assign and_ln786_4_fu_2112_p2 = (tmp_22_fu_2000_p3 & select_ln416_fu_2074_p3);

assign and_ln786_5_fu_2130_p2 = (xor_ln786_1_fu_2124_p2 & tmp_18_fu_1936_p3);

assign and_ln786_6_fu_2708_p2 = (xor_ln786_2_fu_2702_p2 & tmp_26_reg_3042);

assign and_ln786_7_fu_2480_p2 = (xor_ln786_3_fu_2474_p2 & tmp_34_fu_2286_p3);

assign and_ln786_8_fu_2825_p2 = (xor_ln786_4_fu_2819_p2 & tmp_40_reg_3113);

assign and_ln786_fu_1882_p2 = (xor_ln786_fu_1876_p2 & tmp_16_fu_1854_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln106_reg_2870_pp0_iter3_reg == 1'd0) & (io_acc_block_signal_op331 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln106_reg_2870 == 1'd0) & (io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln106_reg_2870_pp0_iter3_reg == 1'd0) & (io_acc_block_signal_op331 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln106_reg_2870 == 1'd0) & (io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln106_reg_2870_pp0_iter3_reg == 1'd0) & (io_acc_block_signal_op331 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln106_reg_2870 == 1'd0) & (io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln106_reg_2870 == 1'd0) & (io_acc_block_signal_op21 == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln106_reg_2870_pp0_iter3_reg == 1'd0) & (io_acc_block_signal_op331 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln106_fu_1060_p2 = ((indvar_flatten_reg_322 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln768_1_fu_2246_p2 = ((tmp_32_fu_2230_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_2_fu_2390_p2 = ((p_Result_9_2_fu_2374_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_3_fu_2596_p2 = ((tmp_46_fu_2580_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_2040_p2 = ((tmp_24_fu_2024_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_2034_p2 = ((tmp_24_fu_2024_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_2224_p2 = ((tmp_31_fu_2214_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_2240_p2 = ((tmp_32_fu_2230_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_2368_p2 = ((p_Result_8_2_fu_2358_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_2384_p2 = ((p_Result_9_2_fu_2374_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_2574_p2 = ((tmp_45_fu_2564_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_7_fu_2590_p2 = ((tmp_46_fu_2580_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_2018_p2 = ((tmp_23_fu_2008_p4 == 2'd3) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op21 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign io_acc_block_signal_op331 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign mul_ln1118_1_fu_336_p1 = tmp_data_0_V_reg_2879;

assign mul_ln1118_1_fu_336_p2 = ($signed({{1'b0}, {13'd11}}) * $signed(mul_ln1118_1_fu_336_p1));

assign mul_ln1118_2_fu_338_p1 = tmp_data_1_V_reg_2888;

assign mul_ln1118_2_fu_338_p2 = ($signed(13'd8179) * $signed(mul_ln1118_2_fu_338_p1));

assign mul_ln1118_3_fu_337_p1 = sext_ln1116_fu_1384_p1;

assign mul_ln1118_3_fu_337_p2 = ($signed({{1'b0}, {16'd117}}) * $signed(mul_ln1118_3_fu_337_p1));

assign mul_ln1118_4_fu_335_p1 = sext_ln1116_fu_1384_p1;

assign mul_ln1118_4_fu_335_p2 = ($signed(16'd65422) * $signed(mul_ln1118_4_fu_335_p1));

assign mul_ln1118_5_fu_346_p1 = sext_ln1116_fu_1384_p1;

assign mul_ln1118_5_fu_346_p2 = ($signed({{1'b0}, {16'd92}}) * $signed(mul_ln1118_5_fu_346_p1));

assign mul_ln1118_6_fu_341_p1 = sext_ln1116_fu_1384_p1;

assign mul_ln1118_6_fu_341_p2 = ($signed({{1'b0}, {16'd90}}) * $signed(mul_ln1118_6_fu_341_p1));

assign mul_ln1118_7_fu_347_p1 = sext_ln1118_13_fu_1477_p1;

assign mul_ln1118_7_fu_347_p2 = ($signed({{1'b0}, {15'd49}}) * $signed(mul_ln1118_7_fu_347_p1));

assign mul_ln1118_8_fu_348_p1 = sext_ln1118_13_fu_1477_p1;

assign mul_ln1118_8_fu_348_p2 = ($signed(15'd32722) * $signed(mul_ln1118_8_fu_348_p1));

assign mul_ln1118_9_fu_333_p1 = tmp_data_3_V_reg_2901;

assign mul_ln1118_9_fu_333_p2 = ($signed(14'd16363) * $signed(mul_ln1118_9_fu_333_p1));

assign mul_ln1118_fu_342_p1 = tmp_data_0_V_reg_2879;

assign mul_ln1118_fu_342_p2 = ($signed({{1'b0}, {14'd23}}) * $signed(mul_ln1118_fu_342_p1));

assign or_ln1192_1_fu_1784_p3 = {{3'd4}, {add_ln1192_15_fu_1778_p2}};

assign or_ln340_10_fu_2830_p2 = (and_ln786_8_fu_2825_p2 | and_ln785_3_fu_2808_p2);

assign or_ln340_11_fu_2836_p2 = (xor_ln785_7_fu_2803_p2 | and_ln786_3_reg_3147);

assign or_ln340_12_fu_2841_p2 = (or_ln340_11_fu_2836_p2 | and_ln781_3_fu_2788_p2);

assign or_ln340_1_fu_2136_p2 = (and_ln786_5_fu_2130_p2 | and_ln785_fu_2106_p2);

assign or_ln340_2_fu_2636_p2 = (xor_ln785_1_reg_3022 | and_ln786_4_reg_3027);

assign or_ln340_3_fu_2640_p2 = (or_ln340_2_fu_2636_p2 | and_ln781_reg_3017);

assign or_ln340_4_fu_2713_p2 = (and_ln786_6_fu_2708_p2 | and_ln785_1_fu_2691_p2);

assign or_ln340_5_fu_2719_p2 = (xor_ln785_3_fu_2686_p2 | and_ln786_1_reg_3076);

assign or_ln340_6_fu_2724_p2 = (or_ln340_5_fu_2719_p2 | and_ln781_1_fu_2671_p2);

assign or_ln340_7_fu_2486_p2 = (and_ln786_7_fu_2480_p2 | and_ln785_2_fu_2456_p2);

assign or_ln340_8_fu_2753_p2 = (xor_ln785_5_reg_3093 | and_ln786_2_reg_3098);

assign or_ln340_9_fu_2757_p2 = (or_ln340_8_fu_2753_p2 | and_ln781_2_reg_3088);

assign or_ln340_fu_1900_p2 = (xor_ln340_1_fu_1894_p2 | tmp_17_fu_1868_p3);

assign or_ln785_1_fu_2681_p2 = (xor_ln785_2_fu_2675_p2 | tmp_30_reg_3060);

assign or_ln785_2_fu_2444_p2 = (xor_ln785_4_fu_2438_p2 | tmp_38_fu_2350_p3);

assign or_ln785_3_fu_2798_p2 = (xor_ln785_6_fu_2792_p2 | tmp_44_reg_3131);

assign or_ln785_fu_2094_p2 = (xor_ln785_fu_2088_p2 | tmp_22_fu_2000_p3);

assign or_ln786_1_fu_2697_p2 = (and_ln786_1_reg_3076 | and_ln781_1_fu_2671_p2);

assign or_ln786_2_fu_2468_p2 = (and_ln786_2_fu_2462_p2 | and_ln781_2_fu_2432_p2);

assign or_ln786_3_fu_2814_p2 = (and_ln786_3_reg_3147 | and_ln781_3_fu_2788_p2);

assign or_ln786_fu_2118_p2 = (and_ln786_4_fu_2112_p2 | and_ln781_fu_2082_p2);

assign or_ln_fu_1626_p3 = {{4'd8}, {add_ln1192_1_fu_1620_p2}};

assign p_Result_8_2_fu_2358_p4 = {{select_ln340_1_fu_1922_p3[15:13]}};

assign p_Result_9_2_fu_2374_p4 = {{select_ln340_1_fu_1922_p3[15:12]}};

assign res_V_data_0_V_din = ((or_ln340_3_fu_2640_p2[0:0] === 1'b1) ? select_ln340_2_fu_2645_p3 : select_ln388_fu_2651_p3);

assign res_V_data_1_V_din = ((or_ln340_6_fu_2724_p2[0:0] === 1'b1) ? select_ln340_4_fu_2730_p3 : select_ln388_1_fu_2737_p3);

assign res_V_data_2_V_din = ((or_ln340_9_fu_2757_p2[0:0] === 1'b1) ? select_ln340_6_fu_2762_p3 : select_ln388_2_fu_2768_p3);

assign res_V_data_3_V_din = ((or_ln340_12_fu_2841_p2[0:0] === 1'b1) ? select_ln340_8_fu_2847_p3 : select_ln388_3_fu_2854_p3);

assign select_ln340_1_fu_1922_p3 = ((or_ln340_fu_1900_p2[0:0] === 1'b1) ? select_ln340_fu_1906_p3 : acc_2_V_5_fu_1914_p3);

assign select_ln340_2_fu_2645_p3 = ((or_ln340_1_reg_3037[0:0] === 1'b1) ? 8'd127 : add_ln415_8_reg_3011);

assign select_ln340_4_fu_2730_p3 = ((or_ln340_4_fu_2713_p2[0:0] === 1'b1) ? 8'd127 : add_ln415_9_reg_3048);

assign select_ln340_6_fu_2762_p3 = ((or_ln340_7_reg_3108[0:0] === 1'b1) ? 8'd127 : add_ln415_10_reg_3082);

assign select_ln340_8_fu_2847_p3 = ((or_ln340_10_fu_2830_p2[0:0] === 1'b1) ? 8'd127 : add_ln415_11_reg_3119);

assign select_ln340_fu_1906_p3 = ((xor_ln340_fu_1888_p2[0:0] === 1'b1) ? 16'd32767 : acc_2_V_4_fu_1862_p2);

assign select_ln388_1_fu_2737_p3 = ((and_ln786_6_fu_2708_p2[0:0] === 1'b1) ? 8'd128 : add_ln415_9_reg_3048);

assign select_ln388_2_fu_2768_p3 = ((and_ln786_7_reg_3103[0:0] === 1'b1) ? 8'd128 : add_ln415_10_reg_3082);

assign select_ln388_3_fu_2854_p3 = ((and_ln786_8_fu_2825_p2[0:0] === 1'b1) ? 8'd128 : add_ln415_11_reg_3119);

assign select_ln388_fu_2651_p3 = ((and_ln786_5_reg_3032[0:0] === 1'b1) ? 8'd128 : add_ln415_8_reg_3011);

assign select_ln416_1_fu_2272_p3 = ((and_ln416_1_fu_2200_p2[0:0] === 1'b1) ? and_ln779_1_fu_2266_p2 : icmp_ln879_3_fu_2240_p2);

assign select_ln416_2_fu_2424_p3 = ((and_ln416_2_fu_2344_p2[0:0] === 1'b1) ? and_ln779_2_fu_2418_p2 : icmp_ln879_5_fu_2384_p2);

assign select_ln416_3_fu_2622_p3 = ((and_ln416_3_fu_2550_p2[0:0] === 1'b1) ? and_ln779_3_fu_2616_p2 : icmp_ln879_7_fu_2590_p2);

assign select_ln416_fu_2074_p3 = ((and_ln416_fu_1994_p2[0:0] === 1'b1) ? and_ln779_fu_2068_p2 : icmp_ln879_1_fu_2034_p2);

assign select_ln777_1_fu_2666_p3 = ((and_ln416_1_reg_3054[0:0] === 1'b1) ? icmp_ln879_3_reg_3065 : icmp_ln768_1_reg_3071);

assign select_ln777_2_fu_2396_p3 = ((and_ln416_2_fu_2344_p2[0:0] === 1'b1) ? icmp_ln879_5_fu_2384_p2 : icmp_ln768_2_fu_2390_p2);

assign select_ln777_3_fu_2783_p3 = ((and_ln416_3_reg_3125[0:0] === 1'b1) ? icmp_ln879_7_reg_3136 : icmp_ln768_3_reg_3142);

assign select_ln777_fu_2046_p3 = ((and_ln416_fu_1994_p2[0:0] === 1'b1) ? icmp_ln879_1_fu_2034_p2 : icmp_ln768_fu_2040_p2);

assign sext_ln1116_fu_1384_p1 = $signed(tmp_data_2_V_reg_2896);

assign sext_ln1118_10_fu_1335_p1 = $signed(add_ln415_fu_1329_p2);

assign sext_ln1118_11_fu_1346_p1 = $signed(shl_ln1118_4_fu_1339_p3);

assign sext_ln1118_13_fu_1477_p1 = tmp_data_3_V_reg_2901;

assign sext_ln1118_14_fu_1482_p1 = tmp_data_3_V_reg_2901;

assign sext_ln1118_15_fu_1574_p1 = $signed(shl_ln1118_5_fu_1567_p3);

assign sext_ln1118_16_fu_1451_p1 = $signed(tmp_10_fu_1441_p4);

assign sext_ln1118_17_fu_1715_p1 = $signed(add_ln415_4_reg_2959);

assign sext_ln1118_18_fu_1730_p1 = $signed(add_ln415_5_fu_1724_p2);

assign sext_ln1118_2_fu_1114_p1 = tmp_data_0_V_reg_2879;

assign sext_ln1118_3_fu_1182_p1 = $signed(shl_ln_fu_1175_p3);

assign sext_ln1118_4_fu_1193_p1 = $signed(shl_ln1118_1_fu_1186_p3);

assign sext_ln1118_5_fu_1213_p1 = $signed(trunc_ln708_2_fu_1203_p4);

assign sext_ln1118_7_fu_1250_p1 = $signed(shl_ln1118_2_fu_1243_p3);

assign sext_ln1118_8_fu_1261_p1 = shl_ln1118_3_fu_1254_p3;

assign sext_ln1118_9_fu_1265_p1 = shl_ln1118_3_fu_1254_p3;

assign sext_ln1192_1_fu_1762_p1 = $signed(add_ln1192_6_reg_2995);

assign sext_ln1192_2_fu_1771_p1 = $signed(add_ln1192_7_fu_1765_p2);

assign sext_ln1192_3_fu_1775_p1 = $signed(add_ln1192_14_reg_3000);

assign sext_ln1192_4_fu_1792_p1 = $signed(or_ln1192_1_fu_1784_p3);

assign sext_ln1192_5_fu_1806_p1 = $signed(add_ln1192_16_fu_1800_p2);

assign sext_ln1192_6_fu_1749_p1 = $signed(add_ln415_7_fu_1743_p2);

assign sext_ln1192_fu_1753_p1 = $signed(add_ln1192_2_reg_2990);

assign sext_ln415_10_fu_1495_p1 = $signed(trunc_ln708_10_fu_1485_p4);

assign sext_ln415_11_fu_1718_p1 = $signed(trunc_ln708_11_reg_2964);

assign sext_ln415_12_fu_1545_p1 = $signed(trunc_ln708_12_fu_1535_p4);

assign sext_ln415_13_fu_1734_p1 = add_ln415_6_reg_2974;

assign sext_ln415_14_fu_1737_p1 = $signed(trunc_ln708_13_reg_2980);

assign sext_ln415_1_fu_1159_p1 = $signed(trunc_ln708_1_fu_1149_p4);

assign sext_ln415_2_fu_1227_p1 = $signed(trunc_ln708_3_fu_1217_p4);

assign sext_ln415_3_fu_1285_p1 = $signed(trunc_ln708_4_fu_1275_p4);

assign sext_ln415_4_fu_1685_p1 = $signed(trunc_ln708_5_reg_2924);

assign sext_ln415_5_fu_1323_p1 = $signed(trunc_ln708_6_reg_2909);

assign sext_ln415_6_fu_1372_p1 = $signed(trunc_ln708_7_fu_1362_p4);

assign sext_ln415_7_fu_1401_p1 = $signed(trunc_ln708_8_fu_1391_p4);

assign sext_ln415_8_fu_1691_p1 = $signed(trunc_ln708_9_reg_2939);

assign sext_ln415_9_fu_1703_p1 = $signed(trunc_ln708_s_reg_2949);

assign sext_ln415_fu_1127_p1 = $signed(trunc_ln_fu_1117_p4);

assign sext_ln703_2_fu_1842_p1 = acc_2_V_2_reg_3005;

assign sext_ln703_3_fu_1845_p1 = add_ln415_6_reg_2974;

assign sext_ln703_fu_1666_p1 = $signed(acc_2_V_1_fu_1660_p2);

assign shl_ln1118_1_fu_1186_p3 = {{tmp_data_0_V_reg_2879}, {2'd0}};

assign shl_ln1118_2_fu_1243_p3 = {{tmp_data_1_V_reg_2888}, {3'd0}};

assign shl_ln1118_3_fu_1254_p3 = {{tmp_data_1_V_reg_2888}, {1'd0}};

assign shl_ln1118_4_fu_1339_p3 = {{tmp_data_1_V_reg_2888}, {4'd0}};

assign shl_ln1118_5_fu_1567_p3 = {{tmp_data_3_V_reg_2901}, {2'd0}};

assign shl_ln_fu_1175_p3 = {{tmp_data_0_V_reg_2879}, {4'd0}};

assign start_out = real_start;

assign sub_ln1118_1_fu_1197_p2 = ($signed(sext_ln1118_4_fu_1193_p1) - $signed(sext_ln1118_3_fu_1182_p1));

assign sub_ln1118_2_fu_1350_p2 = ($signed(13'd0) - $signed(sext_ln1118_11_fu_1346_p1));

assign sub_ln1118_3_fu_1356_p2 = ($signed(sub_ln1118_2_fu_1350_p2) - $signed(sext_ln1118_9_fu_1265_p1));

assign sub_ln1118_4_fu_1578_p2 = ($signed(11'd0) - $signed(sext_ln1118_15_fu_1574_p1));

assign sub_ln1118_5_fu_1584_p2 = ($signed(sub_ln1118_4_fu_1578_p2) - $signed(sext_ln1118_14_fu_1482_p1));

assign sub_ln1118_fu_1143_p2 = ($signed(9'd0) - $signed(sext_ln1118_2_fu_1114_p1));

assign tmp_10_fu_1441_p4 = {{mul_ln1118_5_fu_346_p2[15:2]}};

assign tmp_12_fu_1499_p3 = mul_ln1118_7_fu_347_p2[32'd1];

assign tmp_14_fu_1549_p3 = mul_ln1118_9_fu_333_p2[32'd1];

assign tmp_16_fu_1854_p3 = add_ln1192_12_fu_1848_p2[32'd16];

assign tmp_17_fu_1868_p3 = acc_2_V_4_fu_1862_p2[32'd15];

assign tmp_18_fu_1936_p3 = acc_0_V_1_fu_1830_p2[32'd14];

assign tmp_19_fu_1954_p3 = acc_0_V_1_fu_1830_p2[32'd11];

assign tmp_20_fu_1962_p3 = acc_0_V_1_fu_1830_p2[32'd3];

assign tmp_21_fu_1980_p3 = add_ln415_8_fu_1974_p2[32'd7];

assign tmp_22_fu_2000_p3 = add_ln415_8_fu_1974_p2[32'd7];

assign tmp_23_fu_2008_p4 = {{acc_0_V_1_fu_1830_p2[14:13]}};

assign tmp_24_fu_2024_p4 = {{acc_0_V_1_fu_1830_p2[14:12]}};

assign tmp_25_fu_2054_p3 = acc_0_V_1_fu_1830_p2[32'd12];

assign tmp_27_fu_2160_p3 = acc_1_V_1_fu_1836_p2[32'd11];

assign tmp_28_fu_2168_p3 = acc_1_V_1_fu_1836_p2[32'd3];

assign tmp_29_fu_2186_p3 = add_ln415_9_fu_2180_p2[32'd7];

assign tmp_2_fu_1163_p3 = sub_ln1118_fu_1143_p2[32'd1];

assign tmp_30_fu_2206_p3 = add_ln415_9_fu_2180_p2[32'd7];

assign tmp_31_fu_2214_p4 = {{acc_1_V_1_fu_1836_p2[14:13]}};

assign tmp_32_fu_2230_p4 = {{acc_1_V_1_fu_1836_p2[14:12]}};

assign tmp_33_fu_2252_p3 = acc_1_V_1_fu_1836_p2[32'd12];

assign tmp_34_fu_2286_p3 = select_ln340_1_fu_1922_p3[32'd15];

assign tmp_35_fu_2304_p3 = select_ln340_1_fu_1922_p3[32'd11];

assign tmp_36_fu_2312_p3 = select_ln340_1_fu_1922_p3[32'd3];

assign tmp_37_fu_2330_p3 = add_ln415_10_fu_2324_p2[32'd7];

assign tmp_38_fu_2350_p3 = add_ln415_10_fu_2324_p2[32'd7];

assign tmp_39_fu_2404_p3 = select_ln340_1_fu_1922_p3[32'd12];

assign tmp_41_fu_2510_p3 = acc_3_V_1_fu_1930_p2[32'd11];

assign tmp_42_fu_2518_p3 = acc_3_V_1_fu_1930_p2[32'd3];

assign tmp_43_fu_2536_p3 = add_ln415_11_fu_2530_p2[32'd7];

assign tmp_44_fu_2556_p3 = add_ln415_11_fu_2530_p2[32'd7];

assign tmp_45_fu_2564_p4 = {{acc_3_V_1_fu_1930_p2[14:13]}};

assign tmp_46_fu_2580_p4 = {{acc_3_V_1_fu_1930_p2[14:12]}};

assign tmp_47_fu_2602_p3 = acc_3_V_1_fu_1930_p2[32'd12];

assign tmp_4_fu_1289_p3 = add_ln1118_fu_1269_p2[32'd1];

assign tmp_5_fu_1311_p3 = mul_ln1118_2_fu_338_p2[32'd1];

assign tmp_6_fu_1098_p1 = data_V_data_1_V_dout;

assign tmp_8_fu_1405_p3 = mul_ln1118_3_fu_337_p2[32'd1];

assign tmp_fu_1131_p3 = mul_ln1118_fu_342_p2[32'd1];

assign trunc_ln708_10_fu_1485_p4 = {{mul_ln1118_7_fu_347_p2[14:2]}};

assign trunc_ln708_12_fu_1535_p4 = {{mul_ln1118_9_fu_333_p2[13:2]}};

assign trunc_ln708_14_fu_1944_p4 = {{acc_0_V_1_fu_1830_p2[11:4]}};

assign trunc_ln708_15_fu_2150_p4 = {{acc_1_V_1_fu_1836_p2[11:4]}};

assign trunc_ln708_16_fu_2294_p4 = {{select_ln340_1_fu_1922_p3[11:4]}};

assign trunc_ln708_17_fu_2500_p4 = {{acc_3_V_1_fu_1930_p2[11:4]}};

assign trunc_ln708_1_fu_1149_p4 = {{sub_ln1118_fu_1143_p2[8:2]}};

assign trunc_ln708_2_fu_1203_p4 = {{sub_ln1118_1_fu_1197_p2[12:2]}};

assign trunc_ln708_3_fu_1217_p4 = {{mul_ln1118_1_fu_336_p2[12:2]}};

assign trunc_ln708_4_fu_1275_p4 = {{add_ln1118_fu_1269_p2[11:2]}};

assign trunc_ln708_6_fu_1088_p1 = data_V_data_1_V_dout;

assign trunc_ln708_7_fu_1362_p4 = {{sub_ln1118_3_fu_1356_p2[12:2]}};

assign trunc_ln708_8_fu_1391_p4 = {{mul_ln1118_3_fu_337_p2[15:2]}};

assign trunc_ln_fu_1117_p4 = {{mul_ln1118_fu_342_p2[13:2]}};

assign xor_ln340_1_fu_1894_p2 = (tmp_16_fu_1854_p3 ^ 1'd1);

assign xor_ln340_fu_1888_p2 = (tmp_17_fu_1868_p3 ^ tmp_16_fu_1854_p3);

assign xor_ln416_1_fu_2194_p2 = (tmp_29_fu_2186_p3 ^ 1'd1);

assign xor_ln416_2_fu_2338_p2 = (tmp_37_fu_2330_p3 ^ 1'd1);

assign xor_ln416_3_fu_2544_p2 = (tmp_43_fu_2536_p3 ^ 1'd1);

assign xor_ln416_fu_1988_p2 = (tmp_21_fu_1980_p3 ^ 1'd1);

assign xor_ln779_1_fu_2260_p2 = (tmp_33_fu_2252_p3 ^ 1'd1);

assign xor_ln779_2_fu_2412_p2 = (tmp_39_fu_2404_p3 ^ 1'd1);

assign xor_ln779_3_fu_2610_p2 = (tmp_47_fu_2602_p3 ^ 1'd1);

assign xor_ln779_fu_2062_p2 = (tmp_25_fu_2054_p3 ^ 1'd1);

assign xor_ln785_1_fu_2100_p2 = (tmp_18_fu_1936_p3 ^ 1'd1);

assign xor_ln785_2_fu_2675_p2 = (select_ln777_1_fu_2666_p3 ^ 1'd1);

assign xor_ln785_3_fu_2686_p2 = (tmp_26_reg_3042 ^ 1'd1);

assign xor_ln785_4_fu_2438_p2 = (select_ln777_2_fu_2396_p3 ^ 1'd1);

assign xor_ln785_5_fu_2450_p2 = (tmp_34_fu_2286_p3 ^ 1'd1);

assign xor_ln785_6_fu_2792_p2 = (select_ln777_3_fu_2783_p3 ^ 1'd1);

assign xor_ln785_7_fu_2803_p2 = (tmp_40_reg_3113 ^ 1'd1);

assign xor_ln785_fu_2088_p2 = (select_ln777_fu_2046_p3 ^ 1'd1);

assign xor_ln786_1_fu_2124_p2 = (or_ln786_fu_2118_p2 ^ 1'd1);

assign xor_ln786_2_fu_2702_p2 = (or_ln786_1_fu_2697_p2 ^ 1'd1);

assign xor_ln786_3_fu_2474_p2 = (or_ln786_2_fu_2468_p2 ^ 1'd1);

assign xor_ln786_4_fu_2819_p2 = (or_ln786_3_fu_2814_p2 ^ 1'd1);

assign xor_ln786_fu_1876_p2 = (tmp_17_fu_1868_p3 ^ 1'd1);

assign zext_ln1116_fu_1688_p1 = tmp_7_reg_2929;

assign zext_ln1118_1_fu_1171_p1 = tmp_2_fu_1163_p3;

assign zext_ln1118_2_fu_1682_p1 = tmp_3_reg_2919;

assign zext_ln1118_3_fu_1297_p1 = tmp_4_fu_1289_p3;

assign zext_ln1118_fu_1139_p1 = tmp_fu_1131_p3;

assign zext_ln1192_1_fu_1650_p1 = add_ln1192_5_fu_1644_p2;

assign zext_ln1192_2_fu_1796_p1 = $unsigned(sext_ln1192_4_fu_1792_p1);

assign zext_ln1192_fu_1634_p1 = or_ln_fu_1626_p3;

assign zext_ln415_10_fu_2320_p1 = tmp_36_fu_2312_p3;

assign zext_ln415_11_fu_2526_p1 = tmp_42_fu_2518_p3;

assign zext_ln415_1_fu_1413_p1 = tmp_8_fu_1405_p3;

assign zext_ln415_2_fu_1694_p1 = tmp_9_reg_2944;

assign zext_ln415_3_fu_1706_p1 = tmp_11_reg_2954;

assign zext_ln415_4_fu_1507_p1 = tmp_12_fu_1499_p3;

assign zext_ln415_5_fu_1721_p1 = tmp_13_reg_2969;

assign zext_ln415_6_fu_1557_p1 = tmp_14_fu_1549_p3;

assign zext_ln415_7_fu_1740_p1 = tmp_15_reg_2985;

assign zext_ln415_8_fu_1970_p1 = tmp_20_fu_1962_p3;

assign zext_ln415_9_fu_2176_p1 = tmp_28_fu_2168_p3;

assign zext_ln415_fu_1326_p1 = tmp_6_reg_2914;

assign zext_ln708_fu_1319_p1 = tmp_5_fu_1311_p3;

endmodule //pointwise_conv_2d_cl_array_array_ap_fixed_8_2_0_0_0_4u_config51_s
