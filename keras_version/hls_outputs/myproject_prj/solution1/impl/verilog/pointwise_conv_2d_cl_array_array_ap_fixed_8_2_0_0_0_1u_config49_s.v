// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv_2d_cl_array_array_ap_fixed_8_2_0_0_0_1u_config49_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_V_din,
        res_V_data_V_full_n,
        res_V_data_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [7:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [7:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [7:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [7:0] res_V_data_V_din;
input   res_V_data_V_full_n;
output   res_V_data_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln106_reg_724;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln106_reg_724_pp0_iter3_reg;
reg   [12:0] indvar_flatten_reg_193;
wire   [0:0] icmp_ln106_fu_278_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op18;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln106_reg_724_pp0_iter1_reg;
reg   [0:0] icmp_ln106_reg_724_pp0_iter2_reg;
wire   [12:0] add_ln106_fu_284_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_data_0_V_reg_733;
reg   [7:0] tmp_data_1_V_reg_738;
reg   [7:0] tmp_data_2_V_reg_743;
reg  signed [7:0] tmp_data_3_V_reg_748;
reg   [0:0] tmp_99_reg_754;
reg   [0:0] tmp_100_reg_759;
reg   [11:0] trunc_ln708_33_reg_764;
reg   [0:0] tmp_101_reg_769;
reg   [9:0] trunc_ln708_34_reg_774;
reg   [0:0] tmp_102_reg_779;
wire   [13:0] add_ln1192_35_fu_418_p2;
reg   [13:0] add_ln1192_35_reg_784;
reg   [0:0] p_Result_s_reg_789;
wire   [7:0] p_Val2_2_fu_531_p2;
reg   [7:0] p_Val2_2_reg_795;
wire   [0:0] carry_2_fu_551_p2;
reg   [0:0] carry_2_reg_801;
wire   [0:0] p_Result_4_fu_557_p3;
reg   [0:0] p_Result_4_reg_807;
wire   [0:0] Range1_all_ones_fu_591_p2;
reg   [0:0] Range1_all_ones_reg_812;
wire   [0:0] Range1_all_zeros_fu_597_p2;
reg   [0:0] Range1_all_zeros_reg_818;
wire   [0:0] and_ln786_fu_631_p2;
reg   [0:0] and_ln786_reg_823;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_01001;
wire  signed [7:0] mul_ln1118_fu_204_p1;
wire  signed [7:0] mul_ln1118_14_fu_206_p1;
wire  signed [7:0] mul_ln1118_15_fu_207_p1;
wire   [14:0] mul_ln1118_fu_204_p2;
wire   [12:0] trunc_ln_fu_310_p4;
wire   [14:0] mul_ln1118_14_fu_206_p2;
wire   [12:0] trunc_ln708_s_fu_336_p4;
wire   [13:0] mul_ln1118_15_fu_207_p2;
wire   [10:0] shl_ln_fu_383_p3;
wire  signed [11:0] sext_ln1118_49_fu_390_p1;
wire  signed [11:0] sext_ln1118_48_fu_380_p1;
wire   [11:0] sub_ln1118_fu_394_p2;
wire  signed [13:0] sext_ln415_fu_320_p1;
wire  signed [13:0] sext_ln415_27_fu_346_p1;
wire   [12:0] zext_ln415_fu_433_p1;
wire  signed [12:0] sext_ln415_28_fu_430_p1;
wire   [12:0] add_ln415_fu_436_p2;
wire   [10:0] zext_ln415_16_fu_449_p1;
wire  signed [10:0] sext_ln415_30_fu_446_p1;
wire   [10:0] add_ln415_16_fu_452_p2;
wire   [1:0] zext_ln1118_fu_424_p1;
wire   [1:0] zext_ln1118_13_fu_427_p1;
wire   [1:0] add_ln1192_fu_465_p2;
wire  signed [14:0] sext_ln1192_fu_462_p1;
wire   [14:0] zext_ln1192_fu_471_p1;
wire   [14:0] add_ln1192_36_fu_475_p2;
wire  signed [14:0] sext_ln415_29_fu_442_p1;
wire  signed [14:0] sext_ln415_31_fu_458_p1;
wire   [14:0] acc_0_V_fu_481_p2;
wire   [14:0] acc_0_V_7_fu_487_p2;
wire   [0:0] tmp_105_fu_519_p3;
wire   [7:0] zext_ln415_17_fu_527_p1;
wire   [7:0] p_Val2_s_fu_501_p4;
wire   [0:0] tmp_106_fu_537_p3;
wire   [0:0] p_Result_3_fu_511_p3;
wire   [0:0] xor_ln416_fu_545_p2;
wire   [1:0] tmp_fu_565_p4;
wire   [2:0] tmp_2_fu_581_p4;
wire   [0:0] tmp_108_fu_603_p3;
wire   [0:0] Range2_all_ones_fu_575_p2;
wire   [0:0] xor_ln779_fu_611_p2;
wire   [0:0] and_ln779_fu_617_p2;
wire   [0:0] deleted_ones_fu_623_p3;
wire   [0:0] deleted_zeros_fu_637_p3;
wire   [0:0] xor_ln785_7_fu_646_p2;
wire   [0:0] or_ln785_4_fu_652_p2;
wire   [0:0] xor_ln785_8_fu_657_p2;
wire   [0:0] and_ln781_fu_642_p2;
wire   [0:0] or_ln786_fu_668_p2;
wire   [0:0] xor_ln786_fu_673_p2;
wire   [0:0] underflow_fu_679_p2;
wire   [0:0] overflow_fu_662_p2;
wire   [0:0] or_ln340_fu_690_p2;
wire   [0:0] or_ln340_4_fu_684_p2;
wire   [0:0] or_ln340_24_fu_695_p2;
wire   [7:0] select_ln340_fu_701_p3;
wire   [7:0] select_ln388_fu_708_p3;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_fu_278_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_193 <= add_ln106_fu_284_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_193 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_reg_724_pp0_iter2_reg == 1'd0))) begin
        Range1_all_ones_reg_812 <= Range1_all_ones_fu_591_p2;
        Range1_all_zeros_reg_818 <= Range1_all_zeros_fu_597_p2;
        and_ln786_reg_823 <= and_ln786_fu_631_p2;
        carry_2_reg_801 <= carry_2_fu_551_p2;
        p_Result_4_reg_807 <= p_Val2_2_fu_531_p2[32'd7];
        p_Result_s_reg_789 <= acc_0_V_7_fu_487_p2[32'd14];
        p_Val2_2_reg_795 <= p_Val2_2_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_reg_724_pp0_iter1_reg == 1'd0))) begin
        add_ln1192_35_reg_784 <= add_ln1192_35_fu_418_p2;
        tmp_100_reg_759 <= mul_ln1118_14_fu_206_p2[32'd1];
        tmp_101_reg_769 <= mul_ln1118_15_fu_207_p2[32'd1];
        tmp_102_reg_779 <= sub_ln1118_fu_394_p2[32'd1];
        tmp_99_reg_754 <= mul_ln1118_fu_204_p2[32'd1];
        trunc_ln708_33_reg_764 <= {{mul_ln1118_15_fu_207_p2[13:2]}};
        trunc_ln708_34_reg_774 <= {{sub_ln1118_fu_394_p2[11:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln106_reg_724 <= icmp_ln106_fu_278_p2;
        icmp_ln106_reg_724_pp0_iter1_reg <= icmp_ln106_reg_724;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln106_reg_724_pp0_iter2_reg <= icmp_ln106_reg_724_pp0_iter1_reg;
        icmp_ln106_reg_724_pp0_iter3_reg <= icmp_ln106_reg_724_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_reg_724 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_reg_733 <= data_V_data_0_V_dout;
        tmp_data_1_V_reg_738 <= data_V_data_1_V_dout;
        tmp_data_2_V_reg_743 <= data_V_data_2_V_dout;
        tmp_data_3_V_reg_748 <= data_V_data_3_V_dout;
    end
end

always @ (*) begin
    if ((icmp_ln106_fu_278_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_724 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_reg_724 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_724 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_reg_724 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_724 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_reg_724 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_724 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_reg_724 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_724_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_V_blk_n = res_V_data_V_full_n;
    end else begin
        res_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_reg_724_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_V_write = 1'b1;
    end else begin
        res_V_data_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln106_fu_278_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln106_fu_278_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_591_p2 = ((tmp_2_fu_581_p4 == 3'd7) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_597_p2 = ((tmp_2_fu_581_p4 == 3'd0) ? 1'b1 : 1'b0);

assign Range2_all_ones_fu_575_p2 = ((tmp_fu_565_p4 == 2'd3) ? 1'b1 : 1'b0);

assign acc_0_V_7_fu_487_p2 = ($signed(sext_ln415_31_fu_458_p1) + $signed(acc_0_V_fu_481_p2));

assign acc_0_V_fu_481_p2 = ($signed(add_ln1192_36_fu_475_p2) + $signed(sext_ln415_29_fu_442_p1));

assign add_ln106_fu_284_p2 = (indvar_flatten_reg_193 + 13'd1);

assign add_ln1192_35_fu_418_p2 = ($signed(sext_ln415_fu_320_p1) + $signed(sext_ln415_27_fu_346_p1));

assign add_ln1192_36_fu_475_p2 = ($signed(sext_ln1192_fu_462_p1) + $signed(zext_ln1192_fu_471_p1));

assign add_ln1192_fu_465_p2 = (zext_ln1118_fu_424_p1 + zext_ln1118_13_fu_427_p1);

assign add_ln415_16_fu_452_p2 = ($signed(zext_ln415_16_fu_449_p1) + $signed(sext_ln415_30_fu_446_p1));

assign add_ln415_fu_436_p2 = ($signed(zext_ln415_fu_433_p1) + $signed(sext_ln415_28_fu_430_p1));

assign and_ln779_fu_617_p2 = (xor_ln779_fu_611_p2 & Range2_all_ones_fu_575_p2);

assign and_ln781_fu_642_p2 = (carry_2_reg_801 & Range1_all_ones_reg_812);

assign and_ln786_fu_631_p2 = (p_Result_4_fu_557_p3 & deleted_ones_fu_623_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln106_reg_724_pp0_iter3_reg == 1'd0) & (res_V_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln106_reg_724 == 1'd0) & (io_acc_block_signal_op18 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln106_reg_724_pp0_iter3_reg == 1'd0) & (res_V_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln106_reg_724 == 1'd0) & (io_acc_block_signal_op18 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln106_reg_724_pp0_iter3_reg == 1'd0) & (res_V_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln106_reg_724 == 1'd0) & (io_acc_block_signal_op18 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln106_reg_724 == 1'd0) & (io_acc_block_signal_op18 == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln106_reg_724_pp0_iter3_reg == 1'd0) & (res_V_data_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign carry_2_fu_551_p2 = (xor_ln416_fu_545_p2 & p_Result_3_fu_511_p3);

assign deleted_ones_fu_623_p3 = ((carry_2_fu_551_p2[0:0] === 1'b1) ? and_ln779_fu_617_p2 : Range1_all_ones_fu_591_p2);

assign deleted_zeros_fu_637_p3 = ((carry_2_reg_801[0:0] === 1'b1) ? Range1_all_ones_reg_812 : Range1_all_zeros_reg_818);

assign icmp_ln106_fu_278_p2 = ((indvar_flatten_reg_193 == 13'd4096) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op18 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign mul_ln1118_14_fu_206_p1 = tmp_data_1_V_reg_738;

assign mul_ln1118_14_fu_206_p2 = ($signed(15'd32731) * $signed(mul_ln1118_14_fu_206_p1));

assign mul_ln1118_15_fu_207_p1 = tmp_data_2_V_reg_743;

assign mul_ln1118_15_fu_207_p2 = ($signed(14'd16359) * $signed(mul_ln1118_15_fu_207_p1));

assign mul_ln1118_fu_204_p1 = tmp_data_0_V_reg_733;

assign mul_ln1118_fu_204_p2 = ($signed(15'd32733) * $signed(mul_ln1118_fu_204_p1));

assign or_ln340_24_fu_695_p2 = (or_ln340_fu_690_p2 | and_ln781_fu_642_p2);

assign or_ln340_4_fu_684_p2 = (underflow_fu_679_p2 | overflow_fu_662_p2);

assign or_ln340_fu_690_p2 = (xor_ln785_8_fu_657_p2 | and_ln786_reg_823);

assign or_ln785_4_fu_652_p2 = (xor_ln785_7_fu_646_p2 | p_Result_4_reg_807);

assign or_ln786_fu_668_p2 = (and_ln786_reg_823 | and_ln781_fu_642_p2);

assign overflow_fu_662_p2 = (xor_ln785_8_fu_657_p2 & or_ln785_4_fu_652_p2);

assign p_Result_3_fu_511_p3 = acc_0_V_7_fu_487_p2[32'd11];

assign p_Result_4_fu_557_p3 = p_Val2_2_fu_531_p2[32'd7];

assign p_Val2_2_fu_531_p2 = (zext_ln415_17_fu_527_p1 + p_Val2_s_fu_501_p4);

assign p_Val2_s_fu_501_p4 = {{acc_0_V_7_fu_487_p2[11:4]}};

assign res_V_data_V_din = ((or_ln340_24_fu_695_p2[0:0] === 1'b1) ? select_ln340_fu_701_p3 : select_ln388_fu_708_p3);

assign select_ln340_fu_701_p3 = ((or_ln340_4_fu_684_p2[0:0] === 1'b1) ? 8'd127 : p_Val2_2_reg_795);

assign select_ln388_fu_708_p3 = ((underflow_fu_679_p2[0:0] === 1'b1) ? 8'd128 : p_Val2_2_reg_795);

assign sext_ln1118_48_fu_380_p1 = tmp_data_3_V_reg_748;

assign sext_ln1118_49_fu_390_p1 = $signed(shl_ln_fu_383_p3);

assign sext_ln1192_fu_462_p1 = $signed(add_ln1192_35_reg_784);

assign sext_ln415_27_fu_346_p1 = $signed(trunc_ln708_s_fu_336_p4);

assign sext_ln415_28_fu_430_p1 = $signed(trunc_ln708_33_reg_764);

assign sext_ln415_29_fu_442_p1 = $signed(add_ln415_fu_436_p2);

assign sext_ln415_30_fu_446_p1 = $signed(trunc_ln708_34_reg_774);

assign sext_ln415_31_fu_458_p1 = $signed(add_ln415_16_fu_452_p2);

assign sext_ln415_fu_320_p1 = $signed(trunc_ln_fu_310_p4);

assign shl_ln_fu_383_p3 = {{tmp_data_3_V_reg_748}, {3'd0}};

assign sub_ln1118_fu_394_p2 = ($signed(sext_ln1118_49_fu_390_p1) - $signed(sext_ln1118_48_fu_380_p1));

assign tmp_105_fu_519_p3 = acc_0_V_7_fu_487_p2[32'd3];

assign tmp_106_fu_537_p3 = p_Val2_2_fu_531_p2[32'd7];

assign tmp_108_fu_603_p3 = acc_0_V_7_fu_487_p2[32'd12];

assign tmp_2_fu_581_p4 = {{acc_0_V_7_fu_487_p2[14:12]}};

assign tmp_fu_565_p4 = {{acc_0_V_7_fu_487_p2[14:13]}};

assign trunc_ln708_s_fu_336_p4 = {{mul_ln1118_14_fu_206_p2[14:2]}};

assign trunc_ln_fu_310_p4 = {{mul_ln1118_fu_204_p2[14:2]}};

assign underflow_fu_679_p2 = (xor_ln786_fu_673_p2 & p_Result_s_reg_789);

assign xor_ln416_fu_545_p2 = (tmp_106_fu_537_p3 ^ 1'd1);

assign xor_ln779_fu_611_p2 = (tmp_108_fu_603_p3 ^ 1'd1);

assign xor_ln785_7_fu_646_p2 = (deleted_zeros_fu_637_p3 ^ 1'd1);

assign xor_ln785_8_fu_657_p2 = (p_Result_s_reg_789 ^ 1'd1);

assign xor_ln786_fu_673_p2 = (or_ln786_fu_668_p2 ^ 1'd1);

assign zext_ln1118_13_fu_427_p1 = tmp_100_reg_759;

assign zext_ln1118_fu_424_p1 = tmp_99_reg_754;

assign zext_ln1192_fu_471_p1 = add_ln1192_fu_465_p2;

assign zext_ln415_16_fu_449_p1 = tmp_102_reg_779;

assign zext_ln415_17_fu_527_p1 = tmp_105_fu_519_p3;

assign zext_ln415_fu_433_p1 = tmp_101_reg_769;

endmodule //pointwise_conv_2d_cl_array_array_ap_fixed_8_2_0_0_0_1u_config49_s
