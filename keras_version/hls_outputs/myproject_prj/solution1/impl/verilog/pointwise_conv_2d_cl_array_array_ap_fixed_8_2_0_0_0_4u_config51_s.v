// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv_2d_cl_array_array_ap_fixed_8_2_0_0_0_4u_config51_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [7:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [7:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [7:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [7:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [7:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [7:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [7:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln106_reg_2460;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln106_reg_2460_pp0_iter3_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [12:0] indvar_flatten_reg_280;
wire   [0:0] icmp_ln106_fu_805_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op21;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    io_acc_block_signal_op305;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln106_reg_2460_pp0_iter1_reg;
reg   [0:0] icmp_ln106_reg_2460_pp0_iter2_reg;
wire   [12:0] add_ln106_fu_811_p2;
reg    ap_enable_reg_pp0_iter0;
reg  signed [7:0] tmp_data_0_V_reg_2469;
reg  signed [7:0] tmp_data_1_V_reg_2476;
reg  signed [7:0] tmp_data_2_V_reg_2485;
reg  signed [7:0] tmp_data_3_V_reg_2494;
reg  signed [7:0] tmp_data_3_V_reg_2494_pp0_iter2_reg;
reg   [5:0] trunc_ln708_1_reg_2502;
reg   [0:0] tmp_5_reg_2507;
reg   [0:0] tmp_2_reg_2512;
reg   [0:0] tmp_9_reg_2517;
reg   [11:0] trunc_ln708_7_reg_2522;
reg  signed [11:0] trunc_ln708_8_reg_2527;
reg   [12:0] trunc_ln708_9_reg_2533;
reg   [10:0] trunc_ln708_s_reg_2538;
reg   [0:0] tmp_13_reg_2543;
reg   [12:0] trunc_ln708_10_reg_2548;
reg   [0:0] tmp_14_reg_2553;
reg  signed [12:0] trunc_ln708_11_reg_2558;
reg   [10:0] trunc_ln708_12_reg_2564;
reg   [0:0] tmp_16_reg_2569;
wire   [13:0] add_ln1192_fu_1302_p2;
reg   [13:0] add_ln1192_reg_2574;
wire   [13:0] add_ln1192_6_fu_1324_p2;
reg   [13:0] add_ln1192_6_reg_2579;
wire   [11:0] add_ln1192_8_fu_1330_p2;
reg   [11:0] add_ln1192_8_reg_2584;
wire   [1:0] add_ln1192_11_fu_1342_p2;
reg   [1:0] add_ln1192_11_reg_2589;
wire  signed [6:0] add_ln1192_17_fu_1348_p2;
reg  signed [6:0] add_ln1192_17_reg_2594;
reg   [0:0] tmp_18_reg_2600;
wire   [7:0] add_ln415_fu_1593_p2;
reg   [7:0] add_ln415_reg_2606;
wire   [0:0] and_ln416_fu_1613_p2;
reg   [0:0] and_ln416_reg_2612;
wire   [0:0] tmp_22_fu_1619_p3;
reg   [0:0] tmp_22_reg_2618;
wire   [0:0] icmp_ln879_1_fu_1653_p2;
reg   [0:0] icmp_ln879_1_reg_2623;
wire   [0:0] icmp_ln768_fu_1659_p2;
reg   [0:0] icmp_ln768_reg_2629;
wire   [0:0] and_ln786_fu_1693_p2;
reg   [0:0] and_ln786_reg_2634;
wire   [7:0] add_ln415_5_fu_1737_p2;
reg   [7:0] add_ln415_5_reg_2640;
wire   [0:0] and_ln781_1_fu_1837_p2;
reg   [0:0] and_ln781_1_reg_2646;
wire   [0:0] xor_ln785_3_fu_1855_p2;
reg   [0:0] xor_ln785_3_reg_2651;
wire   [0:0] and_ln786_1_fu_1867_p2;
reg   [0:0] and_ln786_1_reg_2656;
wire   [0:0] and_ln786_5_fu_1885_p2;
reg   [0:0] and_ln786_5_reg_2661;
wire   [0:0] or_ln340_3_fu_1891_p2;
reg   [0:0] or_ln340_3_reg_2666;
reg   [0:0] tmp_31_reg_2671;
wire   [7:0] add_ln415_6_fu_1935_p2;
reg   [7:0] add_ln415_6_reg_2677;
wire   [0:0] and_ln416_2_fu_1955_p2;
reg   [0:0] and_ln416_2_reg_2683;
wire   [0:0] tmp_35_fu_1961_p3;
reg   [0:0] tmp_35_reg_2689;
wire   [0:0] icmp_ln879_3_fu_1987_p2;
reg   [0:0] icmp_ln879_3_reg_2694;
wire   [0:0] icmp_ln768_2_fu_1993_p2;
reg   [0:0] icmp_ln768_2_reg_2700;
wire   [0:0] and_ln786_2_fu_2027_p2;
reg   [0:0] and_ln786_2_reg_2705;
reg   [0:0] tmp_38_reg_2711;
wire   [7:0] add_ln415_7_fu_2071_p2;
reg   [7:0] add_ln415_7_reg_2717;
wire   [0:0] and_ln416_3_fu_2091_p2;
reg   [0:0] and_ln416_3_reg_2723;
wire   [0:0] tmp_42_fu_2097_p3;
reg   [0:0] tmp_42_reg_2729;
wire   [0:0] icmp_ln879_4_fu_2123_p2;
reg   [0:0] icmp_ln879_4_reg_2734;
wire   [0:0] icmp_ln768_3_fu_2129_p2;
reg   [0:0] icmp_ln768_3_reg_2740;
wire   [0:0] and_ln786_3_fu_2163_p2;
reg   [0:0] and_ln786_3_reg_2745;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_01001;
wire  signed [7:0] mul_ln1118_fu_292_p1;
wire  signed [7:0] mul_ln1118_1_fu_293_p1;
wire  signed [7:0] mul_ln1118_2_fu_296_p1;
wire  signed [7:0] mul_ln1118_5_fu_300_p1;
wire  signed [14:0] sext_ln1118_16_fu_1205_p1;
wire  signed [7:0] mul_ln1118_3_fu_303_p1;
wire  signed [7:0] mul_ln1118_6_fu_305_p1;
wire  signed [7:0] mul_ln1118_4_fu_306_p1;
wire  signed [7:0] trunc_ln708_1_fu_833_p1;
wire  signed [7:0] tmp_5_fu_843_p1;
wire   [14:0] mul_ln1118_fu_292_p2;
wire   [12:0] trunc_ln_fu_863_p4;
wire  signed [6:0] sext_ln415_1_fu_885_p1;
wire   [6:0] zext_ln415_fu_888_p1;
wire   [12:0] mul_ln1118_1_fu_293_p2;
wire   [10:0] trunc_ln708_2_fu_897_p4;
wire   [0:0] tmp_7_fu_911_p3;
wire   [13:0] mul_ln1118_2_fu_296_p2;
wire   [11:0] trunc_ln708_3_fu_923_p4;
wire   [0:0] tmp_8_fu_937_p3;
wire   [9:0] shl_ln_fu_956_p3;
wire  signed [10:0] sext_ln1118_5_fu_963_p1;
wire  signed [10:0] sext_ln1118_4_fu_953_p1;
wire   [10:0] add_ln1118_fu_967_p2;
wire   [8:0] trunc_ln708_4_fu_973_p4;
wire   [11:0] shl_ln1118_1_fu_995_p3;
wire  signed [12:0] sext_ln1118_6_fu_1002_p1;
wire   [8:0] shl_ln1118_2_fu_1012_p3;
wire   [12:0] sub_ln1118_fu_1006_p2;
wire  signed [12:0] sext_ln1118_7_fu_1019_p1;
wire   [12:0] sub_ln1118_1_fu_1023_p2;
wire   [10:0] trunc_ln708_5_fu_1029_p4;
wire   [0:0] tmp_10_fu_1043_p3;
wire   [14:0] mul_ln1118_3_fu_303_p2;
wire   [12:0] trunc_ln708_6_fu_1055_p4;
wire   [0:0] tmp_11_fu_1069_p3;
wire   [12:0] shl_ln1118_3_fu_1088_p3;
wire   [10:0] shl_ln1118_4_fu_1099_p3;
wire  signed [13:0] sext_ln1118_10_fu_1095_p1;
wire  signed [13:0] sext_ln1118_11_fu_1106_p1;
wire   [13:0] add_ln1118_1_fu_1110_p2;
wire   [13:0] sub_ln1118_2_fu_1126_p2;
wire   [13:0] sub_ln1118_3_fu_1132_p2;
wire   [14:0] mul_ln1118_4_fu_306_p2;
wire   [0:0] tmp_12_fu_1158_p3;
wire   [11:0] shl_ln1118_5_fu_1170_p3;
wire  signed [12:0] sext_ln1118_14_fu_1177_p1;
wire  signed [12:0] sext_ln1118_9_fu_1085_p1;
wire   [12:0] sub_ln1118_4_fu_1181_p2;
wire   [14:0] mul_ln1118_5_fu_300_p2;
wire   [14:0] mul_ln1118_6_fu_305_p2;
wire   [0:0] tmp_15_fu_1238_p3;
wire   [11:0] shl_ln1118_6_fu_1250_p3;
wire  signed [12:0] sext_ln1118_17_fu_1257_p1;
wire   [8:0] shl_ln1118_7_fu_1267_p3;
wire   [12:0] sub_ln1118_5_fu_1261_p2;
wire  signed [12:0] sext_ln1118_18_fu_1274_p1;
wire   [12:0] sub_ln1118_6_fu_1278_p2;
wire  signed [13:0] sext_ln415_fu_873_p1;
wire  signed [13:0] sext_ln415_4_fu_983_p1;
wire  signed [13:0] sext_ln415_6_fu_1065_p1;
wire  signed [13:0] sext_ln415_3_fu_933_p1;
wire   [1:0] zext_ln1118_4_fu_1077_p1;
wire   [1:0] zext_ln1118_1_fu_945_p1;
wire   [1:0] add_ln1192_4_fu_1314_p2;
wire   [13:0] zext_ln1192_1_fu_1320_p1;
wire   [13:0] add_ln1192_3_fu_1308_p2;
wire  signed [11:0] sext_ln415_5_fu_1039_p1;
wire  signed [11:0] sext_ln415_2_fu_907_p1;
wire   [1:0] zext_ln1118_fu_919_p1;
wire   [1:0] zext_ln1118_3_fu_1051_p1;
wire   [1:0] add_ln1192_10_fu_1336_p2;
wire   [1:0] zext_ln1118_5_fu_1166_p1;
wire   [6:0] acc_1_V_fu_891_p2;
wire   [6:0] zext_ln1118_6_fu_1246_p1;
wire  signed [11:0] sext_ln415_8_fu_1369_p1;
wire   [11:0] zext_ln415_1_fu_1372_p1;
wire   [11:0] add_ln415_2_fu_1375_p2;
wire  signed [13:0] sext_ln415_9_fu_1385_p1;
wire   [13:0] zext_ln415_2_fu_1388_p1;
wire  signed [13:0] add_ln415_3_fu_1391_p2;
wire  signed [11:0] sext_ln415_12_fu_1404_p1;
wire   [11:0] zext_ln415_3_fu_1407_p1;
wire   [11:0] add_ln415_4_fu_1410_p2;
wire   [10:0] shl_ln1118_8_fu_1420_p3;
wire  signed [11:0] sext_ln1118_20_fu_1427_p1;
wire   [11:0] sub_ln1118_7_fu_1431_p2;
wire   [9:0] tmp_17_fu_1437_p4;
wire   [1:0] zext_ln1118_2_fu_1357_p1;
wire   [1:0] zext_ln708_fu_1354_p1;
wire   [1:0] add_ln1192_1_fu_1451_p2;
wire   [13:0] zext_ln1192_fu_1457_p1;
wire   [13:0] add_ln1192_2_fu_1461_p2;
wire  signed [13:0] sext_ln1118_12_fu_1360_p1;
wire  signed [13:0] acc_0_V_fu_1466_p2;
wire  signed [13:0] sext_ln1192_1_fu_1476_p1;
wire  signed [13:0] sext_ln415_7_fu_1366_p1;
wire   [13:0] zext_ln1192_2_fu_1485_p1;
wire   [13:0] add_ln1192_9_fu_1479_p2;
wire  signed [13:0] sext_ln1118_15_fu_1381_p1;
wire  signed [14:0] sext_ln1192_fu_1472_p1;
wire  signed [14:0] sext_ln415_10_fu_1397_p1;
wire  signed [13:0] sext_ln415_11_fu_1401_p1;
wire  signed [13:0] sext_ln1118_13_fu_1363_p1;
wire  signed [12:0] sext_ln1192_2_fu_1511_p1;
wire  signed [13:0] sext_ln1192_3_fu_1520_p1;
wire   [13:0] add_ln1192_16_fu_1514_p2;
wire   [12:0] add_ln1192_18_fu_1523_p2;
wire  signed [12:0] sext_ln1192_4_fu_1528_p1;
wire  signed [13:0] sext_ln1118_19_fu_1416_p1;
wire   [13:0] add_ln1192_12_fu_1488_p2;
wire   [13:0] acc_3_V_fu_1494_p2;
wire  signed [13:0] sext_ln703_fu_1447_p1;
wire   [14:0] acc_0_V_1_fu_1505_p2;
wire   [13:0] add_ln1192_14_fu_1499_p2;
wire   [0:0] tmp_20_fu_1581_p3;
wire   [7:0] trunc_ln708_13_fu_1563_p4;
wire   [7:0] zext_ln415_4_fu_1589_p1;
wire   [0:0] tmp_21_fu_1599_p3;
wire   [0:0] tmp_19_fu_1573_p3;
wire   [0:0] xor_ln416_fu_1607_p2;
wire   [1:0] tmp_fu_1627_p4;
wire   [2:0] tmp_4_fu_1643_p4;
wire   [0:0] tmp_23_fu_1665_p3;
wire   [0:0] icmp_ln879_fu_1637_p2;
wire   [0:0] xor_ln779_fu_1673_p2;
wire   [0:0] and_ln779_fu_1679_p2;
wire   [0:0] select_ln416_fu_1685_p3;
wire   [13:0] add_ln1192_19_fu_1531_p2;
wire   [0:0] tmp_26_fu_1725_p3;
wire   [7:0] trunc_ln708_14_fu_1707_p4;
wire   [7:0] zext_ln415_5_fu_1733_p1;
wire   [0:0] tmp_27_fu_1743_p3;
wire   [0:0] tmp_25_fu_1717_p3;
wire   [0:0] xor_ln416_1_fu_1751_p2;
wire   [1:0] tmp_3_fu_1779_p4;
wire   [0:0] and_ln416_1_fu_1757_p2;
wire   [0:0] icmp_ln879_2_fu_1789_p2;
wire   [0:0] icmp_ln768_1_fu_1795_p2;
wire   [12:0] add_ln703_fu_1537_p2;
wire   [0:0] tmp_30_fu_1809_p3;
wire   [0:0] tmp_29_fu_1771_p3;
wire   [0:0] xor_ln779_1_fu_1817_p2;
wire   [0:0] and_ln779_1_fu_1823_p2;
wire   [0:0] select_ln777_1_fu_1801_p3;
wire   [0:0] tmp_28_fu_1763_p3;
wire   [0:0] xor_ln785_2_fu_1843_p2;
wire   [0:0] tmp_24_fu_1699_p3;
wire   [0:0] or_ln785_1_fu_1849_p2;
wire   [0:0] select_ln416_1_fu_1829_p3;
wire   [0:0] or_ln786_1_fu_1873_p2;
wire   [0:0] xor_ln786_1_fu_1879_p2;
wire   [0:0] and_ln785_1_fu_1861_p2;
wire   [13:0] acc_2_V_fu_1543_p2;
wire   [0:0] tmp_33_fu_1923_p3;
wire   [7:0] trunc_ln708_15_fu_1905_p4;
wire   [7:0] zext_ln415_6_fu_1931_p1;
wire   [0:0] tmp_34_fu_1941_p3;
wire   [0:0] tmp_32_fu_1915_p3;
wire   [0:0] xor_ln416_2_fu_1949_p2;
wire   [1:0] tmp_6_fu_1977_p4;
wire   [0:0] tmp_37_fu_1999_p3;
wire   [0:0] tmp_36_fu_1969_p3;
wire   [0:0] xor_ln779_2_fu_2007_p2;
wire   [0:0] and_ln779_2_fu_2013_p2;
wire   [0:0] select_ln416_2_fu_2019_p3;
wire   [13:0] acc_3_V_1_fu_1549_p2;
wire   [0:0] tmp_40_fu_2059_p3;
wire   [7:0] trunc_ln708_16_fu_2041_p4;
wire   [7:0] zext_ln415_7_fu_2067_p1;
wire   [0:0] tmp_41_fu_2077_p3;
wire   [0:0] tmp_39_fu_2051_p3;
wire   [0:0] xor_ln416_3_fu_2085_p2;
wire   [1:0] tmp_44_fu_2113_p4;
wire   [0:0] tmp_45_fu_2135_p3;
wire   [0:0] tmp_43_fu_2105_p3;
wire   [0:0] xor_ln779_3_fu_2143_p2;
wire   [0:0] and_ln779_3_fu_2149_p2;
wire   [0:0] select_ln416_3_fu_2155_p3;
wire   [0:0] select_ln777_fu_2169_p3;
wire   [0:0] xor_ln785_fu_2178_p2;
wire   [0:0] or_ln785_fu_2184_p2;
wire   [0:0] xor_ln785_1_fu_2189_p2;
wire   [0:0] and_ln781_fu_2174_p2;
wire   [0:0] or_ln786_fu_2200_p2;
wire   [0:0] xor_ln786_fu_2205_p2;
wire   [0:0] and_ln786_4_fu_2211_p2;
wire   [0:0] and_ln785_fu_2194_p2;
wire   [0:0] or_ln340_1_fu_2222_p2;
wire   [0:0] or_ln340_fu_2216_p2;
wire   [0:0] or_ln340_2_fu_2227_p2;
wire   [7:0] select_ln340_fu_2233_p3;
wire   [7:0] select_ln388_fu_2240_p3;
wire   [0:0] or_ln340_4_fu_2256_p2;
wire   [0:0] or_ln340_5_fu_2260_p2;
wire   [7:0] select_ln340_2_fu_2265_p3;
wire   [7:0] select_ln388_1_fu_2271_p3;
wire   [0:0] select_ln777_2_fu_2286_p3;
wire   [0:0] xor_ln785_4_fu_2295_p2;
wire   [0:0] or_ln785_2_fu_2301_p2;
wire   [0:0] xor_ln785_5_fu_2306_p2;
wire   [0:0] and_ln781_2_fu_2291_p2;
wire   [0:0] or_ln786_2_fu_2317_p2;
wire   [0:0] xor_ln786_2_fu_2322_p2;
wire   [0:0] and_ln786_6_fu_2328_p2;
wire   [0:0] and_ln785_2_fu_2311_p2;
wire   [0:0] or_ln340_7_fu_2339_p2;
wire   [0:0] or_ln340_6_fu_2333_p2;
wire   [0:0] or_ln340_8_fu_2344_p2;
wire   [7:0] select_ln340_4_fu_2350_p3;
wire   [7:0] select_ln388_2_fu_2357_p3;
wire   [0:0] select_ln777_3_fu_2373_p3;
wire   [0:0] xor_ln785_6_fu_2382_p2;
wire   [0:0] or_ln785_3_fu_2388_p2;
wire   [0:0] xor_ln785_7_fu_2393_p2;
wire   [0:0] and_ln781_3_fu_2378_p2;
wire   [0:0] or_ln786_3_fu_2404_p2;
wire   [0:0] xor_ln786_3_fu_2409_p2;
wire   [0:0] and_ln786_7_fu_2415_p2;
wire   [0:0] and_ln785_3_fu_2398_p2;
wire   [0:0] or_ln340_10_fu_2426_p2;
wire   [0:0] or_ln340_9_fu_2420_p2;
wire   [0:0] or_ln340_11_fu_2431_p2;
wire   [7:0] select_ln340_6_fu_2437_p3;
wire   [7:0] select_ln388_3_fu_2444_p3;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_805_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_280 <= add_ln106_fu_811_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_280 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_reg_2460_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln1192_11_reg_2589 <= add_ln1192_11_fu_1342_p2;
        add_ln1192_17_reg_2594 <= add_ln1192_17_fu_1348_p2;
        add_ln1192_6_reg_2579 <= add_ln1192_6_fu_1324_p2;
        add_ln1192_8_reg_2584 <= add_ln1192_8_fu_1330_p2;
        add_ln1192_reg_2574 <= add_ln1192_fu_1302_p2;
        tmp_13_reg_2543 <= sub_ln1118_4_fu_1181_p2[32'd1];
        tmp_14_reg_2553 <= mul_ln1118_5_fu_300_p2[32'd1];
        tmp_16_reg_2569 <= sub_ln1118_6_fu_1278_p2[32'd1];
        tmp_2_reg_2512 <= mul_ln1118_fu_292_p2[32'd1];
        tmp_9_reg_2517 <= add_ln1118_fu_967_p2[32'd1];
        trunc_ln708_10_reg_2548 <= {{mul_ln1118_5_fu_300_p2[14:2]}};
        trunc_ln708_11_reg_2558 <= {{mul_ln1118_6_fu_305_p2[14:2]}};
        trunc_ln708_12_reg_2564 <= {{sub_ln1118_6_fu_1278_p2[12:2]}};
        trunc_ln708_7_reg_2522 <= {{add_ln1118_1_fu_1110_p2[13:2]}};
        trunc_ln708_8_reg_2527 <= {{sub_ln1118_3_fu_1132_p2[13:2]}};
        trunc_ln708_9_reg_2533 <= {{mul_ln1118_4_fu_306_p2[14:2]}};
        trunc_ln708_s_reg_2538 <= {{sub_ln1118_4_fu_1181_p2[12:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_reg_2460_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln415_5_reg_2640 <= add_ln415_5_fu_1737_p2;
        add_ln415_6_reg_2677 <= add_ln415_6_fu_1935_p2;
        add_ln415_7_reg_2717 <= add_ln415_7_fu_2071_p2;
        add_ln415_reg_2606 <= add_ln415_fu_1593_p2;
        and_ln416_2_reg_2683 <= and_ln416_2_fu_1955_p2;
        and_ln416_3_reg_2723 <= and_ln416_3_fu_2091_p2;
        and_ln416_reg_2612 <= and_ln416_fu_1613_p2;
        and_ln781_1_reg_2646 <= and_ln781_1_fu_1837_p2;
        and_ln786_1_reg_2656 <= and_ln786_1_fu_1867_p2;
        and_ln786_2_reg_2705 <= and_ln786_2_fu_2027_p2;
        and_ln786_3_reg_2745 <= and_ln786_3_fu_2163_p2;
        and_ln786_5_reg_2661 <= and_ln786_5_fu_1885_p2;
        and_ln786_reg_2634 <= and_ln786_fu_1693_p2;
        icmp_ln768_2_reg_2700 <= icmp_ln768_2_fu_1993_p2;
        icmp_ln768_3_reg_2740 <= icmp_ln768_3_fu_2129_p2;
        icmp_ln768_reg_2629 <= icmp_ln768_fu_1659_p2;
        icmp_ln879_1_reg_2623 <= icmp_ln879_1_fu_1653_p2;
        icmp_ln879_3_reg_2694 <= icmp_ln879_3_fu_1987_p2;
        icmp_ln879_4_reg_2734 <= icmp_ln879_4_fu_2123_p2;
        or_ln340_3_reg_2666 <= or_ln340_3_fu_1891_p2;
        tmp_18_reg_2600 <= acc_0_V_1_fu_1505_p2[32'd14];
        tmp_22_reg_2618 <= add_ln415_fu_1593_p2[32'd7];
        tmp_31_reg_2671 <= acc_2_V_fu_1543_p2[32'd13];
        tmp_35_reg_2689 <= add_ln415_6_fu_1935_p2[32'd7];
        tmp_38_reg_2711 <= acc_3_V_1_fu_1549_p2[32'd13];
        tmp_42_reg_2729 <= add_ln415_7_fu_2071_p2[32'd7];
        xor_ln785_3_reg_2651 <= xor_ln785_3_fu_1855_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln106_reg_2460 <= icmp_ln106_fu_805_p2;
        icmp_ln106_reg_2460_pp0_iter1_reg <= icmp_ln106_reg_2460;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln106_reg_2460_pp0_iter2_reg <= icmp_ln106_reg_2460_pp0_iter1_reg;
        icmp_ln106_reg_2460_pp0_iter3_reg <= icmp_ln106_reg_2460_pp0_iter2_reg;
        tmp_data_3_V_reg_2494_pp0_iter2_reg <= tmp_data_3_V_reg_2494;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_reg_2460 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_5_reg_2507 <= tmp_5_fu_843_p1[32'd1];
        tmp_data_0_V_reg_2469 <= data_V_data_0_V_dout;
        tmp_data_1_V_reg_2476 <= data_V_data_1_V_dout;
        tmp_data_2_V_reg_2485 <= data_V_data_2_V_dout;
        tmp_data_3_V_reg_2494 <= data_V_data_3_V_dout;
        trunc_ln708_1_reg_2502 <= {{trunc_ln708_1_fu_833_p1[7:2]}};
    end
end

always @ (*) begin
    if ((icmp_ln106_fu_805_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2460_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln106_fu_805_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln106_fu_805_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_V_1_fu_1505_p2 = ($signed(sext_ln1192_fu_1472_p1) + $signed(sext_ln415_10_fu_1397_p1));

assign acc_0_V_fu_1466_p2 = ($signed(add_ln1192_2_fu_1461_p2) + $signed(sext_ln1118_12_fu_1360_p1));

assign acc_1_V_fu_891_p2 = ($signed(sext_ln415_1_fu_885_p1) + $signed(zext_ln415_fu_888_p1));

assign acc_2_V_fu_1543_p2 = ($signed(sext_ln1118_19_fu_1416_p1) + $signed(add_ln1192_12_fu_1488_p2));

assign acc_3_V_1_fu_1549_p2 = ($signed(acc_3_V_fu_1494_p2) + $signed(sext_ln703_fu_1447_p1));

assign acc_3_V_fu_1494_p2 = ($signed(sext_ln1118_15_fu_1381_p1) + $signed(add_ln1192_6_reg_2579));

assign add_ln106_fu_811_p2 = (indvar_flatten_reg_280 + 13'd1);

assign add_ln1118_1_fu_1110_p2 = ($signed(sext_ln1118_10_fu_1095_p1) + $signed(sext_ln1118_11_fu_1106_p1));

assign add_ln1118_fu_967_p2 = ($signed(sext_ln1118_5_fu_963_p1) + $signed(sext_ln1118_4_fu_953_p1));

assign add_ln1192_10_fu_1336_p2 = (zext_ln1118_fu_919_p1 + zext_ln1118_3_fu_1051_p1);

assign add_ln1192_11_fu_1342_p2 = (add_ln1192_10_fu_1336_p2 + zext_ln1118_5_fu_1166_p1);

assign add_ln1192_12_fu_1488_p2 = (zext_ln1192_2_fu_1485_p1 + add_ln1192_9_fu_1479_p2);

assign add_ln1192_14_fu_1499_p2 = ($signed(add_ln415_3_fu_1391_p2) + $signed(acc_0_V_fu_1466_p2));

assign add_ln1192_16_fu_1514_p2 = ($signed(sext_ln415_11_fu_1401_p1) + $signed(sext_ln1118_13_fu_1363_p1));

assign add_ln1192_17_fu_1348_p2 = (acc_1_V_fu_891_p2 + zext_ln1118_6_fu_1246_p1);

assign add_ln1192_18_fu_1523_p2 = ($signed(sext_ln1192_2_fu_1511_p1) + $signed(trunc_ln708_11_reg_2558));

assign add_ln1192_19_fu_1531_p2 = ($signed(sext_ln1192_3_fu_1520_p1) + $signed(add_ln1192_16_fu_1514_p2));

assign add_ln1192_1_fu_1451_p2 = (zext_ln1118_2_fu_1357_p1 + zext_ln708_fu_1354_p1);

assign add_ln1192_2_fu_1461_p2 = (zext_ln1192_fu_1457_p1 + add_ln1192_reg_2574);

assign add_ln1192_3_fu_1308_p2 = ($signed(sext_ln415_6_fu_1065_p1) + $signed(sext_ln415_3_fu_933_p1));

assign add_ln1192_4_fu_1314_p2 = (zext_ln1118_4_fu_1077_p1 + zext_ln1118_1_fu_945_p1);

assign add_ln1192_6_fu_1324_p2 = (zext_ln1192_1_fu_1320_p1 + add_ln1192_3_fu_1308_p2);

assign add_ln1192_8_fu_1330_p2 = ($signed(sext_ln415_5_fu_1039_p1) + $signed(sext_ln415_2_fu_907_p1));

assign add_ln1192_9_fu_1479_p2 = ($signed(sext_ln1192_1_fu_1476_p1) + $signed(sext_ln415_7_fu_1366_p1));

assign add_ln1192_fu_1302_p2 = ($signed(sext_ln415_fu_873_p1) + $signed(sext_ln415_4_fu_983_p1));

assign add_ln415_2_fu_1375_p2 = ($signed(sext_ln415_8_fu_1369_p1) + $signed(zext_ln415_1_fu_1372_p1));

assign add_ln415_3_fu_1391_p2 = ($signed(sext_ln415_9_fu_1385_p1) + $signed(zext_ln415_2_fu_1388_p1));

assign add_ln415_4_fu_1410_p2 = ($signed(sext_ln415_12_fu_1404_p1) + $signed(zext_ln415_3_fu_1407_p1));

assign add_ln415_5_fu_1737_p2 = (trunc_ln708_14_fu_1707_p4 + zext_ln415_5_fu_1733_p1);

assign add_ln415_6_fu_1935_p2 = (trunc_ln708_15_fu_1905_p4 + zext_ln415_6_fu_1931_p1);

assign add_ln415_7_fu_2071_p2 = (trunc_ln708_16_fu_2041_p4 + zext_ln415_7_fu_2067_p1);

assign add_ln415_fu_1593_p2 = (trunc_ln708_13_fu_1563_p4 + zext_ln415_4_fu_1589_p1);

assign add_ln703_fu_1537_p2 = ($signed(add_ln1192_18_fu_1523_p2) + $signed(sext_ln1192_4_fu_1528_p1));

assign and_ln416_1_fu_1757_p2 = (xor_ln416_1_fu_1751_p2 & tmp_25_fu_1717_p3);

assign and_ln416_2_fu_1955_p2 = (xor_ln416_2_fu_1949_p2 & tmp_32_fu_1915_p3);

assign and_ln416_3_fu_2091_p2 = (xor_ln416_3_fu_2085_p2 & tmp_39_fu_2051_p3);

assign and_ln416_fu_1613_p2 = (xor_ln416_fu_1607_p2 & tmp_19_fu_1573_p3);

assign and_ln779_1_fu_1823_p2 = (xor_ln779_1_fu_1817_p2 & tmp_29_fu_1771_p3);

assign and_ln779_2_fu_2013_p2 = (xor_ln779_2_fu_2007_p2 & tmp_36_fu_1969_p3);

assign and_ln779_3_fu_2149_p2 = (xor_ln779_3_fu_2143_p2 & tmp_43_fu_2105_p3);

assign and_ln779_fu_1679_p2 = (xor_ln779_fu_1673_p2 & icmp_ln879_fu_1637_p2);

assign and_ln781_1_fu_1837_p2 = (icmp_ln879_2_fu_1789_p2 & and_ln416_1_fu_1757_p2);

assign and_ln781_2_fu_2291_p2 = (icmp_ln879_3_reg_2694 & and_ln416_2_reg_2683);

assign and_ln781_3_fu_2378_p2 = (icmp_ln879_4_reg_2734 & and_ln416_3_reg_2723);

assign and_ln781_fu_2174_p2 = (icmp_ln879_1_reg_2623 & and_ln416_reg_2612);

assign and_ln785_1_fu_1861_p2 = (xor_ln785_3_fu_1855_p2 & or_ln785_1_fu_1849_p2);

assign and_ln785_2_fu_2311_p2 = (xor_ln785_5_fu_2306_p2 & or_ln785_2_fu_2301_p2);

assign and_ln785_3_fu_2398_p2 = (xor_ln785_7_fu_2393_p2 & or_ln785_3_fu_2388_p2);

assign and_ln785_fu_2194_p2 = (xor_ln785_1_fu_2189_p2 & or_ln785_fu_2184_p2);

assign and_ln786_1_fu_1867_p2 = (tmp_28_fu_1763_p3 & select_ln416_1_fu_1829_p3);

assign and_ln786_2_fu_2027_p2 = (tmp_35_fu_1961_p3 & select_ln416_2_fu_2019_p3);

assign and_ln786_3_fu_2163_p2 = (tmp_42_fu_2097_p3 & select_ln416_3_fu_2155_p3);

assign and_ln786_4_fu_2211_p2 = (xor_ln786_fu_2205_p2 & tmp_18_reg_2600);

assign and_ln786_5_fu_1885_p2 = (xor_ln786_1_fu_1879_p2 & tmp_24_fu_1699_p3);

assign and_ln786_6_fu_2328_p2 = (xor_ln786_2_fu_2322_p2 & tmp_31_reg_2671);

assign and_ln786_7_fu_2415_p2 = (xor_ln786_3_fu_2409_p2 & tmp_38_reg_2711);

assign and_ln786_fu_1693_p2 = (tmp_22_fu_1619_p3 & select_ln416_fu_1685_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln106_reg_2460_pp0_iter3_reg == 1'd0) & (io_acc_block_signal_op305 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln106_reg_2460 == 1'd0) & (io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln106_reg_2460_pp0_iter3_reg == 1'd0) & (io_acc_block_signal_op305 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln106_reg_2460 == 1'd0) & (io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln106_reg_2460_pp0_iter3_reg == 1'd0) & (io_acc_block_signal_op305 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln106_reg_2460 == 1'd0) & (io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln106_reg_2460 == 1'd0) & (io_acc_block_signal_op21 == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln106_reg_2460_pp0_iter3_reg == 1'd0) & (io_acc_block_signal_op305 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln106_fu_805_p2 = ((indvar_flatten_reg_280 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln768_1_fu_1795_p2 = ((tmp_3_fu_1779_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_2_fu_1993_p2 = ((tmp_6_fu_1977_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_3_fu_2129_p2 = ((tmp_44_fu_2113_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_1659_p2 = ((tmp_4_fu_1643_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_1653_p2 = ((tmp_4_fu_1643_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_1789_p2 = ((tmp_3_fu_1779_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_1987_p2 = ((tmp_6_fu_1977_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_2123_p2 = ((tmp_44_fu_2113_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1637_p2 = ((tmp_fu_1627_p4 == 2'd3) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op21 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign io_acc_block_signal_op305 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign mul_ln1118_1_fu_293_p1 = tmp_data_0_V_reg_2469;

assign mul_ln1118_1_fu_293_p2 = ($signed(13'd8181) * $signed(mul_ln1118_1_fu_293_p1));

assign mul_ln1118_2_fu_296_p1 = tmp_data_0_V_reg_2469;

assign mul_ln1118_2_fu_296_p2 = ($signed({{1'b0}, {14'd26}}) * $signed(mul_ln1118_2_fu_296_p1));

assign mul_ln1118_3_fu_303_p1 = tmp_data_1_V_reg_2476;

assign mul_ln1118_3_fu_303_p2 = ($signed(15'd32717) * $signed(mul_ln1118_3_fu_303_p1));

assign mul_ln1118_4_fu_306_p1 = tmp_data_2_V_reg_2485;

assign mul_ln1118_4_fu_306_p2 = ($signed({{1'b0}, {15'd41}}) * $signed(mul_ln1118_4_fu_306_p1));

assign mul_ln1118_5_fu_300_p1 = sext_ln1118_16_fu_1205_p1;

assign mul_ln1118_5_fu_300_p2 = ($signed({{1'b0}, {15'd50}}) * $signed(mul_ln1118_5_fu_300_p1));

assign mul_ln1118_6_fu_305_p1 = sext_ln1118_16_fu_1205_p1;

assign mul_ln1118_6_fu_305_p2 = ($signed(15'd32730) * $signed(mul_ln1118_6_fu_305_p1));

assign mul_ln1118_fu_292_p1 = tmp_data_0_V_reg_2469;

assign mul_ln1118_fu_292_p2 = ($signed({{1'b0}, {15'd53}}) * $signed(mul_ln1118_fu_292_p1));

assign or_ln340_10_fu_2426_p2 = (xor_ln785_7_fu_2393_p2 | and_ln786_3_reg_2745);

assign or_ln340_11_fu_2431_p2 = (or_ln340_10_fu_2426_p2 | and_ln781_3_fu_2378_p2);

assign or_ln340_1_fu_2222_p2 = (xor_ln785_1_fu_2189_p2 | and_ln786_reg_2634);

assign or_ln340_2_fu_2227_p2 = (or_ln340_1_fu_2222_p2 | and_ln781_fu_2174_p2);

assign or_ln340_3_fu_1891_p2 = (and_ln786_5_fu_1885_p2 | and_ln785_1_fu_1861_p2);

assign or_ln340_4_fu_2256_p2 = (xor_ln785_3_reg_2651 | and_ln786_1_reg_2656);

assign or_ln340_5_fu_2260_p2 = (or_ln340_4_fu_2256_p2 | and_ln781_1_reg_2646);

assign or_ln340_6_fu_2333_p2 = (and_ln786_6_fu_2328_p2 | and_ln785_2_fu_2311_p2);

assign or_ln340_7_fu_2339_p2 = (xor_ln785_5_fu_2306_p2 | and_ln786_2_reg_2705);

assign or_ln340_8_fu_2344_p2 = (or_ln340_7_fu_2339_p2 | and_ln781_2_fu_2291_p2);

assign or_ln340_9_fu_2420_p2 = (and_ln786_7_fu_2415_p2 | and_ln785_3_fu_2398_p2);

assign or_ln340_fu_2216_p2 = (and_ln786_4_fu_2211_p2 | and_ln785_fu_2194_p2);

assign or_ln785_1_fu_1849_p2 = (xor_ln785_2_fu_1843_p2 | tmp_28_fu_1763_p3);

assign or_ln785_2_fu_2301_p2 = (xor_ln785_4_fu_2295_p2 | tmp_35_reg_2689);

assign or_ln785_3_fu_2388_p2 = (xor_ln785_6_fu_2382_p2 | tmp_42_reg_2729);

assign or_ln785_fu_2184_p2 = (xor_ln785_fu_2178_p2 | tmp_22_reg_2618);

assign or_ln786_1_fu_1873_p2 = (and_ln786_1_fu_1867_p2 | and_ln781_1_fu_1837_p2);

assign or_ln786_2_fu_2317_p2 = (and_ln786_2_reg_2705 | and_ln781_2_fu_2291_p2);

assign or_ln786_3_fu_2404_p2 = (and_ln786_3_reg_2745 | and_ln781_3_fu_2378_p2);

assign or_ln786_fu_2200_p2 = (and_ln786_reg_2634 | and_ln781_fu_2174_p2);

assign res_V_data_0_V_din = ((or_ln340_2_fu_2227_p2[0:0] === 1'b1) ? select_ln340_fu_2233_p3 : select_ln388_fu_2240_p3);

assign res_V_data_1_V_din = ((or_ln340_5_fu_2260_p2[0:0] === 1'b1) ? select_ln340_2_fu_2265_p3 : select_ln388_1_fu_2271_p3);

assign res_V_data_2_V_din = ((or_ln340_8_fu_2344_p2[0:0] === 1'b1) ? select_ln340_4_fu_2350_p3 : select_ln388_2_fu_2357_p3);

assign res_V_data_3_V_din = ((or_ln340_11_fu_2431_p2[0:0] === 1'b1) ? select_ln340_6_fu_2437_p3 : select_ln388_3_fu_2444_p3);

assign select_ln340_2_fu_2265_p3 = ((or_ln340_3_reg_2666[0:0] === 1'b1) ? 8'd127 : add_ln415_5_reg_2640);

assign select_ln340_4_fu_2350_p3 = ((or_ln340_6_fu_2333_p2[0:0] === 1'b1) ? 8'd127 : add_ln415_6_reg_2677);

assign select_ln340_6_fu_2437_p3 = ((or_ln340_9_fu_2420_p2[0:0] === 1'b1) ? 8'd127 : add_ln415_7_reg_2717);

assign select_ln340_fu_2233_p3 = ((or_ln340_fu_2216_p2[0:0] === 1'b1) ? 8'd127 : add_ln415_reg_2606);

assign select_ln388_1_fu_2271_p3 = ((and_ln786_5_reg_2661[0:0] === 1'b1) ? 8'd128 : add_ln415_5_reg_2640);

assign select_ln388_2_fu_2357_p3 = ((and_ln786_6_fu_2328_p2[0:0] === 1'b1) ? 8'd128 : add_ln415_6_reg_2677);

assign select_ln388_3_fu_2444_p3 = ((and_ln786_7_fu_2415_p2[0:0] === 1'b1) ? 8'd128 : add_ln415_7_reg_2717);

assign select_ln388_fu_2240_p3 = ((and_ln786_4_fu_2211_p2[0:0] === 1'b1) ? 8'd128 : add_ln415_reg_2606);

assign select_ln416_1_fu_1829_p3 = ((and_ln416_1_fu_1757_p2[0:0] === 1'b1) ? and_ln779_1_fu_1823_p2 : icmp_ln879_2_fu_1789_p2);

assign select_ln416_2_fu_2019_p3 = ((and_ln416_2_fu_1955_p2[0:0] === 1'b1) ? and_ln779_2_fu_2013_p2 : icmp_ln879_3_fu_1987_p2);

assign select_ln416_3_fu_2155_p3 = ((and_ln416_3_fu_2091_p2[0:0] === 1'b1) ? and_ln779_3_fu_2149_p2 : icmp_ln879_4_fu_2123_p2);

assign select_ln416_fu_1685_p3 = ((and_ln416_fu_1613_p2[0:0] === 1'b1) ? and_ln779_fu_1679_p2 : icmp_ln879_1_fu_1653_p2);

assign select_ln777_1_fu_1801_p3 = ((and_ln416_1_fu_1757_p2[0:0] === 1'b1) ? icmp_ln879_2_fu_1789_p2 : icmp_ln768_1_fu_1795_p2);

assign select_ln777_2_fu_2286_p3 = ((and_ln416_2_reg_2683[0:0] === 1'b1) ? icmp_ln879_3_reg_2694 : icmp_ln768_2_reg_2700);

assign select_ln777_3_fu_2373_p3 = ((and_ln416_3_reg_2723[0:0] === 1'b1) ? icmp_ln879_4_reg_2734 : icmp_ln768_3_reg_2740);

assign select_ln777_fu_2169_p3 = ((and_ln416_reg_2612[0:0] === 1'b1) ? icmp_ln879_1_reg_2623 : icmp_ln768_reg_2629);

assign sext_ln1118_10_fu_1095_p1 = $signed(shl_ln1118_3_fu_1088_p3);

assign sext_ln1118_11_fu_1106_p1 = $signed(shl_ln1118_4_fu_1099_p3);

assign sext_ln1118_12_fu_1360_p1 = $signed(trunc_ln708_7_reg_2522);

assign sext_ln1118_13_fu_1363_p1 = trunc_ln708_8_reg_2527;

assign sext_ln1118_14_fu_1177_p1 = $signed(shl_ln1118_5_fu_1170_p3);

assign sext_ln1118_15_fu_1381_p1 = $signed(add_ln415_2_fu_1375_p2);

assign sext_ln1118_16_fu_1205_p1 = tmp_data_3_V_reg_2494;

assign sext_ln1118_17_fu_1257_p1 = $signed(shl_ln1118_6_fu_1250_p3);

assign sext_ln1118_18_fu_1274_p1 = $signed(shl_ln1118_7_fu_1267_p3);

assign sext_ln1118_19_fu_1416_p1 = $signed(add_ln415_4_fu_1410_p2);

assign sext_ln1118_20_fu_1427_p1 = $signed(shl_ln1118_8_fu_1420_p3);

assign sext_ln1118_4_fu_953_p1 = tmp_data_1_V_reg_2476;

assign sext_ln1118_5_fu_963_p1 = $signed(shl_ln_fu_956_p3);

assign sext_ln1118_6_fu_1002_p1 = $signed(shl_ln1118_1_fu_995_p3);

assign sext_ln1118_7_fu_1019_p1 = $signed(shl_ln1118_2_fu_1012_p3);

assign sext_ln1118_9_fu_1085_p1 = tmp_data_2_V_reg_2485;

assign sext_ln1192_1_fu_1476_p1 = $signed(add_ln1192_8_reg_2584);

assign sext_ln1192_2_fu_1511_p1 = trunc_ln708_8_reg_2527;

assign sext_ln1192_3_fu_1520_p1 = add_ln1192_17_reg_2594;

assign sext_ln1192_4_fu_1528_p1 = add_ln1192_17_reg_2594;

assign sext_ln1192_fu_1472_p1 = acc_0_V_fu_1466_p2;

assign sext_ln415_10_fu_1397_p1 = add_ln415_3_fu_1391_p2;

assign sext_ln415_11_fu_1401_p1 = trunc_ln708_11_reg_2558;

assign sext_ln415_12_fu_1404_p1 = $signed(trunc_ln708_12_reg_2564);

assign sext_ln415_1_fu_885_p1 = $signed(trunc_ln708_1_reg_2502);

assign sext_ln415_2_fu_907_p1 = $signed(trunc_ln708_2_fu_897_p4);

assign sext_ln415_3_fu_933_p1 = $signed(trunc_ln708_3_fu_923_p4);

assign sext_ln415_4_fu_983_p1 = $signed(trunc_ln708_4_fu_973_p4);

assign sext_ln415_5_fu_1039_p1 = $signed(trunc_ln708_5_fu_1029_p4);

assign sext_ln415_6_fu_1065_p1 = $signed(trunc_ln708_6_fu_1055_p4);

assign sext_ln415_7_fu_1366_p1 = $signed(trunc_ln708_9_reg_2533);

assign sext_ln415_8_fu_1369_p1 = $signed(trunc_ln708_s_reg_2538);

assign sext_ln415_9_fu_1385_p1 = $signed(trunc_ln708_10_reg_2548);

assign sext_ln415_fu_873_p1 = $signed(trunc_ln_fu_863_p4);

assign sext_ln703_fu_1447_p1 = $signed(tmp_17_fu_1437_p4);

assign shl_ln1118_1_fu_995_p3 = {{tmp_data_1_V_reg_2476}, {4'd0}};

assign shl_ln1118_2_fu_1012_p3 = {{tmp_data_1_V_reg_2476}, {1'd0}};

assign shl_ln1118_3_fu_1088_p3 = {{tmp_data_2_V_reg_2485}, {5'd0}};

assign shl_ln1118_4_fu_1099_p3 = {{tmp_data_2_V_reg_2485}, {3'd0}};

assign shl_ln1118_5_fu_1170_p3 = {{tmp_data_2_V_reg_2485}, {4'd0}};

assign shl_ln1118_6_fu_1250_p3 = {{tmp_data_3_V_reg_2494}, {4'd0}};

assign shl_ln1118_7_fu_1267_p3 = {{tmp_data_3_V_reg_2494}, {1'd0}};

assign shl_ln1118_8_fu_1420_p3 = {{tmp_data_3_V_reg_2494_pp0_iter2_reg}, {3'd0}};

assign shl_ln_fu_956_p3 = {{tmp_data_1_V_reg_2476}, {2'd0}};

assign start_out = real_start;

assign sub_ln1118_1_fu_1023_p2 = ($signed(sub_ln1118_fu_1006_p2) - $signed(sext_ln1118_7_fu_1019_p1));

assign sub_ln1118_2_fu_1126_p2 = ($signed(14'd0) - $signed(sext_ln1118_10_fu_1095_p1));

assign sub_ln1118_3_fu_1132_p2 = ($signed(sub_ln1118_2_fu_1126_p2) - $signed(sext_ln1118_11_fu_1106_p1));

assign sub_ln1118_4_fu_1181_p2 = ($signed(sext_ln1118_14_fu_1177_p1) - $signed(sext_ln1118_9_fu_1085_p1));

assign sub_ln1118_5_fu_1261_p2 = ($signed(13'd0) - $signed(sext_ln1118_17_fu_1257_p1));

assign sub_ln1118_6_fu_1278_p2 = ($signed(sub_ln1118_5_fu_1261_p2) - $signed(sext_ln1118_18_fu_1274_p1));

assign sub_ln1118_7_fu_1431_p2 = ($signed(12'd0) - $signed(sext_ln1118_20_fu_1427_p1));

assign sub_ln1118_fu_1006_p2 = ($signed(13'd0) - $signed(sext_ln1118_6_fu_1002_p1));

assign tmp_10_fu_1043_p3 = sub_ln1118_1_fu_1023_p2[32'd1];

assign tmp_11_fu_1069_p3 = mul_ln1118_3_fu_303_p2[32'd1];

assign tmp_12_fu_1158_p3 = mul_ln1118_4_fu_306_p2[32'd1];

assign tmp_15_fu_1238_p3 = mul_ln1118_6_fu_305_p2[32'd1];

assign tmp_17_fu_1437_p4 = {{sub_ln1118_7_fu_1431_p2[11:2]}};

assign tmp_19_fu_1573_p3 = add_ln1192_14_fu_1499_p2[32'd11];

assign tmp_20_fu_1581_p3 = add_ln1192_14_fu_1499_p2[32'd3];

assign tmp_21_fu_1599_p3 = add_ln415_fu_1593_p2[32'd7];

assign tmp_22_fu_1619_p3 = add_ln415_fu_1593_p2[32'd7];

assign tmp_23_fu_1665_p3 = add_ln1192_14_fu_1499_p2[32'd12];

assign tmp_24_fu_1699_p3 = add_ln1192_19_fu_1531_p2[32'd13];

assign tmp_25_fu_1717_p3 = add_ln1192_19_fu_1531_p2[32'd11];

assign tmp_26_fu_1725_p3 = add_ln1192_19_fu_1531_p2[32'd3];

assign tmp_27_fu_1743_p3 = add_ln415_5_fu_1737_p2[32'd7];

assign tmp_28_fu_1763_p3 = add_ln415_5_fu_1737_p2[32'd7];

assign tmp_29_fu_1771_p3 = add_ln1192_19_fu_1531_p2[32'd13];

assign tmp_30_fu_1809_p3 = add_ln703_fu_1537_p2[32'd12];

assign tmp_32_fu_1915_p3 = acc_2_V_fu_1543_p2[32'd11];

assign tmp_33_fu_1923_p3 = acc_2_V_fu_1543_p2[32'd3];

assign tmp_34_fu_1941_p3 = add_ln415_6_fu_1935_p2[32'd7];

assign tmp_35_fu_1961_p3 = add_ln415_6_fu_1935_p2[32'd7];

assign tmp_36_fu_1969_p3 = acc_2_V_fu_1543_p2[32'd13];

assign tmp_37_fu_1999_p3 = acc_2_V_fu_1543_p2[32'd12];

assign tmp_39_fu_2051_p3 = acc_3_V_1_fu_1549_p2[32'd11];

assign tmp_3_fu_1779_p4 = {{add_ln1192_19_fu_1531_p2[13:12]}};

assign tmp_40_fu_2059_p3 = acc_3_V_1_fu_1549_p2[32'd3];

assign tmp_41_fu_2077_p3 = add_ln415_7_fu_2071_p2[32'd7];

assign tmp_42_fu_2097_p3 = add_ln415_7_fu_2071_p2[32'd7];

assign tmp_43_fu_2105_p3 = acc_3_V_1_fu_1549_p2[32'd13];

assign tmp_44_fu_2113_p4 = {{acc_3_V_1_fu_1549_p2[13:12]}};

assign tmp_45_fu_2135_p3 = acc_3_V_1_fu_1549_p2[32'd12];

assign tmp_4_fu_1643_p4 = {{acc_0_V_1_fu_1505_p2[14:12]}};

assign tmp_5_fu_843_p1 = data_V_data_0_V_dout;

assign tmp_6_fu_1977_p4 = {{acc_2_V_fu_1543_p2[13:12]}};

assign tmp_7_fu_911_p3 = mul_ln1118_1_fu_293_p2[32'd1];

assign tmp_8_fu_937_p3 = mul_ln1118_2_fu_296_p2[32'd1];

assign tmp_fu_1627_p4 = {{acc_0_V_1_fu_1505_p2[14:13]}};

assign trunc_ln708_13_fu_1563_p4 = {{add_ln1192_14_fu_1499_p2[11:4]}};

assign trunc_ln708_14_fu_1707_p4 = {{add_ln1192_19_fu_1531_p2[11:4]}};

assign trunc_ln708_15_fu_1905_p4 = {{acc_2_V_fu_1543_p2[11:4]}};

assign trunc_ln708_16_fu_2041_p4 = {{acc_3_V_1_fu_1549_p2[11:4]}};

assign trunc_ln708_1_fu_833_p1 = data_V_data_0_V_dout;

assign trunc_ln708_2_fu_897_p4 = {{mul_ln1118_1_fu_293_p2[12:2]}};

assign trunc_ln708_3_fu_923_p4 = {{mul_ln1118_2_fu_296_p2[13:2]}};

assign trunc_ln708_4_fu_973_p4 = {{add_ln1118_fu_967_p2[10:2]}};

assign trunc_ln708_5_fu_1029_p4 = {{sub_ln1118_1_fu_1023_p2[12:2]}};

assign trunc_ln708_6_fu_1055_p4 = {{mul_ln1118_3_fu_303_p2[14:2]}};

assign trunc_ln_fu_863_p4 = {{mul_ln1118_fu_292_p2[14:2]}};

assign xor_ln416_1_fu_1751_p2 = (tmp_27_fu_1743_p3 ^ 1'd1);

assign xor_ln416_2_fu_1949_p2 = (tmp_34_fu_1941_p3 ^ 1'd1);

assign xor_ln416_3_fu_2085_p2 = (tmp_41_fu_2077_p3 ^ 1'd1);

assign xor_ln416_fu_1607_p2 = (tmp_21_fu_1599_p3 ^ 1'd1);

assign xor_ln779_1_fu_1817_p2 = (tmp_30_fu_1809_p3 ^ 1'd1);

assign xor_ln779_2_fu_2007_p2 = (tmp_37_fu_1999_p3 ^ 1'd1);

assign xor_ln779_3_fu_2143_p2 = (tmp_45_fu_2135_p3 ^ 1'd1);

assign xor_ln779_fu_1673_p2 = (tmp_23_fu_1665_p3 ^ 1'd1);

assign xor_ln785_1_fu_2189_p2 = (tmp_18_reg_2600 ^ 1'd1);

assign xor_ln785_2_fu_1843_p2 = (select_ln777_1_fu_1801_p3 ^ 1'd1);

assign xor_ln785_3_fu_1855_p2 = (tmp_24_fu_1699_p3 ^ 1'd1);

assign xor_ln785_4_fu_2295_p2 = (select_ln777_2_fu_2286_p3 ^ 1'd1);

assign xor_ln785_5_fu_2306_p2 = (tmp_31_reg_2671 ^ 1'd1);

assign xor_ln785_6_fu_2382_p2 = (select_ln777_3_fu_2373_p3 ^ 1'd1);

assign xor_ln785_7_fu_2393_p2 = (tmp_38_reg_2711 ^ 1'd1);

assign xor_ln785_fu_2178_p2 = (select_ln777_fu_2169_p3 ^ 1'd1);

assign xor_ln786_1_fu_1879_p2 = (or_ln786_1_fu_1873_p2 ^ 1'd1);

assign xor_ln786_2_fu_2322_p2 = (or_ln786_2_fu_2317_p2 ^ 1'd1);

assign xor_ln786_3_fu_2409_p2 = (or_ln786_3_fu_2404_p2 ^ 1'd1);

assign xor_ln786_fu_2205_p2 = (or_ln786_fu_2200_p2 ^ 1'd1);

assign zext_ln1118_1_fu_945_p1 = tmp_8_fu_937_p3;

assign zext_ln1118_2_fu_1357_p1 = tmp_9_reg_2517;

assign zext_ln1118_3_fu_1051_p1 = tmp_10_fu_1043_p3;

assign zext_ln1118_4_fu_1077_p1 = tmp_11_fu_1069_p3;

assign zext_ln1118_5_fu_1166_p1 = tmp_12_fu_1158_p3;

assign zext_ln1118_6_fu_1246_p1 = tmp_15_fu_1238_p3;

assign zext_ln1118_fu_919_p1 = tmp_7_fu_911_p3;

assign zext_ln1192_1_fu_1320_p1 = add_ln1192_4_fu_1314_p2;

assign zext_ln1192_2_fu_1485_p1 = add_ln1192_11_reg_2589;

assign zext_ln1192_fu_1457_p1 = add_ln1192_1_fu_1451_p2;

assign zext_ln415_1_fu_1372_p1 = tmp_13_reg_2543;

assign zext_ln415_2_fu_1388_p1 = tmp_14_reg_2553;

assign zext_ln415_3_fu_1407_p1 = tmp_16_reg_2569;

assign zext_ln415_4_fu_1589_p1 = tmp_20_fu_1581_p3;

assign zext_ln415_5_fu_1733_p1 = tmp_26_fu_1725_p3;

assign zext_ln415_6_fu_1931_p1 = tmp_33_fu_1923_p3;

assign zext_ln415_7_fu_2067_p1 = tmp_40_fu_2059_p3;

assign zext_ln415_fu_888_p1 = tmp_5_reg_2507;

assign zext_ln708_fu_1354_p1 = tmp_2_reg_2512;

endmodule //pointwise_conv_2d_cl_array_array_ap_fixed_8_2_0_0_0_4u_config51_s
